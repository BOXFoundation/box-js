/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf')
var goog = jspb
var global = Function('return this')()

var transaction_pb = require('./transaction_pb.js')
goog.object.extend(proto, transaction_pb)
goog.exportSymbol('proto.rpcpb.BlockDetail', null, global)
goog.exportSymbol('proto.rpcpb.CallReq', null, global)
goog.exportSymbol('proto.rpcpb.CallResp', null, global)
goog.exportSymbol('proto.rpcpb.ContractInfo', null, global)
goog.exportSymbol('proto.rpcpb.EstimateGasResp', null, global)
goog.exportSymbol('proto.rpcpb.GetCodeReq', null, global)
goog.exportSymbol('proto.rpcpb.GetCodeResp', null, global)
goog.exportSymbol('proto.rpcpb.ListenBlocksReq', null, global)
goog.exportSymbol('proto.rpcpb.ListenedData', null, global)
goog.exportSymbol('proto.rpcpb.LogDetail', null, global)
goog.exportSymbol('proto.rpcpb.LogDetails', null, global)
goog.exportSymbol('proto.rpcpb.Logs', null, global)
goog.exportSymbol('proto.rpcpb.LogsReq', null, global)
goog.exportSymbol('proto.rpcpb.LogsReq.topiclist', null, global)
goog.exportSymbol('proto.rpcpb.NonceReq', null, global)
goog.exportSymbol('proto.rpcpb.NonceResp', null, global)
goog.exportSymbol('proto.rpcpb.RegisterDetails', null, global)
goog.exportSymbol('proto.rpcpb.RegisterReq', null, global)
goog.exportSymbol('proto.rpcpb.SplitContractInfo', null, global)
goog.exportSymbol('proto.rpcpb.StorageReq', null, global)
goog.exportSymbol('proto.rpcpb.StorageResp', null, global)
goog.exportSymbol('proto.rpcpb.TableReq', null, global)
goog.exportSymbol('proto.rpcpb.TableResp', null, global)
goog.exportSymbol('proto.rpcpb.TokenIssueInfo', null, global)
goog.exportSymbol('proto.rpcpb.TokenTransferInfo', null, global)
goog.exportSymbol('proto.rpcpb.TxDetail', null, global)
goog.exportSymbol('proto.rpcpb.TxDetail.TxType', null, global)
goog.exportSymbol('proto.rpcpb.TxInDetail', null, global)
goog.exportSymbol('proto.rpcpb.TxOutDetail', null, global)
goog.exportSymbol('proto.rpcpb.TxOutDetail.TxOutType', null, global)
goog.exportSymbol('proto.rpcpb.TxStatus', null, global)
goog.exportSymbol('proto.rpcpb.ViewBlockDetailReq', null, global)
goog.exportSymbol('proto.rpcpb.ViewBlockDetailResp', null, global)
goog.exportSymbol('proto.rpcpb.ViewTxDetailReq', null, global)
goog.exportSymbol('proto.rpcpb.ViewTxDetailResp', null, global)
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpcpb.RegisterReq = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.rpcpb.RegisterReq.oneofGroups_)
}
goog.inherits(proto.rpcpb.RegisterReq, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpcpb.RegisterReq.displayName = 'proto.rpcpb.RegisterReq'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpcpb.ListenedData = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.rpcpb.ListenedData.oneofGroups_)
}
goog.inherits(proto.rpcpb.ListenedData, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpcpb.ListenedData.displayName = 'proto.rpcpb.ListenedData'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpcpb.RegisterDetails = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.rpcpb.RegisterDetails, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpcpb.RegisterDetails.displayName = 'proto.rpcpb.RegisterDetails'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpcpb.ViewTxDetailReq = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.rpcpb.ViewTxDetailReq, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpcpb.ViewTxDetailReq.displayName = 'proto.rpcpb.ViewTxDetailReq'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpcpb.ViewTxDetailResp = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.rpcpb.ViewTxDetailResp, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpcpb.ViewTxDetailResp.displayName = 'proto.rpcpb.ViewTxDetailResp'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpcpb.ViewBlockDetailReq = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.rpcpb.ViewBlockDetailReq, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpcpb.ViewBlockDetailReq.displayName = 'proto.rpcpb.ViewBlockDetailReq'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpcpb.ViewBlockDetailResp = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.rpcpb.ViewBlockDetailResp, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpcpb.ViewBlockDetailResp.displayName = 'proto.rpcpb.ViewBlockDetailResp'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpcpb.ContractInfo = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rpcpb.ContractInfo.repeatedFields_, null)
}
goog.inherits(proto.rpcpb.ContractInfo, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpcpb.ContractInfo.displayName = 'proto.rpcpb.ContractInfo'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpcpb.ListenBlocksReq = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.rpcpb.ListenBlocksReq, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpcpb.ListenBlocksReq.displayName = 'proto.rpcpb.ListenBlocksReq'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpcpb.LogsReq = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rpcpb.LogsReq.repeatedFields_, null)
}
goog.inherits(proto.rpcpb.LogsReq, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpcpb.LogsReq.displayName = 'proto.rpcpb.LogsReq'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpcpb.LogsReq.topiclist = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rpcpb.LogsReq.topiclist.repeatedFields_, null)
}
goog.inherits(proto.rpcpb.LogsReq.topiclist, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpcpb.LogsReq.topiclist.displayName = 'proto.rpcpb.LogsReq.topiclist'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpcpb.Logs = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rpcpb.Logs.repeatedFields_, null)
}
goog.inherits(proto.rpcpb.Logs, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpcpb.Logs.displayName = 'proto.rpcpb.Logs'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpcpb.LogDetails = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rpcpb.LogDetails.repeatedFields_, null)
}
goog.inherits(proto.rpcpb.LogDetails, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpcpb.LogDetails.displayName = 'proto.rpcpb.LogDetails'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpcpb.LogDetail = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rpcpb.LogDetail.repeatedFields_, null)
}
goog.inherits(proto.rpcpb.LogDetail, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpcpb.LogDetail.displayName = 'proto.rpcpb.LogDetail'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpcpb.TxDetail = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rpcpb.TxDetail.repeatedFields_, null)
}
goog.inherits(proto.rpcpb.TxDetail, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpcpb.TxDetail.displayName = 'proto.rpcpb.TxDetail'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpcpb.TxInDetail = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.rpcpb.TxInDetail, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpcpb.TxInDetail.displayName = 'proto.rpcpb.TxInDetail'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpcpb.TxOutDetail = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.rpcpb.TxOutDetail.oneofGroups_)
}
goog.inherits(proto.rpcpb.TxOutDetail, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpcpb.TxOutDetail.displayName = 'proto.rpcpb.TxOutDetail'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpcpb.BlockDetail = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rpcpb.BlockDetail.repeatedFields_, null)
}
goog.inherits(proto.rpcpb.BlockDetail, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpcpb.BlockDetail.displayName = 'proto.rpcpb.BlockDetail'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpcpb.TokenIssueInfo = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.rpcpb.TokenIssueInfo, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpcpb.TokenIssueInfo.displayName = 'proto.rpcpb.TokenIssueInfo'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpcpb.SplitContractInfo = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rpcpb.SplitContractInfo.repeatedFields_, null)
}
goog.inherits(proto.rpcpb.SplitContractInfo, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpcpb.SplitContractInfo.displayName = 'proto.rpcpb.SplitContractInfo'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpcpb.TokenTransferInfo = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.rpcpb.TokenTransferInfo, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpcpb.TokenTransferInfo.displayName = 'proto.rpcpb.TokenTransferInfo'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpcpb.CallReq = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.rpcpb.CallReq, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpcpb.CallReq.displayName = 'proto.rpcpb.CallReq'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpcpb.CallResp = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.rpcpb.CallResp, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpcpb.CallResp.displayName = 'proto.rpcpb.CallResp'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpcpb.EstimateGasResp = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.rpcpb.EstimateGasResp, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpcpb.EstimateGasResp.displayName = 'proto.rpcpb.EstimateGasResp'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpcpb.NonceReq = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.rpcpb.NonceReq, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpcpb.NonceReq.displayName = 'proto.rpcpb.NonceReq'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpcpb.NonceResp = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.rpcpb.NonceResp, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpcpb.NonceResp.displayName = 'proto.rpcpb.NonceResp'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpcpb.TableReq = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.rpcpb.TableReq, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpcpb.TableReq.displayName = 'proto.rpcpb.TableReq'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpcpb.TableResp = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rpcpb.TableResp.repeatedFields_, null)
}
goog.inherits(proto.rpcpb.TableResp, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpcpb.TableResp.displayName = 'proto.rpcpb.TableResp'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpcpb.GetCodeReq = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.rpcpb.GetCodeReq, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpcpb.GetCodeReq.displayName = 'proto.rpcpb.GetCodeReq'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpcpb.GetCodeResp = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.rpcpb.GetCodeResp, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpcpb.GetCodeResp.displayName = 'proto.rpcpb.GetCodeResp'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpcpb.StorageReq = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.rpcpb.StorageReq, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpcpb.StorageReq.displayName = 'proto.rpcpb.StorageReq'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpcpb.StorageResp = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.rpcpb.StorageResp, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpcpb.StorageResp.displayName = 'proto.rpcpb.StorageResp'
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.rpcpb.RegisterReq.oneofGroups_ = [
  [3]
]

/**
 * @enum {number}
 */
proto.rpcpb.RegisterReq.InfoCase = {
  INFO_NOT_SET: 0,
  LOGS_REQ: 3
}

/**
 * @return {proto.rpcpb.RegisterReq.InfoCase}
 */
proto.rpcpb.RegisterReq.prototype.getInfoCase = function () {
  return /** @type {proto.rpcpb.RegisterReq.InfoCase} */ (jspb.Message.computeOneofCase(this, proto.rpcpb.RegisterReq.oneofGroups_[0]))
}



if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.rpcpb.RegisterReq.prototype.toObject = function (opt_includeInstance) {
    return proto.rpcpb.RegisterReq.toObject(opt_includeInstance, this)
  }


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.rpcpb.RegisterReq} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.rpcpb.RegisterReq.toObject = function (includeInstance, msg) {
    var f, obj = {
      type: jspb.Message.getFieldWithDefault(msg, 1, 0),
      cancel: jspb.Message.getFieldWithDefault(msg, 2, false),
      logsReq: (f = msg.getLogsReq()) && proto.rpcpb.LogsReq.toObject(includeInstance, f)
    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpcpb.RegisterReq}
 */
proto.rpcpb.RegisterReq.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.rpcpb.RegisterReq
  return proto.rpcpb.RegisterReq.deserializeBinaryFromReader(msg, reader)
}


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpcpb.RegisterReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpcpb.RegisterReq}
 */
proto.rpcpb.RegisterReq.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readUint32())
        msg.setType(value)
        break
      case 2:
        var value = /** @type {boolean} */ (reader.readBool())
        msg.setCancel(value)
        break
      case 3:
        var value = new proto.rpcpb.LogsReq
        reader.readMessage(value, proto.rpcpb.LogsReq.deserializeBinaryFromReader)
        msg.setLogsReq(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpcpb.RegisterReq.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.rpcpb.RegisterReq.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpcpb.RegisterReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpcpb.RegisterReq.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getType()
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    )
  }
  f = message.getCancel()
  if (f) {
    writer.writeBool(
      2,
      f
    )
  }
  f = message.getLogsReq()
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.rpcpb.LogsReq.serializeBinaryToWriter
    )
  }
}


/**
 * optional uint32 type = 1;
 * @return {number}
 */
proto.rpcpb.RegisterReq.prototype.getType = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0))
}


/** @param {number} value */
proto.rpcpb.RegisterReq.prototype.setType = function (value) {
  jspb.Message.setProto3IntField(this, 1, value)
}


/**
 * optional bool cancel = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.rpcpb.RegisterReq.prototype.getCancel = function () {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false))
}


/** @param {boolean} value */
proto.rpcpb.RegisterReq.prototype.setCancel = function (value) {
  jspb.Message.setProto3BooleanField(this, 2, value)
}


/**
 * optional LogsReq logs_req = 3;
 * @return {?proto.rpcpb.LogsReq}
 */
proto.rpcpb.RegisterReq.prototype.getLogsReq = function () {
  return /** @type{?proto.rpcpb.LogsReq} */ (
    jspb.Message.getWrapperField(this, proto.rpcpb.LogsReq, 3))
}


/** @param {?proto.rpcpb.LogsReq|undefined} value */
proto.rpcpb.RegisterReq.prototype.setLogsReq = function (value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.rpcpb.RegisterReq.oneofGroups_[0], value)
}


/**
 * Clears the message field making it undefined.
 */
proto.rpcpb.RegisterReq.prototype.clearLogsReq = function () {
  this.setLogsReq(undefined)
}


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rpcpb.RegisterReq.prototype.hasLogsReq = function () {
  return jspb.Message.getField(this, 3) != null
}



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.rpcpb.ListenedData.oneofGroups_ = [
  [2, 3, 4]
]

/**
 * @enum {number}
 */
proto.rpcpb.ListenedData.DataCase = {
  DATA_NOT_SET: 0,
  BLOCK: 2,
  LOGS: 3,
  INFO: 4
}

/**
 * @return {proto.rpcpb.ListenedData.DataCase}
 */
proto.rpcpb.ListenedData.prototype.getDataCase = function () {
  return /** @type {proto.rpcpb.ListenedData.DataCase} */ (jspb.Message.computeOneofCase(this, proto.rpcpb.ListenedData.oneofGroups_[0]))
}



if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.rpcpb.ListenedData.prototype.toObject = function (opt_includeInstance) {
    return proto.rpcpb.ListenedData.toObject(opt_includeInstance, this)
  }


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.rpcpb.ListenedData} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.rpcpb.ListenedData.toObject = function (includeInstance, msg) {
    var f, obj = {
      type: jspb.Message.getFieldWithDefault(msg, 1, 0),
      block: (f = msg.getBlock()) && proto.rpcpb.BlockDetail.toObject(includeInstance, f),
      logs: (f = msg.getLogs()) && proto.rpcpb.LogDetails.toObject(includeInstance, f),
      info: (f = msg.getInfo()) && proto.rpcpb.RegisterDetails.toObject(includeInstance, f)
    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpcpb.ListenedData}
 */
proto.rpcpb.ListenedData.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.rpcpb.ListenedData
  return proto.rpcpb.ListenedData.deserializeBinaryFromReader(msg, reader)
}


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpcpb.ListenedData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpcpb.ListenedData}
 */
proto.rpcpb.ListenedData.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readUint32())
        msg.setType(value)
        break
      case 2:
        var value = new proto.rpcpb.BlockDetail
        reader.readMessage(value, proto.rpcpb.BlockDetail.deserializeBinaryFromReader)
        msg.setBlock(value)
        break
      case 3:
        var value = new proto.rpcpb.LogDetails
        reader.readMessage(value, proto.rpcpb.LogDetails.deserializeBinaryFromReader)
        msg.setLogs(value)
        break
      case 4:
        var value = new proto.rpcpb.RegisterDetails
        reader.readMessage(value, proto.rpcpb.RegisterDetails.deserializeBinaryFromReader)
        msg.setInfo(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpcpb.ListenedData.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.rpcpb.ListenedData.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpcpb.ListenedData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpcpb.ListenedData.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getType()
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    )
  }
  f = message.getBlock()
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.rpcpb.BlockDetail.serializeBinaryToWriter
    )
  }
  f = message.getLogs()
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.rpcpb.LogDetails.serializeBinaryToWriter
    )
  }
  f = message.getInfo()
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.rpcpb.RegisterDetails.serializeBinaryToWriter
    )
  }
}


/**
 * optional uint32 type = 1;
 * @return {number}
 */
proto.rpcpb.ListenedData.prototype.getType = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0))
}


/** @param {number} value */
proto.rpcpb.ListenedData.prototype.setType = function (value) {
  jspb.Message.setProto3IntField(this, 1, value)
}


/**
 * optional BlockDetail block = 2;
 * @return {?proto.rpcpb.BlockDetail}
 */
proto.rpcpb.ListenedData.prototype.getBlock = function () {
  return /** @type{?proto.rpcpb.BlockDetail} */ (
    jspb.Message.getWrapperField(this, proto.rpcpb.BlockDetail, 2))
}


/** @param {?proto.rpcpb.BlockDetail|undefined} value */
proto.rpcpb.ListenedData.prototype.setBlock = function (value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.rpcpb.ListenedData.oneofGroups_[0], value)
}


/**
 * Clears the message field making it undefined.
 */
proto.rpcpb.ListenedData.prototype.clearBlock = function () {
  this.setBlock(undefined)
}


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rpcpb.ListenedData.prototype.hasBlock = function () {
  return jspb.Message.getField(this, 2) != null
}


/**
 * optional LogDetails logs = 3;
 * @return {?proto.rpcpb.LogDetails}
 */
proto.rpcpb.ListenedData.prototype.getLogs = function () {
  return /** @type{?proto.rpcpb.LogDetails} */ (
    jspb.Message.getWrapperField(this, proto.rpcpb.LogDetails, 3))
}


/** @param {?proto.rpcpb.LogDetails|undefined} value */
proto.rpcpb.ListenedData.prototype.setLogs = function (value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.rpcpb.ListenedData.oneofGroups_[0], value)
}


/**
 * Clears the message field making it undefined.
 */
proto.rpcpb.ListenedData.prototype.clearLogs = function () {
  this.setLogs(undefined)
}


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rpcpb.ListenedData.prototype.hasLogs = function () {
  return jspb.Message.getField(this, 3) != null
}


/**
 * optional RegisterDetails info = 4;
 * @return {?proto.rpcpb.RegisterDetails}
 */
proto.rpcpb.ListenedData.prototype.getInfo = function () {
  return /** @type{?proto.rpcpb.RegisterDetails} */ (
    jspb.Message.getWrapperField(this, proto.rpcpb.RegisterDetails, 4))
}


/** @param {?proto.rpcpb.RegisterDetails|undefined} value */
proto.rpcpb.ListenedData.prototype.setInfo = function (value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.rpcpb.ListenedData.oneofGroups_[0], value)
}


/**
 * Clears the message field making it undefined.
 */
proto.rpcpb.ListenedData.prototype.clearInfo = function () {
  this.setInfo(undefined)
}


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rpcpb.ListenedData.prototype.hasInfo = function () {
  return jspb.Message.getField(this, 4) != null
}





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.rpcpb.RegisterDetails.prototype.toObject = function (opt_includeInstance) {
    return proto.rpcpb.RegisterDetails.toObject(opt_includeInstance, this)
  }


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.rpcpb.RegisterDetails} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.rpcpb.RegisterDetails.toObject = function (includeInstance, msg) {
    var f, obj = {
      uid: jspb.Message.getFieldWithDefault(msg, 1, "")
    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpcpb.RegisterDetails}
 */
proto.rpcpb.RegisterDetails.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.rpcpb.RegisterDetails
  return proto.rpcpb.RegisterDetails.deserializeBinaryFromReader(msg, reader)
}


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpcpb.RegisterDetails} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpcpb.RegisterDetails}
 */
proto.rpcpb.RegisterDetails.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString())
        msg.setUid(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpcpb.RegisterDetails.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.rpcpb.RegisterDetails.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpcpb.RegisterDetails} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpcpb.RegisterDetails.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getUid()
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    )
  }
}


/**
 * optional string uid = 1;
 * @return {string}
 */
proto.rpcpb.RegisterDetails.prototype.getUid = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""))
}


/** @param {string} value */
proto.rpcpb.RegisterDetails.prototype.setUid = function (value) {
  jspb.Message.setProto3StringField(this, 1, value)
}





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.rpcpb.ViewTxDetailReq.prototype.toObject = function (opt_includeInstance) {
    return proto.rpcpb.ViewTxDetailReq.toObject(opt_includeInstance, this)
  }


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.rpcpb.ViewTxDetailReq} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.rpcpb.ViewTxDetailReq.toObject = function (includeInstance, msg) {
    var f, obj = {
      hash: jspb.Message.getFieldWithDefault(msg, 1, ""),
      spreadSplit: jspb.Message.getFieldWithDefault(msg, 2, false)
    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpcpb.ViewTxDetailReq}
 */
proto.rpcpb.ViewTxDetailReq.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.rpcpb.ViewTxDetailReq
  return proto.rpcpb.ViewTxDetailReq.deserializeBinaryFromReader(msg, reader)
}


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpcpb.ViewTxDetailReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpcpb.ViewTxDetailReq}
 */
proto.rpcpb.ViewTxDetailReq.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString())
        msg.setHash(value)
        break
      case 2:
        var value = /** @type {boolean} */ (reader.readBool())
        msg.setSpreadSplit(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpcpb.ViewTxDetailReq.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.rpcpb.ViewTxDetailReq.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpcpb.ViewTxDetailReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpcpb.ViewTxDetailReq.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getHash()
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    )
  }
  f = message.getSpreadSplit()
  if (f) {
    writer.writeBool(
      2,
      f
    )
  }
}


/**
 * optional string hash = 1;
 * @return {string}
 */
proto.rpcpb.ViewTxDetailReq.prototype.getHash = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""))
}


/** @param {string} value */
proto.rpcpb.ViewTxDetailReq.prototype.setHash = function (value) {
  jspb.Message.setProto3StringField(this, 1, value)
}


/**
 * optional bool spread_split = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.rpcpb.ViewTxDetailReq.prototype.getSpreadSplit = function () {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false))
}


/** @param {boolean} value */
proto.rpcpb.ViewTxDetailReq.prototype.setSpreadSplit = function (value) {
  jspb.Message.setProto3BooleanField(this, 2, value)
}





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.rpcpb.ViewTxDetailResp.prototype.toObject = function (opt_includeInstance) {
    return proto.rpcpb.ViewTxDetailResp.toObject(opt_includeInstance, this)
  }


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.rpcpb.ViewTxDetailResp} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.rpcpb.ViewTxDetailResp.toObject = function (includeInstance, msg) {
    var f, obj = {
      code: jspb.Message.getFieldWithDefault(msg, 1, 0),
      message: jspb.Message.getFieldWithDefault(msg, 2, ""),
      version: jspb.Message.getFieldWithDefault(msg, 3, 0),
      blockTime: jspb.Message.getFieldWithDefault(msg, 4, 0),
      blockHeight: jspb.Message.getFieldWithDefault(msg, 5, 0),
      status: jspb.Message.getFieldWithDefault(msg, 6, 0),
      detail: (f = msg.getDetail()) && proto.rpcpb.TxDetail.toObject(includeInstance, f)
    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpcpb.ViewTxDetailResp}
 */
proto.rpcpb.ViewTxDetailResp.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.rpcpb.ViewTxDetailResp
  return proto.rpcpb.ViewTxDetailResp.deserializeBinaryFromReader(msg, reader)
}


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpcpb.ViewTxDetailResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpcpb.ViewTxDetailResp}
 */
proto.rpcpb.ViewTxDetailResp.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readInt32())
        msg.setCode(value)
        break
      case 2:
        var value = /** @type {string} */ (reader.readString())
        msg.setMessage(value)
        break
      case 3:
        var value = /** @type {number} */ (reader.readInt32())
        msg.setVersion(value)
        break
      case 4:
        var value = /** @type {number} */ (reader.readInt64())
        msg.setBlockTime(value)
        break
      case 5:
        var value = /** @type {number} */ (reader.readUint32())
        msg.setBlockHeight(value)
        break
      case 6:
        var value = /** @type {!proto.rpcpb.TxStatus} */ (reader.readEnum())
        msg.setStatus(value)
        break
      case 7:
        var value = new proto.rpcpb.TxDetail
        reader.readMessage(value, proto.rpcpb.TxDetail.deserializeBinaryFromReader)
        msg.setDetail(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpcpb.ViewTxDetailResp.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.rpcpb.ViewTxDetailResp.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpcpb.ViewTxDetailResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpcpb.ViewTxDetailResp.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getCode()
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    )
  }
  f = message.getMessage()
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    )
  }
  f = message.getVersion()
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    )
  }
  f = message.getBlockTime()
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    )
  }
  f = message.getBlockHeight()
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    )
  }
  f = message.getStatus()
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    )
  }
  f = message.getDetail()
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.rpcpb.TxDetail.serializeBinaryToWriter
    )
  }
}


/**
 * optional int32 code = 1;
 * @return {number}
 */
proto.rpcpb.ViewTxDetailResp.prototype.getCode = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0))
}


/** @param {number} value */
proto.rpcpb.ViewTxDetailResp.prototype.setCode = function (value) {
  jspb.Message.setProto3IntField(this, 1, value)
}


/**
 * optional string message = 2;
 * @return {string}
 */
proto.rpcpb.ViewTxDetailResp.prototype.getMessage = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""))
}


/** @param {string} value */
proto.rpcpb.ViewTxDetailResp.prototype.setMessage = function (value) {
  jspb.Message.setProto3StringField(this, 2, value)
}


/**
 * optional int32 version = 3;
 * @return {number}
 */
proto.rpcpb.ViewTxDetailResp.prototype.getVersion = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0))
}


/** @param {number} value */
proto.rpcpb.ViewTxDetailResp.prototype.setVersion = function (value) {
  jspb.Message.setProto3IntField(this, 3, value)
}


/**
 * optional int64 block_time = 4;
 * @return {number}
 */
proto.rpcpb.ViewTxDetailResp.prototype.getBlockTime = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0))
}


/** @param {number} value */
proto.rpcpb.ViewTxDetailResp.prototype.setBlockTime = function (value) {
  jspb.Message.setProto3IntField(this, 4, value)
}


/**
 * optional uint32 block_height = 5;
 * @return {number}
 */
proto.rpcpb.ViewTxDetailResp.prototype.getBlockHeight = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0))
}


/** @param {number} value */
proto.rpcpb.ViewTxDetailResp.prototype.setBlockHeight = function (value) {
  jspb.Message.setProto3IntField(this, 5, value)
}


/**
 * optional TxStatus status = 6;
 * @return {!proto.rpcpb.TxStatus}
 */
proto.rpcpb.ViewTxDetailResp.prototype.getStatus = function () {
  return /** @type {!proto.rpcpb.TxStatus} */ (jspb.Message.getFieldWithDefault(this, 6, 0))
}


/** @param {!proto.rpcpb.TxStatus} value */
proto.rpcpb.ViewTxDetailResp.prototype.setStatus = function (value) {
  jspb.Message.setProto3EnumField(this, 6, value)
}


/**
 * optional TxDetail detail = 7;
 * @return {?proto.rpcpb.TxDetail}
 */
proto.rpcpb.ViewTxDetailResp.prototype.getDetail = function () {
  return /** @type{?proto.rpcpb.TxDetail} */ (
    jspb.Message.getWrapperField(this, proto.rpcpb.TxDetail, 7))
}


/** @param {?proto.rpcpb.TxDetail|undefined} value */
proto.rpcpb.ViewTxDetailResp.prototype.setDetail = function (value) {
  jspb.Message.setWrapperField(this, 7, value)
}


/**
 * Clears the message field making it undefined.
 */
proto.rpcpb.ViewTxDetailResp.prototype.clearDetail = function () {
  this.setDetail(undefined)
}


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rpcpb.ViewTxDetailResp.prototype.hasDetail = function () {
  return jspb.Message.getField(this, 7) != null
}





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.rpcpb.ViewBlockDetailReq.prototype.toObject = function (opt_includeInstance) {
    return proto.rpcpb.ViewBlockDetailReq.toObject(opt_includeInstance, this)
  }


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.rpcpb.ViewBlockDetailReq} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.rpcpb.ViewBlockDetailReq.toObject = function (includeInstance, msg) {
    var f, obj = {
      hash: jspb.Message.getFieldWithDefault(msg, 1, ""),
      height: jspb.Message.getFieldWithDefault(msg, 2, 0)
    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpcpb.ViewBlockDetailReq}
 */
proto.rpcpb.ViewBlockDetailReq.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.rpcpb.ViewBlockDetailReq
  return proto.rpcpb.ViewBlockDetailReq.deserializeBinaryFromReader(msg, reader)
}


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpcpb.ViewBlockDetailReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpcpb.ViewBlockDetailReq}
 */
proto.rpcpb.ViewBlockDetailReq.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString())
        msg.setHash(value)
        break
      case 2:
        var value = /** @type {number} */ (reader.readUint32())
        msg.setHeight(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpcpb.ViewBlockDetailReq.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.rpcpb.ViewBlockDetailReq.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpcpb.ViewBlockDetailReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpcpb.ViewBlockDetailReq.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getHash()
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    )
  }
  f = message.getHeight()
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    )
  }
}


/**
 * optional string hash = 1;
 * @return {string}
 */
proto.rpcpb.ViewBlockDetailReq.prototype.getHash = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""))
}


/** @param {string} value */
proto.rpcpb.ViewBlockDetailReq.prototype.setHash = function (value) {
  jspb.Message.setProto3StringField(this, 1, value)
}


/**
 * optional uint32 height = 2;
 * @return {number}
 */
proto.rpcpb.ViewBlockDetailReq.prototype.getHeight = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0))
}


/** @param {number} value */
proto.rpcpb.ViewBlockDetailReq.prototype.setHeight = function (value) {
  jspb.Message.setProto3IntField(this, 2, value)
}





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.rpcpb.ViewBlockDetailResp.prototype.toObject = function (opt_includeInstance) {
    return proto.rpcpb.ViewBlockDetailResp.toObject(opt_includeInstance, this)
  }


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.rpcpb.ViewBlockDetailResp} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.rpcpb.ViewBlockDetailResp.toObject = function (includeInstance, msg) {
    var f, obj = {
      code: jspb.Message.getFieldWithDefault(msg, 1, 0),
      message: jspb.Message.getFieldWithDefault(msg, 2, ""),
      detail: (f = msg.getDetail()) && proto.rpcpb.BlockDetail.toObject(includeInstance, f)
    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpcpb.ViewBlockDetailResp}
 */
proto.rpcpb.ViewBlockDetailResp.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.rpcpb.ViewBlockDetailResp
  return proto.rpcpb.ViewBlockDetailResp.deserializeBinaryFromReader(msg, reader)
}


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpcpb.ViewBlockDetailResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpcpb.ViewBlockDetailResp}
 */
proto.rpcpb.ViewBlockDetailResp.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readInt32())
        msg.setCode(value)
        break
      case 2:
        var value = /** @type {string} */ (reader.readString())
        msg.setMessage(value)
        break
      case 3:
        var value = new proto.rpcpb.BlockDetail
        reader.readMessage(value, proto.rpcpb.BlockDetail.deserializeBinaryFromReader)
        msg.setDetail(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpcpb.ViewBlockDetailResp.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.rpcpb.ViewBlockDetailResp.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpcpb.ViewBlockDetailResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpcpb.ViewBlockDetailResp.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getCode()
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    )
  }
  f = message.getMessage()
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    )
  }
  f = message.getDetail()
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.rpcpb.BlockDetail.serializeBinaryToWriter
    )
  }
}


/**
 * optional int32 code = 1;
 * @return {number}
 */
proto.rpcpb.ViewBlockDetailResp.prototype.getCode = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0))
}


/** @param {number} value */
proto.rpcpb.ViewBlockDetailResp.prototype.setCode = function (value) {
  jspb.Message.setProto3IntField(this, 1, value)
}


/**
 * optional string message = 2;
 * @return {string}
 */
proto.rpcpb.ViewBlockDetailResp.prototype.getMessage = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""))
}


/** @param {string} value */
proto.rpcpb.ViewBlockDetailResp.prototype.setMessage = function (value) {
  jspb.Message.setProto3StringField(this, 2, value)
}


/**
 * optional BlockDetail detail = 3;
 * @return {?proto.rpcpb.BlockDetail}
 */
proto.rpcpb.ViewBlockDetailResp.prototype.getDetail = function () {
  return /** @type{?proto.rpcpb.BlockDetail} */ (
    jspb.Message.getWrapperField(this, proto.rpcpb.BlockDetail, 3))
}


/** @param {?proto.rpcpb.BlockDetail|undefined} value */
proto.rpcpb.ViewBlockDetailResp.prototype.setDetail = function (value) {
  jspb.Message.setWrapperField(this, 3, value)
}


/**
 * Clears the message field making it undefined.
 */
proto.rpcpb.ViewBlockDetailResp.prototype.clearDetail = function () {
  this.setDetail(undefined)
}


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rpcpb.ViewBlockDetailResp.prototype.hasDetail = function () {
  return jspb.Message.getField(this, 3) != null
}



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rpcpb.ContractInfo.repeatedFields_ = [7, 8]



if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.rpcpb.ContractInfo.prototype.toObject = function (opt_includeInstance) {
    return proto.rpcpb.ContractInfo.toObject(opt_includeInstance, this)
  }


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.rpcpb.ContractInfo} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.rpcpb.ContractInfo.toObject = function (includeInstance, msg) {
    var f, obj = {
      failed: jspb.Message.getFieldWithDefault(msg, 2, false),
      gasLimit: jspb.Message.getFieldWithDefault(msg, 3, 0),
      gasUsed: jspb.Message.getFieldWithDefault(msg, 4, 0),
      nonce: jspb.Message.getFieldWithDefault(msg, 5, 0),
      data: jspb.Message.getFieldWithDefault(msg, 6, ""),
      internalTxsList: jspb.Message.getRepeatedField(msg, 7),
      logsList: jspb.Message.toObjectList(msg.getLogsList(),
        proto.rpcpb.LogDetail.toObject, includeInstance),
      errMsg: jspb.Message.getFieldWithDefault(msg, 9, "")
    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpcpb.ContractInfo}
 */
proto.rpcpb.ContractInfo.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.rpcpb.ContractInfo
  return proto.rpcpb.ContractInfo.deserializeBinaryFromReader(msg, reader)
}


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpcpb.ContractInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpcpb.ContractInfo}
 */
proto.rpcpb.ContractInfo.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 2:
        var value = /** @type {boolean} */ (reader.readBool())
        msg.setFailed(value)
        break
      case 3:
        var value = /** @type {number} */ (reader.readUint64())
        msg.setGasLimit(value)
        break
      case 4:
        var value = /** @type {number} */ (reader.readUint64())
        msg.setGasUsed(value)
        break
      case 5:
        var value = /** @type {number} */ (reader.readUint64())
        msg.setNonce(value)
        break
      case 6:
        var value = /** @type {string} */ (reader.readString())
        msg.setData(value)
        break
      case 7:
        var value = /** @type {string} */ (reader.readString())
        msg.addInternalTxs(value)
        break
      case 8:
        var value = new proto.rpcpb.LogDetail
        reader.readMessage(value, proto.rpcpb.LogDetail.deserializeBinaryFromReader)
        msg.addLogs(value)
        break
      case 9:
        var value = /** @type {string} */ (reader.readString())
        msg.setErrMsg(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpcpb.ContractInfo.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.rpcpb.ContractInfo.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpcpb.ContractInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpcpb.ContractInfo.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getFailed()
  if (f) {
    writer.writeBool(
      2,
      f
    )
  }
  f = message.getGasLimit()
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    )
  }
  f = message.getGasUsed()
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    )
  }
  f = message.getNonce()
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    )
  }
  f = message.getData()
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    )
  }
  f = message.getInternalTxsList()
  if (f.length > 0) {
    writer.writeRepeatedString(
      7,
      f
    )
  }
  f = message.getLogsList()
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.rpcpb.LogDetail.serializeBinaryToWriter
    )
  }
  f = message.getErrMsg()
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    )
  }
}


/**
 * optional bool failed = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.rpcpb.ContractInfo.prototype.getFailed = function () {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false))
}


/** @param {boolean} value */
proto.rpcpb.ContractInfo.prototype.setFailed = function (value) {
  jspb.Message.setProto3BooleanField(this, 2, value)
}


/**
 * optional uint64 gas_limit = 3;
 * @return {number}
 */
proto.rpcpb.ContractInfo.prototype.getGasLimit = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0))
}


/** @param {number} value */
proto.rpcpb.ContractInfo.prototype.setGasLimit = function (value) {
  jspb.Message.setProto3IntField(this, 3, value)
}


/**
 * optional uint64 gas_used = 4;
 * @return {number}
 */
proto.rpcpb.ContractInfo.prototype.getGasUsed = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0))
}


/** @param {number} value */
proto.rpcpb.ContractInfo.prototype.setGasUsed = function (value) {
  jspb.Message.setProto3IntField(this, 4, value)
}


/**
 * optional uint64 nonce = 5;
 * @return {number}
 */
proto.rpcpb.ContractInfo.prototype.getNonce = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0))
}


/** @param {number} value */
proto.rpcpb.ContractInfo.prototype.setNonce = function (value) {
  jspb.Message.setProto3IntField(this, 5, value)
}


/**
 * optional string data = 6;
 * @return {string}
 */
proto.rpcpb.ContractInfo.prototype.getData = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""))
}


/** @param {string} value */
proto.rpcpb.ContractInfo.prototype.setData = function (value) {
  jspb.Message.setProto3StringField(this, 6, value)
}


/**
 * repeated string internal_txs = 7;
 * @return {!Array<string>}
 */
proto.rpcpb.ContractInfo.prototype.getInternalTxsList = function () {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 7))
}


/** @param {!Array<string>} value */
proto.rpcpb.ContractInfo.prototype.setInternalTxsList = function (value) {
  jspb.Message.setField(this, 7, value || [])
}


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.rpcpb.ContractInfo.prototype.addInternalTxs = function (value, opt_index) {
  jspb.Message.addToRepeatedField(this, 7, value, opt_index)
}


/**
 * Clears the list making it empty but non-null.
 */
proto.rpcpb.ContractInfo.prototype.clearInternalTxsList = function () {
  this.setInternalTxsList([])
}


/**
 * repeated LogDetail logs = 8;
 * @return {!Array<!proto.rpcpb.LogDetail>}
 */
proto.rpcpb.ContractInfo.prototype.getLogsList = function () {
  return /** @type{!Array<!proto.rpcpb.LogDetail>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rpcpb.LogDetail, 8))
}


/** @param {!Array<!proto.rpcpb.LogDetail>} value */
proto.rpcpb.ContractInfo.prototype.setLogsList = function (value) {
  jspb.Message.setRepeatedWrapperField(this, 8, value)
}


/**
 * @param {!proto.rpcpb.LogDetail=} opt_value
 * @param {number=} opt_index
 * @return {!proto.rpcpb.LogDetail}
 */
proto.rpcpb.ContractInfo.prototype.addLogs = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.rpcpb.LogDetail, opt_index)
}


/**
 * Clears the list making it empty but non-null.
 */
proto.rpcpb.ContractInfo.prototype.clearLogsList = function () {
  this.setLogsList([])
}


/**
 * optional string err_msg = 9;
 * @return {string}
 */
proto.rpcpb.ContractInfo.prototype.getErrMsg = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""))
}


/** @param {string} value */
proto.rpcpb.ContractInfo.prototype.setErrMsg = function (value) {
  jspb.Message.setProto3StringField(this, 9, value)
}





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.rpcpb.ListenBlocksReq.prototype.toObject = function (opt_includeInstance) {
    return proto.rpcpb.ListenBlocksReq.toObject(opt_includeInstance, this)
  }


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.rpcpb.ListenBlocksReq} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.rpcpb.ListenBlocksReq.toObject = function (includeInstance, msg) {
    var f, obj = {

    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpcpb.ListenBlocksReq}
 */
proto.rpcpb.ListenBlocksReq.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.rpcpb.ListenBlocksReq
  return proto.rpcpb.ListenBlocksReq.deserializeBinaryFromReader(msg, reader)
}


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpcpb.ListenBlocksReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpcpb.ListenBlocksReq}
 */
proto.rpcpb.ListenBlocksReq.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      default:
        reader.skipField()
        break
    }
  }
  return msg
}


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpcpb.ListenBlocksReq.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.rpcpb.ListenBlocksReq.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpcpb.ListenBlocksReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpcpb.ListenBlocksReq.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
}



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rpcpb.LogsReq.repeatedFields_ = [5, 6]



if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.rpcpb.LogsReq.prototype.toObject = function (opt_includeInstance) {
    return proto.rpcpb.LogsReq.toObject(opt_includeInstance, this)
  }


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.rpcpb.LogsReq} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.rpcpb.LogsReq.toObject = function (includeInstance, msg) {
    var f, obj = {
      uid: jspb.Message.getFieldWithDefault(msg, 1, ""),
      hash: jspb.Message.getFieldWithDefault(msg, 2, ""),
      from: jspb.Message.getFieldWithDefault(msg, 3, 0),
      to: jspb.Message.getFieldWithDefault(msg, 4, 0),
      addressesList: jspb.Message.getRepeatedField(msg, 5),
      topicsList: jspb.Message.toObjectList(msg.getTopicsList(),
        proto.rpcpb.LogsReq.topiclist.toObject, includeInstance)
    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpcpb.LogsReq}
 */
proto.rpcpb.LogsReq.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.rpcpb.LogsReq
  return proto.rpcpb.LogsReq.deserializeBinaryFromReader(msg, reader)
}


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpcpb.LogsReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpcpb.LogsReq}
 */
proto.rpcpb.LogsReq.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString())
        msg.setUid(value)
        break
      case 2:
        var value = /** @type {string} */ (reader.readString())
        msg.setHash(value)
        break
      case 3:
        var value = /** @type {number} */ (reader.readUint32())
        msg.setFrom(value)
        break
      case 4:
        var value = /** @type {number} */ (reader.readUint32())
        msg.setTo(value)
        break
      case 5:
        var value = /** @type {string} */ (reader.readString())
        msg.addAddresses(value)
        break
      case 6:
        var value = new proto.rpcpb.LogsReq.topiclist
        reader.readMessage(value, proto.rpcpb.LogsReq.topiclist.deserializeBinaryFromReader)
        msg.addTopics(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpcpb.LogsReq.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.rpcpb.LogsReq.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpcpb.LogsReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpcpb.LogsReq.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getUid()
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    )
  }
  f = message.getHash()
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    )
  }
  f = message.getFrom()
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    )
  }
  f = message.getTo()
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    )
  }
  f = message.getAddressesList()
  if (f.length > 0) {
    writer.writeRepeatedString(
      5,
      f
    )
  }
  f = message.getTopicsList()
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.rpcpb.LogsReq.topiclist.serializeBinaryToWriter
    )
  }
}



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rpcpb.LogsReq.topiclist.repeatedFields_ = [1]



if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.rpcpb.LogsReq.topiclist.prototype.toObject = function (opt_includeInstance) {
    return proto.rpcpb.LogsReq.topiclist.toObject(opt_includeInstance, this)
  }


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.rpcpb.LogsReq.topiclist} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.rpcpb.LogsReq.topiclist.toObject = function (includeInstance, msg) {
    var f, obj = {
      topicsList: jspb.Message.getRepeatedField(msg, 1)
    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpcpb.LogsReq.topiclist}
 */
proto.rpcpb.LogsReq.topiclist.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.rpcpb.LogsReq.topiclist
  return proto.rpcpb.LogsReq.topiclist.deserializeBinaryFromReader(msg, reader)
}


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpcpb.LogsReq.topiclist} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpcpb.LogsReq.topiclist}
 */
proto.rpcpb.LogsReq.topiclist.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString())
        msg.addTopics(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpcpb.LogsReq.topiclist.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.rpcpb.LogsReq.topiclist.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpcpb.LogsReq.topiclist} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpcpb.LogsReq.topiclist.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getTopicsList()
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    )
  }
}


/**
 * repeated string topics = 1;
 * @return {!Array<string>}
 */
proto.rpcpb.LogsReq.topiclist.prototype.getTopicsList = function () {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1))
}


/** @param {!Array<string>} value */
proto.rpcpb.LogsReq.topiclist.prototype.setTopicsList = function (value) {
  jspb.Message.setField(this, 1, value || [])
}


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.rpcpb.LogsReq.topiclist.prototype.addTopics = function (value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index)
}


/**
 * Clears the list making it empty but non-null.
 */
proto.rpcpb.LogsReq.topiclist.prototype.clearTopicsList = function () {
  this.setTopicsList([])
}


/**
 * optional string uid = 1;
 * @return {string}
 */
proto.rpcpb.LogsReq.prototype.getUid = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""))
}


/** @param {string} value */
proto.rpcpb.LogsReq.prototype.setUid = function (value) {
  jspb.Message.setProto3StringField(this, 1, value)
}


/**
 * optional string hash = 2;
 * @return {string}
 */
proto.rpcpb.LogsReq.prototype.getHash = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""))
}


/** @param {string} value */
proto.rpcpb.LogsReq.prototype.setHash = function (value) {
  jspb.Message.setProto3StringField(this, 2, value)
}


/**
 * optional uint32 from = 3;
 * @return {number}
 */
proto.rpcpb.LogsReq.prototype.getFrom = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0))
}


/** @param {number} value */
proto.rpcpb.LogsReq.prototype.setFrom = function (value) {
  jspb.Message.setProto3IntField(this, 3, value)
}


/**
 * optional uint32 to = 4;
 * @return {number}
 */
proto.rpcpb.LogsReq.prototype.getTo = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0))
}


/** @param {number} value */
proto.rpcpb.LogsReq.prototype.setTo = function (value) {
  jspb.Message.setProto3IntField(this, 4, value)
}


/**
 * repeated string addresses = 5;
 * @return {!Array<string>}
 */
proto.rpcpb.LogsReq.prototype.getAddressesList = function () {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 5))
}


/** @param {!Array<string>} value */
proto.rpcpb.LogsReq.prototype.setAddressesList = function (value) {
  jspb.Message.setField(this, 5, value || [])
}


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.rpcpb.LogsReq.prototype.addAddresses = function (value, opt_index) {
  jspb.Message.addToRepeatedField(this, 5, value, opt_index)
}


/**
 * Clears the list making it empty but non-null.
 */
proto.rpcpb.LogsReq.prototype.clearAddressesList = function () {
  this.setAddressesList([])
}


/**
 * repeated topiclist topics = 6;
 * @return {!Array<!proto.rpcpb.LogsReq.topiclist>}
 */
proto.rpcpb.LogsReq.prototype.getTopicsList = function () {
  return /** @type{!Array<!proto.rpcpb.LogsReq.topiclist>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rpcpb.LogsReq.topiclist, 6))
}


/** @param {!Array<!proto.rpcpb.LogsReq.topiclist>} value */
proto.rpcpb.LogsReq.prototype.setTopicsList = function (value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value)
}


/**
 * @param {!proto.rpcpb.LogsReq.topiclist=} opt_value
 * @param {number=} opt_index
 * @return {!proto.rpcpb.LogsReq.topiclist}
 */
proto.rpcpb.LogsReq.prototype.addTopics = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.rpcpb.LogsReq.topiclist, opt_index)
}


/**
 * Clears the list making it empty but non-null.
 */
proto.rpcpb.LogsReq.prototype.clearTopicsList = function () {
  this.setTopicsList([])
}



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rpcpb.Logs.repeatedFields_ = [3]



if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.rpcpb.Logs.prototype.toObject = function (opt_includeInstance) {
    return proto.rpcpb.Logs.toObject(opt_includeInstance, this)
  }


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.rpcpb.Logs} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.rpcpb.Logs.toObject = function (includeInstance, msg) {
    var f, obj = {
      code: jspb.Message.getFieldWithDefault(msg, 1, 0),
      message: jspb.Message.getFieldWithDefault(msg, 2, ""),
      logsList: jspb.Message.toObjectList(msg.getLogsList(),
        proto.rpcpb.LogDetail.toObject, includeInstance)
    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpcpb.Logs}
 */
proto.rpcpb.Logs.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.rpcpb.Logs
  return proto.rpcpb.Logs.deserializeBinaryFromReader(msg, reader)
}


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpcpb.Logs} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpcpb.Logs}
 */
proto.rpcpb.Logs.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readInt32())
        msg.setCode(value)
        break
      case 2:
        var value = /** @type {string} */ (reader.readString())
        msg.setMessage(value)
        break
      case 3:
        var value = new proto.rpcpb.LogDetail
        reader.readMessage(value, proto.rpcpb.LogDetail.deserializeBinaryFromReader)
        msg.addLogs(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpcpb.Logs.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.rpcpb.Logs.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpcpb.Logs} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpcpb.Logs.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getCode()
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    )
  }
  f = message.getMessage()
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    )
  }
  f = message.getLogsList()
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.rpcpb.LogDetail.serializeBinaryToWriter
    )
  }
}


/**
 * optional int32 code = 1;
 * @return {number}
 */
proto.rpcpb.Logs.prototype.getCode = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0))
}


/** @param {number} value */
proto.rpcpb.Logs.prototype.setCode = function (value) {
  jspb.Message.setProto3IntField(this, 1, value)
}


/**
 * optional string message = 2;
 * @return {string}
 */
proto.rpcpb.Logs.prototype.getMessage = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""))
}


/** @param {string} value */
proto.rpcpb.Logs.prototype.setMessage = function (value) {
  jspb.Message.setProto3StringField(this, 2, value)
}


/**
 * repeated LogDetail logs = 3;
 * @return {!Array<!proto.rpcpb.LogDetail>}
 */
proto.rpcpb.Logs.prototype.getLogsList = function () {
  return /** @type{!Array<!proto.rpcpb.LogDetail>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rpcpb.LogDetail, 3))
}


/** @param {!Array<!proto.rpcpb.LogDetail>} value */
proto.rpcpb.Logs.prototype.setLogsList = function (value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value)
}


/**
 * @param {!proto.rpcpb.LogDetail=} opt_value
 * @param {number=} opt_index
 * @return {!proto.rpcpb.LogDetail}
 */
proto.rpcpb.Logs.prototype.addLogs = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.rpcpb.LogDetail, opt_index)
}


/**
 * Clears the list making it empty but non-null.
 */
proto.rpcpb.Logs.prototype.clearLogsList = function () {
  this.setLogsList([])
}



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rpcpb.LogDetails.repeatedFields_ = [1]



if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.rpcpb.LogDetails.prototype.toObject = function (opt_includeInstance) {
    return proto.rpcpb.LogDetails.toObject(opt_includeInstance, this)
  }


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.rpcpb.LogDetails} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.rpcpb.LogDetails.toObject = function (includeInstance, msg) {
    var f, obj = {
      logsList: jspb.Message.toObjectList(msg.getLogsList(),
        proto.rpcpb.LogDetail.toObject, includeInstance)
    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpcpb.LogDetails}
 */
proto.rpcpb.LogDetails.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.rpcpb.LogDetails
  return proto.rpcpb.LogDetails.deserializeBinaryFromReader(msg, reader)
}


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpcpb.LogDetails} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpcpb.LogDetails}
 */
proto.rpcpb.LogDetails.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = new proto.rpcpb.LogDetail
        reader.readMessage(value, proto.rpcpb.LogDetail.deserializeBinaryFromReader)
        msg.addLogs(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpcpb.LogDetails.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.rpcpb.LogDetails.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpcpb.LogDetails} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpcpb.LogDetails.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getLogsList()
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.rpcpb.LogDetail.serializeBinaryToWriter
    )
  }
}


/**
 * repeated LogDetail logs = 1;
 * @return {!Array<!proto.rpcpb.LogDetail>}
 */
proto.rpcpb.LogDetails.prototype.getLogsList = function () {
  return /** @type{!Array<!proto.rpcpb.LogDetail>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rpcpb.LogDetail, 1))
}


/** @param {!Array<!proto.rpcpb.LogDetail>} value */
proto.rpcpb.LogDetails.prototype.setLogsList = function (value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value)
}


/**
 * @param {!proto.rpcpb.LogDetail=} opt_value
 * @param {number=} opt_index
 * @return {!proto.rpcpb.LogDetail}
 */
proto.rpcpb.LogDetails.prototype.addLogs = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.rpcpb.LogDetail, opt_index)
}


/**
 * Clears the list making it empty but non-null.
 */
proto.rpcpb.LogDetails.prototype.clearLogsList = function () {
  this.setLogsList([])
}



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rpcpb.LogDetail.repeatedFields_ = [2]



if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.rpcpb.LogDetail.prototype.toObject = function (opt_includeInstance) {
    return proto.rpcpb.LogDetail.toObject(opt_includeInstance, this)
  }


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.rpcpb.LogDetail} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.rpcpb.LogDetail.toObject = function (includeInstance, msg) {
    var f, obj = {
      address: jspb.Message.getFieldWithDefault(msg, 1, ""),
      topicsList: jspb.Message.getRepeatedField(msg, 2),
      data: jspb.Message.getFieldWithDefault(msg, 3, ""),
      blockNumber: jspb.Message.getFieldWithDefault(msg, 4, 0),
      txHash: jspb.Message.getFieldWithDefault(msg, 5, ""),
      txIndex: jspb.Message.getFieldWithDefault(msg, 6, 0),
      blockHash: jspb.Message.getFieldWithDefault(msg, 7, ""),
      index: jspb.Message.getFieldWithDefault(msg, 8, 0),
      removed: jspb.Message.getFieldWithDefault(msg, 9, false)
    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpcpb.LogDetail}
 */
proto.rpcpb.LogDetail.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.rpcpb.LogDetail
  return proto.rpcpb.LogDetail.deserializeBinaryFromReader(msg, reader)
}


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpcpb.LogDetail} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpcpb.LogDetail}
 */
proto.rpcpb.LogDetail.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString())
        msg.setAddress(value)
        break
      case 2:
        var value = /** @type {string} */ (reader.readString())
        msg.addTopics(value)
        break
      case 3:
        var value = /** @type {string} */ (reader.readString())
        msg.setData(value)
        break
      case 4:
        var value = /** @type {number} */ (reader.readUint64())
        msg.setBlockNumber(value)
        break
      case 5:
        var value = /** @type {string} */ (reader.readString())
        msg.setTxHash(value)
        break
      case 6:
        var value = /** @type {number} */ (reader.readUint32())
        msg.setTxIndex(value)
        break
      case 7:
        var value = /** @type {string} */ (reader.readString())
        msg.setBlockHash(value)
        break
      case 8:
        var value = /** @type {number} */ (reader.readUint32())
        msg.setIndex(value)
        break
      case 9:
        var value = /** @type {boolean} */ (reader.readBool())
        msg.setRemoved(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpcpb.LogDetail.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.rpcpb.LogDetail.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpcpb.LogDetail} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpcpb.LogDetail.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getAddress()
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    )
  }
  f = message.getTopicsList()
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    )
  }
  f = message.getData()
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    )
  }
  f = message.getBlockNumber()
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    )
  }
  f = message.getTxHash()
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    )
  }
  f = message.getTxIndex()
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    )
  }
  f = message.getBlockHash()
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    )
  }
  f = message.getIndex()
  if (f !== 0) {
    writer.writeUint32(
      8,
      f
    )
  }
  f = message.getRemoved()
  if (f) {
    writer.writeBool(
      9,
      f
    )
  }
}


/**
 * optional string address = 1;
 * @return {string}
 */
proto.rpcpb.LogDetail.prototype.getAddress = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""))
}


/** @param {string} value */
proto.rpcpb.LogDetail.prototype.setAddress = function (value) {
  jspb.Message.setProto3StringField(this, 1, value)
}


/**
 * repeated string topics = 2;
 * @return {!Array<string>}
 */
proto.rpcpb.LogDetail.prototype.getTopicsList = function () {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2))
}


/** @param {!Array<string>} value */
proto.rpcpb.LogDetail.prototype.setTopicsList = function (value) {
  jspb.Message.setField(this, 2, value || [])
}


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.rpcpb.LogDetail.prototype.addTopics = function (value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index)
}


/**
 * Clears the list making it empty but non-null.
 */
proto.rpcpb.LogDetail.prototype.clearTopicsList = function () {
  this.setTopicsList([])
}


/**
 * optional string data = 3;
 * @return {string}
 */
proto.rpcpb.LogDetail.prototype.getData = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""))
}


/** @param {string} value */
proto.rpcpb.LogDetail.prototype.setData = function (value) {
  jspb.Message.setProto3StringField(this, 3, value)
}


/**
 * optional uint64 block_number = 4;
 * @return {number}
 */
proto.rpcpb.LogDetail.prototype.getBlockNumber = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0))
}


/** @param {number} value */
proto.rpcpb.LogDetail.prototype.setBlockNumber = function (value) {
  jspb.Message.setProto3IntField(this, 4, value)
}


/**
 * optional string tx_hash = 5;
 * @return {string}
 */
proto.rpcpb.LogDetail.prototype.getTxHash = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""))
}


/** @param {string} value */
proto.rpcpb.LogDetail.prototype.setTxHash = function (value) {
  jspb.Message.setProto3StringField(this, 5, value)
}


/**
 * optional uint32 tx_index = 6;
 * @return {number}
 */
proto.rpcpb.LogDetail.prototype.getTxIndex = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0))
}


/** @param {number} value */
proto.rpcpb.LogDetail.prototype.setTxIndex = function (value) {
  jspb.Message.setProto3IntField(this, 6, value)
}


/**
 * optional string block_hash = 7;
 * @return {string}
 */
proto.rpcpb.LogDetail.prototype.getBlockHash = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""))
}


/** @param {string} value */
proto.rpcpb.LogDetail.prototype.setBlockHash = function (value) {
  jspb.Message.setProto3StringField(this, 7, value)
}


/**
 * optional uint32 index = 8;
 * @return {number}
 */
proto.rpcpb.LogDetail.prototype.getIndex = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0))
}


/** @param {number} value */
proto.rpcpb.LogDetail.prototype.setIndex = function (value) {
  jspb.Message.setProto3IntField(this, 8, value)
}


/**
 * optional bool removed = 9;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.rpcpb.LogDetail.prototype.getRemoved = function () {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 9, false))
}


/** @param {boolean} value */
proto.rpcpb.LogDetail.prototype.setRemoved = function (value) {
  jspb.Message.setProto3BooleanField(this, 9, value)
}



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rpcpb.TxDetail.repeatedFields_ = [4, 5]



if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.rpcpb.TxDetail.prototype.toObject = function (opt_includeInstance) {
    return proto.rpcpb.TxDetail.toObject(opt_includeInstance, this)
  }


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.rpcpb.TxDetail} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.rpcpb.TxDetail.toObject = function (includeInstance, msg) {
    var f, obj = {
      hash: jspb.Message.getFieldWithDefault(msg, 1, ""),
      fee: jspb.Message.getFieldWithDefault(msg, 2, 0),
      type: jspb.Message.getFieldWithDefault(msg, 3, 0),
      vinList: jspb.Message.toObjectList(msg.getVinList(),
        proto.rpcpb.TxInDetail.toObject, includeInstance),
      voutList: jspb.Message.toObjectList(msg.getVoutList(),
        proto.rpcpb.TxOutDetail.toObject, includeInstance)
    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpcpb.TxDetail}
 */
proto.rpcpb.TxDetail.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.rpcpb.TxDetail
  return proto.rpcpb.TxDetail.deserializeBinaryFromReader(msg, reader)
}


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpcpb.TxDetail} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpcpb.TxDetail}
 */
proto.rpcpb.TxDetail.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString())
        msg.setHash(value)
        break
      case 2:
        var value = /** @type {number} */ (reader.readUint64())
        msg.setFee(value)
        break
      case 3:
        var value = /** @type {!proto.rpcpb.TxDetail.TxType} */ (reader.readEnum())
        msg.setType(value)
        break
      case 4:
        var value = new proto.rpcpb.TxInDetail
        reader.readMessage(value, proto.rpcpb.TxInDetail.deserializeBinaryFromReader)
        msg.addVin(value)
        break
      case 5:
        var value = new proto.rpcpb.TxOutDetail
        reader.readMessage(value, proto.rpcpb.TxOutDetail.deserializeBinaryFromReader)
        msg.addVout(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpcpb.TxDetail.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.rpcpb.TxDetail.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpcpb.TxDetail} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpcpb.TxDetail.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getHash()
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    )
  }
  f = message.getFee()
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    )
  }
  f = message.getType()
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    )
  }
  f = message.getVinList()
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.rpcpb.TxInDetail.serializeBinaryToWriter
    )
  }
  f = message.getVoutList()
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.rpcpb.TxOutDetail.serializeBinaryToWriter
    )
  }
}


/**
 * @enum {number}
 */
proto.rpcpb.TxDetail.TxType = {
  UNKNOWN: 0,
  PAY_TO_PUBK: 1,
  CONTRACT: 2,
  TOKEN_ISSUE: 4,
  TOKEN_TRANSFER: 5,
  SPLIT_ADDR: 8
}

/**
 * optional string hash = 1;
 * @return {string}
 */
proto.rpcpb.TxDetail.prototype.getHash = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""))
}


/** @param {string} value */
proto.rpcpb.TxDetail.prototype.setHash = function (value) {
  jspb.Message.setProto3StringField(this, 1, value)
}


/**
 * optional uint64 fee = 2;
 * @return {number}
 */
proto.rpcpb.TxDetail.prototype.getFee = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0))
}


/** @param {number} value */
proto.rpcpb.TxDetail.prototype.setFee = function (value) {
  jspb.Message.setProto3IntField(this, 2, value)
}


/**
 * optional TxType type = 3;
 * @return {!proto.rpcpb.TxDetail.TxType}
 */
proto.rpcpb.TxDetail.prototype.getType = function () {
  return /** @type {!proto.rpcpb.TxDetail.TxType} */ (jspb.Message.getFieldWithDefault(this, 3, 0))
}


/** @param {!proto.rpcpb.TxDetail.TxType} value */
proto.rpcpb.TxDetail.prototype.setType = function (value) {
  jspb.Message.setProto3EnumField(this, 3, value)
}


/**
 * repeated TxInDetail vin = 4;
 * @return {!Array<!proto.rpcpb.TxInDetail>}
 */
proto.rpcpb.TxDetail.prototype.getVinList = function () {
  return /** @type{!Array<!proto.rpcpb.TxInDetail>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rpcpb.TxInDetail, 4))
}


/** @param {!Array<!proto.rpcpb.TxInDetail>} value */
proto.rpcpb.TxDetail.prototype.setVinList = function (value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value)
}


/**
 * @param {!proto.rpcpb.TxInDetail=} opt_value
 * @param {number=} opt_index
 * @return {!proto.rpcpb.TxInDetail}
 */
proto.rpcpb.TxDetail.prototype.addVin = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.rpcpb.TxInDetail, opt_index)
}


/**
 * Clears the list making it empty but non-null.
 */
proto.rpcpb.TxDetail.prototype.clearVinList = function () {
  this.setVinList([])
}


/**
 * repeated TxOutDetail vout = 5;
 * @return {!Array<!proto.rpcpb.TxOutDetail>}
 */
proto.rpcpb.TxDetail.prototype.getVoutList = function () {
  return /** @type{!Array<!proto.rpcpb.TxOutDetail>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rpcpb.TxOutDetail, 5))
}


/** @param {!Array<!proto.rpcpb.TxOutDetail>} value */
proto.rpcpb.TxDetail.prototype.setVoutList = function (value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value)
}


/**
 * @param {!proto.rpcpb.TxOutDetail=} opt_value
 * @param {number=} opt_index
 * @return {!proto.rpcpb.TxOutDetail}
 */
proto.rpcpb.TxDetail.prototype.addVout = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.rpcpb.TxOutDetail, opt_index)
}


/**
 * Clears the list making it empty but non-null.
 */
proto.rpcpb.TxDetail.prototype.clearVoutList = function () {
  this.setVoutList([])
}





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.rpcpb.TxInDetail.prototype.toObject = function (opt_includeInstance) {
    return proto.rpcpb.TxInDetail.toObject(opt_includeInstance, this)
  }


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.rpcpb.TxInDetail} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.rpcpb.TxInDetail.toObject = function (includeInstance, msg) {
    var f, obj = {
      prevOutDetail: (f = msg.getPrevOutDetail()) && proto.rpcpb.TxOutDetail.toObject(includeInstance, f),
      scriptSig: jspb.Message.getFieldWithDefault(msg, 2, ""),
      sequence: jspb.Message.getFieldWithDefault(msg, 3, 0),
      prevOutPoint: jspb.Message.getFieldWithDefault(msg, 4, "")
    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpcpb.TxInDetail}
 */
proto.rpcpb.TxInDetail.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.rpcpb.TxInDetail
  return proto.rpcpb.TxInDetail.deserializeBinaryFromReader(msg, reader)
}


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpcpb.TxInDetail} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpcpb.TxInDetail}
 */
proto.rpcpb.TxInDetail.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = new proto.rpcpb.TxOutDetail
        reader.readMessage(value, proto.rpcpb.TxOutDetail.deserializeBinaryFromReader)
        msg.setPrevOutDetail(value)
        break
      case 2:
        var value = /** @type {string} */ (reader.readString())
        msg.setScriptSig(value)
        break
      case 3:
        var value = /** @type {number} */ (reader.readUint32())
        msg.setSequence(value)
        break
      case 4:
        var value = /** @type {string} */ (reader.readString())
        msg.setPrevOutPoint(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpcpb.TxInDetail.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.rpcpb.TxInDetail.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpcpb.TxInDetail} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpcpb.TxInDetail.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getPrevOutDetail()
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rpcpb.TxOutDetail.serializeBinaryToWriter
    )
  }
  f = message.getScriptSig()
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    )
  }
  f = message.getSequence()
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    )
  }
  f = message.getPrevOutPoint()
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    )
  }
}


/**
 * optional TxOutDetail prev_out_detail = 1;
 * @return {?proto.rpcpb.TxOutDetail}
 */
proto.rpcpb.TxInDetail.prototype.getPrevOutDetail = function () {
  return /** @type{?proto.rpcpb.TxOutDetail} */ (
    jspb.Message.getWrapperField(this, proto.rpcpb.TxOutDetail, 1))
}


/** @param {?proto.rpcpb.TxOutDetail|undefined} value */
proto.rpcpb.TxInDetail.prototype.setPrevOutDetail = function (value) {
  jspb.Message.setWrapperField(this, 1, value)
}


/**
 * Clears the message field making it undefined.
 */
proto.rpcpb.TxInDetail.prototype.clearPrevOutDetail = function () {
  this.setPrevOutDetail(undefined)
}


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rpcpb.TxInDetail.prototype.hasPrevOutDetail = function () {
  return jspb.Message.getField(this, 1) != null
}


/**
 * optional string script_sig = 2;
 * @return {string}
 */
proto.rpcpb.TxInDetail.prototype.getScriptSig = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""))
}


/** @param {string} value */
proto.rpcpb.TxInDetail.prototype.setScriptSig = function (value) {
  jspb.Message.setProto3StringField(this, 2, value)
}


/**
 * optional uint32 sequence = 3;
 * @return {number}
 */
proto.rpcpb.TxInDetail.prototype.getSequence = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0))
}


/** @param {number} value */
proto.rpcpb.TxInDetail.prototype.setSequence = function (value) {
  jspb.Message.setProto3IntField(this, 3, value)
}


/**
 * optional string prev_out_point = 4;
 * @return {string}
 */
proto.rpcpb.TxInDetail.prototype.getPrevOutPoint = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""))
}


/** @param {string} value */
proto.rpcpb.TxInDetail.prototype.setPrevOutPoint = function (value) {
  jspb.Message.setProto3StringField(this, 4, value)
}



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.rpcpb.TxOutDetail.oneofGroups_ = [
  [5, 6, 7, 8]
]

/**
 * @enum {number}
 */
proto.rpcpb.TxOutDetail.AppendixCase = {
  APPENDIX_NOT_SET: 0,
  TOKEN_ISSUE_INFO: 5,
  TOKEN_TRANSFER_INFO: 6,
  SPLIT_CONTRACT_INFO: 7,
  CONTRACT_INFO: 8
}

/**
 * @return {proto.rpcpb.TxOutDetail.AppendixCase}
 */
proto.rpcpb.TxOutDetail.prototype.getAppendixCase = function () {
  return /** @type {proto.rpcpb.TxOutDetail.AppendixCase} */ (jspb.Message.computeOneofCase(this, proto.rpcpb.TxOutDetail.oneofGroups_[0]))
}



if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.rpcpb.TxOutDetail.prototype.toObject = function (opt_includeInstance) {
    return proto.rpcpb.TxOutDetail.toObject(opt_includeInstance, this)
  }


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.rpcpb.TxOutDetail} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.rpcpb.TxOutDetail.toObject = function (includeInstance, msg) {
    var f, obj = {
      addr: jspb.Message.getFieldWithDefault(msg, 1, ""),
      value: jspb.Message.getFieldWithDefault(msg, 2, 0),
      scriptDisasm: jspb.Message.getFieldWithDefault(msg, 3, ""),
      type: jspb.Message.getFieldWithDefault(msg, 4, 0),
      tokenIssueInfo: (f = msg.getTokenIssueInfo()) && proto.rpcpb.TokenIssueInfo.toObject(includeInstance, f),
      tokenTransferInfo: (f = msg.getTokenTransferInfo()) && proto.rpcpb.TokenTransferInfo.toObject(includeInstance, f),
      splitContractInfo: (f = msg.getSplitContractInfo()) && proto.rpcpb.SplitContractInfo.toObject(includeInstance, f),
      contractInfo: (f = msg.getContractInfo()) && proto.rpcpb.ContractInfo.toObject(includeInstance, f)
    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpcpb.TxOutDetail}
 */
proto.rpcpb.TxOutDetail.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.rpcpb.TxOutDetail
  return proto.rpcpb.TxOutDetail.deserializeBinaryFromReader(msg, reader)
}


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpcpb.TxOutDetail} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpcpb.TxOutDetail}
 */
proto.rpcpb.TxOutDetail.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString())
        msg.setAddr(value)
        break
      case 2:
        var value = /** @type {number} */ (reader.readUint64())
        msg.setValue(value)
        break
      case 3:
        var value = /** @type {string} */ (reader.readString())
        msg.setScriptDisasm(value)
        break
      case 4:
        var value = /** @type {!proto.rpcpb.TxOutDetail.TxOutType} */ (reader.readEnum())
        msg.setType(value)
        break
      case 5:
        var value = new proto.rpcpb.TokenIssueInfo
        reader.readMessage(value, proto.rpcpb.TokenIssueInfo.deserializeBinaryFromReader)
        msg.setTokenIssueInfo(value)
        break
      case 6:
        var value = new proto.rpcpb.TokenTransferInfo
        reader.readMessage(value, proto.rpcpb.TokenTransferInfo.deserializeBinaryFromReader)
        msg.setTokenTransferInfo(value)
        break
      case 7:
        var value = new proto.rpcpb.SplitContractInfo
        reader.readMessage(value, proto.rpcpb.SplitContractInfo.deserializeBinaryFromReader)
        msg.setSplitContractInfo(value)
        break
      case 8:
        var value = new proto.rpcpb.ContractInfo
        reader.readMessage(value, proto.rpcpb.ContractInfo.deserializeBinaryFromReader)
        msg.setContractInfo(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpcpb.TxOutDetail.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.rpcpb.TxOutDetail.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpcpb.TxOutDetail} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpcpb.TxOutDetail.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getAddr()
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    )
  }
  f = message.getValue()
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    )
  }
  f = message.getScriptDisasm()
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    )
  }
  f = message.getType()
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    )
  }
  f = message.getTokenIssueInfo()
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.rpcpb.TokenIssueInfo.serializeBinaryToWriter
    )
  }
  f = message.getTokenTransferInfo()
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.rpcpb.TokenTransferInfo.serializeBinaryToWriter
    )
  }
  f = message.getSplitContractInfo()
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.rpcpb.SplitContractInfo.serializeBinaryToWriter
    )
  }
  f = message.getContractInfo()
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.rpcpb.ContractInfo.serializeBinaryToWriter
    )
  }
}


/**
 * @enum {number}
 */
proto.rpcpb.TxOutDetail.TxOutType = {
  UNKNOWN: 0,
  PAY_TO_PUBKEY_HASH: 1,
  PAY_TO_PUBKEY_HASH_CLTV: 2,
  TOKEN_ISSUE: 3,
  TOKEN_TRANSFER: 4,
  NEW_SPLIT_ADDR: 5,
  PAY_TO_SCRIPT_HASH: 6,
  CONTRACT_CREATE: 7,
  CONTRACT_CALL: 8
}

/**
 * optional string addr = 1;
 * @return {string}
 */
proto.rpcpb.TxOutDetail.prototype.getAddr = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""))
}


/** @param {string} value */
proto.rpcpb.TxOutDetail.prototype.setAddr = function (value) {
  jspb.Message.setProto3StringField(this, 1, value)
}


/**
 * optional uint64 value = 2;
 * @return {number}
 */
proto.rpcpb.TxOutDetail.prototype.getValue = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0))
}


/** @param {number} value */
proto.rpcpb.TxOutDetail.prototype.setValue = function (value) {
  jspb.Message.setProto3IntField(this, 2, value)
}


/**
 * optional string script_disasm = 3;
 * @return {string}
 */
proto.rpcpb.TxOutDetail.prototype.getScriptDisasm = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""))
}


/** @param {string} value */
proto.rpcpb.TxOutDetail.prototype.setScriptDisasm = function (value) {
  jspb.Message.setProto3StringField(this, 3, value)
}


/**
 * optional TxOutType type = 4;
 * @return {!proto.rpcpb.TxOutDetail.TxOutType}
 */
proto.rpcpb.TxOutDetail.prototype.getType = function () {
  return /** @type {!proto.rpcpb.TxOutDetail.TxOutType} */ (jspb.Message.getFieldWithDefault(this, 4, 0))
}


/** @param {!proto.rpcpb.TxOutDetail.TxOutType} value */
proto.rpcpb.TxOutDetail.prototype.setType = function (value) {
  jspb.Message.setProto3EnumField(this, 4, value)
}


/**
 * optional TokenIssueInfo token_issue_info = 5;
 * @return {?proto.rpcpb.TokenIssueInfo}
 */
proto.rpcpb.TxOutDetail.prototype.getTokenIssueInfo = function () {
  return /** @type{?proto.rpcpb.TokenIssueInfo} */ (
    jspb.Message.getWrapperField(this, proto.rpcpb.TokenIssueInfo, 5))
}


/** @param {?proto.rpcpb.TokenIssueInfo|undefined} value */
proto.rpcpb.TxOutDetail.prototype.setTokenIssueInfo = function (value) {
  jspb.Message.setOneofWrapperField(this, 5, proto.rpcpb.TxOutDetail.oneofGroups_[0], value)
}


/**
 * Clears the message field making it undefined.
 */
proto.rpcpb.TxOutDetail.prototype.clearTokenIssueInfo = function () {
  this.setTokenIssueInfo(undefined)
}


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rpcpb.TxOutDetail.prototype.hasTokenIssueInfo = function () {
  return jspb.Message.getField(this, 5) != null
}


/**
 * optional TokenTransferInfo token_transfer_info = 6;
 * @return {?proto.rpcpb.TokenTransferInfo}
 */
proto.rpcpb.TxOutDetail.prototype.getTokenTransferInfo = function () {
  return /** @type{?proto.rpcpb.TokenTransferInfo} */ (
    jspb.Message.getWrapperField(this, proto.rpcpb.TokenTransferInfo, 6))
}


/** @param {?proto.rpcpb.TokenTransferInfo|undefined} value */
proto.rpcpb.TxOutDetail.prototype.setTokenTransferInfo = function (value) {
  jspb.Message.setOneofWrapperField(this, 6, proto.rpcpb.TxOutDetail.oneofGroups_[0], value)
}


/**
 * Clears the message field making it undefined.
 */
proto.rpcpb.TxOutDetail.prototype.clearTokenTransferInfo = function () {
  this.setTokenTransferInfo(undefined)
}


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rpcpb.TxOutDetail.prototype.hasTokenTransferInfo = function () {
  return jspb.Message.getField(this, 6) != null
}


/**
 * optional SplitContractInfo split_contract_info = 7;
 * @return {?proto.rpcpb.SplitContractInfo}
 */
proto.rpcpb.TxOutDetail.prototype.getSplitContractInfo = function () {
  return /** @type{?proto.rpcpb.SplitContractInfo} */ (
    jspb.Message.getWrapperField(this, proto.rpcpb.SplitContractInfo, 7))
}


/** @param {?proto.rpcpb.SplitContractInfo|undefined} value */
proto.rpcpb.TxOutDetail.prototype.setSplitContractInfo = function (value) {
  jspb.Message.setOneofWrapperField(this, 7, proto.rpcpb.TxOutDetail.oneofGroups_[0], value)
}


/**
 * Clears the message field making it undefined.
 */
proto.rpcpb.TxOutDetail.prototype.clearSplitContractInfo = function () {
  this.setSplitContractInfo(undefined)
}


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rpcpb.TxOutDetail.prototype.hasSplitContractInfo = function () {
  return jspb.Message.getField(this, 7) != null
}


/**
 * optional ContractInfo contract_info = 8;
 * @return {?proto.rpcpb.ContractInfo}
 */
proto.rpcpb.TxOutDetail.prototype.getContractInfo = function () {
  return /** @type{?proto.rpcpb.ContractInfo} */ (
    jspb.Message.getWrapperField(this, proto.rpcpb.ContractInfo, 8))
}


/** @param {?proto.rpcpb.ContractInfo|undefined} value */
proto.rpcpb.TxOutDetail.prototype.setContractInfo = function (value) {
  jspb.Message.setOneofWrapperField(this, 8, proto.rpcpb.TxOutDetail.oneofGroups_[0], value)
}


/**
 * Clears the message field making it undefined.
 */
proto.rpcpb.TxOutDetail.prototype.clearContractInfo = function () {
  this.setContractInfo(undefined)
}


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rpcpb.TxOutDetail.prototype.hasContractInfo = function () {
  return jspb.Message.getField(this, 8) != null
}



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rpcpb.BlockDetail.repeatedFields_ = [11, 12]



if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.rpcpb.BlockDetail.prototype.toObject = function (opt_includeInstance) {
    return proto.rpcpb.BlockDetail.toObject(opt_includeInstance, this)
  }


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.rpcpb.BlockDetail} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.rpcpb.BlockDetail.toObject = function (includeInstance, msg) {
    var f, obj = {
      version: jspb.Message.getFieldWithDefault(msg, 1, 0),
      height: jspb.Message.getFieldWithDefault(msg, 2, 0),
      timeStamp: jspb.Message.getFieldWithDefault(msg, 3, 0),
      size: jspb.Message.getFieldWithDefault(msg, 4, 0),
      hash: jspb.Message.getFieldWithDefault(msg, 5, ""),
      prevBlockHash: jspb.Message.getFieldWithDefault(msg, 6, ""),
      coinBase: jspb.Message.getFieldWithDefault(msg, 7, ""),
      confirmed: jspb.Message.getFieldWithDefault(msg, 8, false),
      signature: jspb.Message.getFieldWithDefault(msg, 10, ""),
      txsList: jspb.Message.toObjectList(msg.getTxsList(),
        proto.rpcpb.TxDetail.toObject, includeInstance),
      internalTxsList: jspb.Message.toObjectList(msg.getInternalTxsList(),
        proto.rpcpb.TxDetail.toObject, includeInstance)
    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpcpb.BlockDetail}
 */
proto.rpcpb.BlockDetail.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.rpcpb.BlockDetail
  return proto.rpcpb.BlockDetail.deserializeBinaryFromReader(msg, reader)
}


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpcpb.BlockDetail} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpcpb.BlockDetail}
 */
proto.rpcpb.BlockDetail.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readInt32())
        msg.setVersion(value)
        break
      case 2:
        var value = /** @type {number} */ (reader.readUint32())
        msg.setHeight(value)
        break
      case 3:
        var value = /** @type {number} */ (reader.readInt64())
        msg.setTimeStamp(value)
        break
      case 4:
        var value = /** @type {number} */ (reader.readUint32())
        msg.setSize(value)
        break
      case 5:
        var value = /** @type {string} */ (reader.readString())
        msg.setHash(value)
        break
      case 6:
        var value = /** @type {string} */ (reader.readString())
        msg.setPrevBlockHash(value)
        break
      case 7:
        var value = /** @type {string} */ (reader.readString())
        msg.setCoinBase(value)
        break
      case 8:
        var value = /** @type {boolean} */ (reader.readBool())
        msg.setConfirmed(value)
        break
      case 10:
        var value = /** @type {string} */ (reader.readString())
        msg.setSignature(value)
        break
      case 11:
        var value = new proto.rpcpb.TxDetail
        reader.readMessage(value, proto.rpcpb.TxDetail.deserializeBinaryFromReader)
        msg.addTxs(value)
        break
      case 12:
        var value = new proto.rpcpb.TxDetail
        reader.readMessage(value, proto.rpcpb.TxDetail.deserializeBinaryFromReader)
        msg.addInternalTxs(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpcpb.BlockDetail.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.rpcpb.BlockDetail.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpcpb.BlockDetail} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpcpb.BlockDetail.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getVersion()
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    )
  }
  f = message.getHeight()
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    )
  }
  f = message.getTimeStamp()
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    )
  }
  f = message.getSize()
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    )
  }
  f = message.getHash()
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    )
  }
  f = message.getPrevBlockHash()
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    )
  }
  f = message.getCoinBase()
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    )
  }
  f = message.getConfirmed()
  if (f) {
    writer.writeBool(
      8,
      f
    )
  }
  f = message.getSignature()
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    )
  }
  f = message.getTxsList()
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      11,
      f,
      proto.rpcpb.TxDetail.serializeBinaryToWriter
    )
  }
  f = message.getInternalTxsList()
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      12,
      f,
      proto.rpcpb.TxDetail.serializeBinaryToWriter
    )
  }
}


/**
 * optional int32 version = 1;
 * @return {number}
 */
proto.rpcpb.BlockDetail.prototype.getVersion = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0))
}


/** @param {number} value */
proto.rpcpb.BlockDetail.prototype.setVersion = function (value) {
  jspb.Message.setProto3IntField(this, 1, value)
}


/**
 * optional uint32 height = 2;
 * @return {number}
 */
proto.rpcpb.BlockDetail.prototype.getHeight = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0))
}


/** @param {number} value */
proto.rpcpb.BlockDetail.prototype.setHeight = function (value) {
  jspb.Message.setProto3IntField(this, 2, value)
}


/**
 * optional int64 time_stamp = 3;
 * @return {number}
 */
proto.rpcpb.BlockDetail.prototype.getTimeStamp = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0))
}


/** @param {number} value */
proto.rpcpb.BlockDetail.prototype.setTimeStamp = function (value) {
  jspb.Message.setProto3IntField(this, 3, value)
}


/**
 * optional uint32 size = 4;
 * @return {number}
 */
proto.rpcpb.BlockDetail.prototype.getSize = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0))
}


/** @param {number} value */
proto.rpcpb.BlockDetail.prototype.setSize = function (value) {
  jspb.Message.setProto3IntField(this, 4, value)
}


/**
 * optional string hash = 5;
 * @return {string}
 */
proto.rpcpb.BlockDetail.prototype.getHash = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""))
}


/** @param {string} value */
proto.rpcpb.BlockDetail.prototype.setHash = function (value) {
  jspb.Message.setProto3StringField(this, 5, value)
}


/**
 * optional string prev_block_hash = 6;
 * @return {string}
 */
proto.rpcpb.BlockDetail.prototype.getPrevBlockHash = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""))
}


/** @param {string} value */
proto.rpcpb.BlockDetail.prototype.setPrevBlockHash = function (value) {
  jspb.Message.setProto3StringField(this, 6, value)
}


/**
 * optional string coin_base = 7;
 * @return {string}
 */
proto.rpcpb.BlockDetail.prototype.getCoinBase = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""))
}


/** @param {string} value */
proto.rpcpb.BlockDetail.prototype.setCoinBase = function (value) {
  jspb.Message.setProto3StringField(this, 7, value)
}


/**
 * optional bool confirmed = 8;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.rpcpb.BlockDetail.prototype.getConfirmed = function () {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 8, false))
}


/** @param {boolean} value */
proto.rpcpb.BlockDetail.prototype.setConfirmed = function (value) {
  jspb.Message.setProto3BooleanField(this, 8, value)
}


/**
 * optional string signature = 10;
 * @return {string}
 */
proto.rpcpb.BlockDetail.prototype.getSignature = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""))
}


/** @param {string} value */
proto.rpcpb.BlockDetail.prototype.setSignature = function (value) {
  jspb.Message.setProto3StringField(this, 10, value)
}


/**
 * repeated TxDetail txs = 11;
 * @return {!Array<!proto.rpcpb.TxDetail>}
 */
proto.rpcpb.BlockDetail.prototype.getTxsList = function () {
  return /** @type{!Array<!proto.rpcpb.TxDetail>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rpcpb.TxDetail, 11))
}


/** @param {!Array<!proto.rpcpb.TxDetail>} value */
proto.rpcpb.BlockDetail.prototype.setTxsList = function (value) {
  jspb.Message.setRepeatedWrapperField(this, 11, value)
}


/**
 * @param {!proto.rpcpb.TxDetail=} opt_value
 * @param {number=} opt_index
 * @return {!proto.rpcpb.TxDetail}
 */
proto.rpcpb.BlockDetail.prototype.addTxs = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 11, opt_value, proto.rpcpb.TxDetail, opt_index)
}


/**
 * Clears the list making it empty but non-null.
 */
proto.rpcpb.BlockDetail.prototype.clearTxsList = function () {
  this.setTxsList([])
}


/**
 * repeated TxDetail internal_txs = 12;
 * @return {!Array<!proto.rpcpb.TxDetail>}
 */
proto.rpcpb.BlockDetail.prototype.getInternalTxsList = function () {
  return /** @type{!Array<!proto.rpcpb.TxDetail>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rpcpb.TxDetail, 12))
}


/** @param {!Array<!proto.rpcpb.TxDetail>} value */
proto.rpcpb.BlockDetail.prototype.setInternalTxsList = function (value) {
  jspb.Message.setRepeatedWrapperField(this, 12, value)
}


/**
 * @param {!proto.rpcpb.TxDetail=} opt_value
 * @param {number=} opt_index
 * @return {!proto.rpcpb.TxDetail}
 */
proto.rpcpb.BlockDetail.prototype.addInternalTxs = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 12, opt_value, proto.rpcpb.TxDetail, opt_index)
}


/**
 * Clears the list making it empty but non-null.
 */
proto.rpcpb.BlockDetail.prototype.clearInternalTxsList = function () {
  this.setInternalTxsList([])
}





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.rpcpb.TokenIssueInfo.prototype.toObject = function (opt_includeInstance) {
    return proto.rpcpb.TokenIssueInfo.toObject(opt_includeInstance, this)
  }


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.rpcpb.TokenIssueInfo} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.rpcpb.TokenIssueInfo.toObject = function (includeInstance, msg) {
    var f, obj = {
      tokenTag: (f = msg.getTokenTag()) && transaction_pb.TokenTag.toObject(includeInstance, f)
    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpcpb.TokenIssueInfo}
 */
proto.rpcpb.TokenIssueInfo.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.rpcpb.TokenIssueInfo
  return proto.rpcpb.TokenIssueInfo.deserializeBinaryFromReader(msg, reader)
}


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpcpb.TokenIssueInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpcpb.TokenIssueInfo}
 */
proto.rpcpb.TokenIssueInfo.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = new transaction_pb.TokenTag
        reader.readMessage(value, transaction_pb.TokenTag.deserializeBinaryFromReader)
        msg.setTokenTag(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpcpb.TokenIssueInfo.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.rpcpb.TokenIssueInfo.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpcpb.TokenIssueInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpcpb.TokenIssueInfo.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getTokenTag()
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      transaction_pb.TokenTag.serializeBinaryToWriter
    )
  }
}


/**
 * optional TokenTag token_tag = 1;
 * @return {?proto.rpcpb.TokenTag}
 */
proto.rpcpb.TokenIssueInfo.prototype.getTokenTag = function () {
  return /** @type{?proto.rpcpb.TokenTag} */ (
    jspb.Message.getWrapperField(this, transaction_pb.TokenTag, 1))
}


/** @param {?proto.rpcpb.TokenTag|undefined} value */
proto.rpcpb.TokenIssueInfo.prototype.setTokenTag = function (value) {
  jspb.Message.setWrapperField(this, 1, value)
}


/**
 * Clears the message field making it undefined.
 */
proto.rpcpb.TokenIssueInfo.prototype.clearTokenTag = function () {
  this.setTokenTag(undefined)
}


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rpcpb.TokenIssueInfo.prototype.hasTokenTag = function () {
  return jspb.Message.getField(this, 1) != null
}



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rpcpb.SplitContractInfo.repeatedFields_ = [1, 2]



if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.rpcpb.SplitContractInfo.prototype.toObject = function (opt_includeInstance) {
    return proto.rpcpb.SplitContractInfo.toObject(opt_includeInstance, this)
  }


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.rpcpb.SplitContractInfo} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.rpcpb.SplitContractInfo.toObject = function (includeInstance, msg) {
    var f, obj = {
      addrsList: jspb.Message.getRepeatedField(msg, 1),
      weightsList: jspb.Message.getRepeatedField(msg, 2)
    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpcpb.SplitContractInfo}
 */
proto.rpcpb.SplitContractInfo.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.rpcpb.SplitContractInfo
  return proto.rpcpb.SplitContractInfo.deserializeBinaryFromReader(msg, reader)
}


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpcpb.SplitContractInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpcpb.SplitContractInfo}
 */
proto.rpcpb.SplitContractInfo.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString())
        msg.addAddrs(value)
        break
      case 2:
        var value = /** @type {!Array<number>} */ (reader.readPackedUint32())
        msg.setWeightsList(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpcpb.SplitContractInfo.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.rpcpb.SplitContractInfo.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpcpb.SplitContractInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpcpb.SplitContractInfo.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getAddrsList()
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    )
  }
  f = message.getWeightsList()
  if (f.length > 0) {
    writer.writePackedUint32(
      2,
      f
    )
  }
}


/**
 * repeated string addrs = 1;
 * @return {!Array<string>}
 */
proto.rpcpb.SplitContractInfo.prototype.getAddrsList = function () {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1))
}


/** @param {!Array<string>} value */
proto.rpcpb.SplitContractInfo.prototype.setAddrsList = function (value) {
  jspb.Message.setField(this, 1, value || [])
}


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.rpcpb.SplitContractInfo.prototype.addAddrs = function (value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index)
}


/**
 * Clears the list making it empty but non-null.
 */
proto.rpcpb.SplitContractInfo.prototype.clearAddrsList = function () {
  this.setAddrsList([])
}


/**
 * repeated uint32 weights = 2;
 * @return {!Array<number>}
 */
proto.rpcpb.SplitContractInfo.prototype.getWeightsList = function () {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 2))
}


/** @param {!Array<number>} value */
proto.rpcpb.SplitContractInfo.prototype.setWeightsList = function (value) {
  jspb.Message.setField(this, 2, value || [])
}


/**
 * @param {number} value
 * @param {number=} opt_index
 */
proto.rpcpb.SplitContractInfo.prototype.addWeights = function (value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index)
}


/**
 * Clears the list making it empty but non-null.
 */
proto.rpcpb.SplitContractInfo.prototype.clearWeightsList = function () {
  this.setWeightsList([])
}





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.rpcpb.TokenTransferInfo.prototype.toObject = function (opt_includeInstance) {
    return proto.rpcpb.TokenTransferInfo.toObject(opt_includeInstance, this)
  }


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.rpcpb.TokenTransferInfo} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.rpcpb.TokenTransferInfo.toObject = function (includeInstance, msg) {
    var f, obj = {
      tokenId: jspb.Message.getFieldWithDefault(msg, 1, "")
    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpcpb.TokenTransferInfo}
 */
proto.rpcpb.TokenTransferInfo.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.rpcpb.TokenTransferInfo
  return proto.rpcpb.TokenTransferInfo.deserializeBinaryFromReader(msg, reader)
}


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpcpb.TokenTransferInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpcpb.TokenTransferInfo}
 */
proto.rpcpb.TokenTransferInfo.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString())
        msg.setTokenId(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpcpb.TokenTransferInfo.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.rpcpb.TokenTransferInfo.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpcpb.TokenTransferInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpcpb.TokenTransferInfo.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getTokenId()
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    )
  }
}


/**
 * optional string token_id = 1;
 * @return {string}
 */
proto.rpcpb.TokenTransferInfo.prototype.getTokenId = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""))
}


/** @param {string} value */
proto.rpcpb.TokenTransferInfo.prototype.setTokenId = function (value) {
  jspb.Message.setProto3StringField(this, 1, value)
}





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.rpcpb.CallReq.prototype.toObject = function (opt_includeInstance) {
    return proto.rpcpb.CallReq.toObject(opt_includeInstance, this)
  }


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.rpcpb.CallReq} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.rpcpb.CallReq.toObject = function (includeInstance, msg) {
    var f, obj = {
      from: jspb.Message.getFieldWithDefault(msg, 1, ""),
      to: jspb.Message.getFieldWithDefault(msg, 2, ""),
      data: jspb.Message.getFieldWithDefault(msg, 3, ""),
      height: jspb.Message.getFieldWithDefault(msg, 4, 0),
      timeout: jspb.Message.getFieldWithDefault(msg, 5, 0)
    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpcpb.CallReq}
 */
proto.rpcpb.CallReq.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.rpcpb.CallReq
  return proto.rpcpb.CallReq.deserializeBinaryFromReader(msg, reader)
}


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpcpb.CallReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpcpb.CallReq}
 */
proto.rpcpb.CallReq.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString())
        msg.setFrom(value)
        break
      case 2:
        var value = /** @type {string} */ (reader.readString())
        msg.setTo(value)
        break
      case 3:
        var value = /** @type {string} */ (reader.readString())
        msg.setData(value)
        break
      case 4:
        var value = /** @type {number} */ (reader.readUint32())
        msg.setHeight(value)
        break
      case 5:
        var value = /** @type {number} */ (reader.readUint32())
        msg.setTimeout(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpcpb.CallReq.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.rpcpb.CallReq.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpcpb.CallReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpcpb.CallReq.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getFrom()
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    )
  }
  f = message.getTo()
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    )
  }
  f = message.getData()
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    )
  }
  f = message.getHeight()
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    )
  }
  f = message.getTimeout()
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    )
  }
}


/**
 * optional string from = 1;
 * @return {string}
 */
proto.rpcpb.CallReq.prototype.getFrom = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""))
}


/** @param {string} value */
proto.rpcpb.CallReq.prototype.setFrom = function (value) {
  jspb.Message.setProto3StringField(this, 1, value)
}


/**
 * optional string to = 2;
 * @return {string}
 */
proto.rpcpb.CallReq.prototype.getTo = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""))
}


/** @param {string} value */
proto.rpcpb.CallReq.prototype.setTo = function (value) {
  jspb.Message.setProto3StringField(this, 2, value)
}


/**
 * optional string data = 3;
 * @return {string}
 */
proto.rpcpb.CallReq.prototype.getData = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""))
}


/** @param {string} value */
proto.rpcpb.CallReq.prototype.setData = function (value) {
  jspb.Message.setProto3StringField(this, 3, value)
}


/**
 * optional uint32 height = 4;
 * @return {number}
 */
proto.rpcpb.CallReq.prototype.getHeight = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0))
}


/** @param {number} value */
proto.rpcpb.CallReq.prototype.setHeight = function (value) {
  jspb.Message.setProto3IntField(this, 4, value)
}


/**
 * optional uint32 timeout = 5;
 * @return {number}
 */
proto.rpcpb.CallReq.prototype.getTimeout = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0))
}


/** @param {number} value */
proto.rpcpb.CallReq.prototype.setTimeout = function (value) {
  jspb.Message.setProto3IntField(this, 5, value)
}





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.rpcpb.CallResp.prototype.toObject = function (opt_includeInstance) {
    return proto.rpcpb.CallResp.toObject(opt_includeInstance, this)
  }


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.rpcpb.CallResp} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.rpcpb.CallResp.toObject = function (includeInstance, msg) {
    var f, obj = {
      code: jspb.Message.getFieldWithDefault(msg, 1, 0),
      message: jspb.Message.getFieldWithDefault(msg, 2, ""),
      output: jspb.Message.getFieldWithDefault(msg, 3, ""),
      height: jspb.Message.getFieldWithDefault(msg, 4, 0)
    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpcpb.CallResp}
 */
proto.rpcpb.CallResp.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.rpcpb.CallResp
  return proto.rpcpb.CallResp.deserializeBinaryFromReader(msg, reader)
}


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpcpb.CallResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpcpb.CallResp}
 */
proto.rpcpb.CallResp.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readInt32())
        msg.setCode(value)
        break
      case 2:
        var value = /** @type {string} */ (reader.readString())
        msg.setMessage(value)
        break
      case 3:
        var value = /** @type {string} */ (reader.readString())
        msg.setOutput(value)
        break
      case 4:
        var value = /** @type {number} */ (reader.readInt32())
        msg.setHeight(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpcpb.CallResp.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.rpcpb.CallResp.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpcpb.CallResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpcpb.CallResp.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getCode()
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    )
  }
  f = message.getMessage()
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    )
  }
  f = message.getOutput()
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    )
  }
  f = message.getHeight()
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    )
  }
}


/**
 * optional int32 code = 1;
 * @return {number}
 */
proto.rpcpb.CallResp.prototype.getCode = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0))
}


/** @param {number} value */
proto.rpcpb.CallResp.prototype.setCode = function (value) {
  jspb.Message.setProto3IntField(this, 1, value)
}


/**
 * optional string message = 2;
 * @return {string}
 */
proto.rpcpb.CallResp.prototype.getMessage = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""))
}


/** @param {string} value */
proto.rpcpb.CallResp.prototype.setMessage = function (value) {
  jspb.Message.setProto3StringField(this, 2, value)
}


/**
 * optional string output = 3;
 * @return {string}
 */
proto.rpcpb.CallResp.prototype.getOutput = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""))
}


/** @param {string} value */
proto.rpcpb.CallResp.prototype.setOutput = function (value) {
  jspb.Message.setProto3StringField(this, 3, value)
}


/**
 * optional int32 height = 4;
 * @return {number}
 */
proto.rpcpb.CallResp.prototype.getHeight = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0))
}


/** @param {number} value */
proto.rpcpb.CallResp.prototype.setHeight = function (value) {
  jspb.Message.setProto3IntField(this, 4, value)
}





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.rpcpb.EstimateGasResp.prototype.toObject = function (opt_includeInstance) {
    return proto.rpcpb.EstimateGasResp.toObject(opt_includeInstance, this)
  }


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.rpcpb.EstimateGasResp} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.rpcpb.EstimateGasResp.toObject = function (includeInstance, msg) {
    var f, obj = {
      code: jspb.Message.getFieldWithDefault(msg, 1, 0),
      message: jspb.Message.getFieldWithDefault(msg, 2, ""),
      gas: jspb.Message.getFieldWithDefault(msg, 3, 0)
    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpcpb.EstimateGasResp}
 */
proto.rpcpb.EstimateGasResp.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.rpcpb.EstimateGasResp
  return proto.rpcpb.EstimateGasResp.deserializeBinaryFromReader(msg, reader)
}


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpcpb.EstimateGasResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpcpb.EstimateGasResp}
 */
proto.rpcpb.EstimateGasResp.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readInt32())
        msg.setCode(value)
        break
      case 2:
        var value = /** @type {string} */ (reader.readString())
        msg.setMessage(value)
        break
      case 3:
        var value = /** @type {number} */ (reader.readInt32())
        msg.setGas(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpcpb.EstimateGasResp.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.rpcpb.EstimateGasResp.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpcpb.EstimateGasResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpcpb.EstimateGasResp.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getCode()
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    )
  }
  f = message.getMessage()
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    )
  }
  f = message.getGas()
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    )
  }
}


/**
 * optional int32 code = 1;
 * @return {number}
 */
proto.rpcpb.EstimateGasResp.prototype.getCode = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0))
}


/** @param {number} value */
proto.rpcpb.EstimateGasResp.prototype.setCode = function (value) {
  jspb.Message.setProto3IntField(this, 1, value)
}


/**
 * optional string message = 2;
 * @return {string}
 */
proto.rpcpb.EstimateGasResp.prototype.getMessage = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""))
}


/** @param {string} value */
proto.rpcpb.EstimateGasResp.prototype.setMessage = function (value) {
  jspb.Message.setProto3StringField(this, 2, value)
}


/**
 * optional int32 gas = 3;
 * @return {number}
 */
proto.rpcpb.EstimateGasResp.prototype.getGas = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0))
}


/** @param {number} value */
proto.rpcpb.EstimateGasResp.prototype.setGas = function (value) {
  jspb.Message.setProto3IntField(this, 3, value)
}





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.rpcpb.NonceReq.prototype.toObject = function (opt_includeInstance) {
    return proto.rpcpb.NonceReq.toObject(opt_includeInstance, this)
  }


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.rpcpb.NonceReq} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.rpcpb.NonceReq.toObject = function (includeInstance, msg) {
    var f, obj = {
      addr: jspb.Message.getFieldWithDefault(msg, 1, "")
    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpcpb.NonceReq}
 */
proto.rpcpb.NonceReq.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.rpcpb.NonceReq
  return proto.rpcpb.NonceReq.deserializeBinaryFromReader(msg, reader)
}


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpcpb.NonceReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpcpb.NonceReq}
 */
proto.rpcpb.NonceReq.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString())
        msg.setAddr(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpcpb.NonceReq.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.rpcpb.NonceReq.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpcpb.NonceReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpcpb.NonceReq.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getAddr()
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    )
  }
}


/**
 * optional string addr = 1;
 * @return {string}
 */
proto.rpcpb.NonceReq.prototype.getAddr = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""))
}


/** @param {string} value */
proto.rpcpb.NonceReq.prototype.setAddr = function (value) {
  jspb.Message.setProto3StringField(this, 1, value)
}





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.rpcpb.NonceResp.prototype.toObject = function (opt_includeInstance) {
    return proto.rpcpb.NonceResp.toObject(opt_includeInstance, this)
  }


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.rpcpb.NonceResp} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.rpcpb.NonceResp.toObject = function (includeInstance, msg) {
    var f, obj = {
      code: jspb.Message.getFieldWithDefault(msg, 1, 0),
      message: jspb.Message.getFieldWithDefault(msg, 2, ""),
      nonce: jspb.Message.getFieldWithDefault(msg, 3, 0)
    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpcpb.NonceResp}
 */
proto.rpcpb.NonceResp.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.rpcpb.NonceResp
  return proto.rpcpb.NonceResp.deserializeBinaryFromReader(msg, reader)
}


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpcpb.NonceResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpcpb.NonceResp}
 */
proto.rpcpb.NonceResp.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readInt32())
        msg.setCode(value)
        break
      case 2:
        var value = /** @type {string} */ (reader.readString())
        msg.setMessage(value)
        break
      case 3:
        var value = /** @type {number} */ (reader.readUint64())
        msg.setNonce(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpcpb.NonceResp.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.rpcpb.NonceResp.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpcpb.NonceResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpcpb.NonceResp.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getCode()
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    )
  }
  f = message.getMessage()
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    )
  }
  f = message.getNonce()
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    )
  }
}


/**
 * optional int32 code = 1;
 * @return {number}
 */
proto.rpcpb.NonceResp.prototype.getCode = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0))
}


/** @param {number} value */
proto.rpcpb.NonceResp.prototype.setCode = function (value) {
  jspb.Message.setProto3IntField(this, 1, value)
}


/**
 * optional string message = 2;
 * @return {string}
 */
proto.rpcpb.NonceResp.prototype.getMessage = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""))
}


/** @param {string} value */
proto.rpcpb.NonceResp.prototype.setMessage = function (value) {
  jspb.Message.setProto3StringField(this, 2, value)
}


/**
 * optional uint64 nonce = 3;
 * @return {number}
 */
proto.rpcpb.NonceResp.prototype.getNonce = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0))
}


/** @param {number} value */
proto.rpcpb.NonceResp.prototype.setNonce = function (value) {
  jspb.Message.setProto3IntField(this, 3, value)
}





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.rpcpb.TableReq.prototype.toObject = function (opt_includeInstance) {
    return proto.rpcpb.TableReq.toObject(opt_includeInstance, this)
  }


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.rpcpb.TableReq} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.rpcpb.TableReq.toObject = function (includeInstance, msg) {
    var f, obj = {

    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpcpb.TableReq}
 */
proto.rpcpb.TableReq.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.rpcpb.TableReq
  return proto.rpcpb.TableReq.deserializeBinaryFromReader(msg, reader)
}


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpcpb.TableReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpcpb.TableReq}
 */
proto.rpcpb.TableReq.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      default:
        reader.skipField()
        break
    }
  }
  return msg
}


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpcpb.TableReq.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.rpcpb.TableReq.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpcpb.TableReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpcpb.TableReq.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
}



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rpcpb.TableResp.repeatedFields_ = [3]



if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.rpcpb.TableResp.prototype.toObject = function (opt_includeInstance) {
    return proto.rpcpb.TableResp.toObject(opt_includeInstance, this)
  }


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.rpcpb.TableResp} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.rpcpb.TableResp.toObject = function (includeInstance, msg) {
    var f, obj = {
      code: jspb.Message.getFieldWithDefault(msg, 1, 0),
      message: jspb.Message.getFieldWithDefault(msg, 2, ""),
      tableList: jspb.Message.getRepeatedField(msg, 3)
    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpcpb.TableResp}
 */
proto.rpcpb.TableResp.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.rpcpb.TableResp
  return proto.rpcpb.TableResp.deserializeBinaryFromReader(msg, reader)
}


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpcpb.TableResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpcpb.TableResp}
 */
proto.rpcpb.TableResp.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readInt32())
        msg.setCode(value)
        break
      case 2:
        var value = /** @type {string} */ (reader.readString())
        msg.setMessage(value)
        break
      case 3:
        var value = /** @type {string} */ (reader.readString())
        msg.addTable(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpcpb.TableResp.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.rpcpb.TableResp.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpcpb.TableResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpcpb.TableResp.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getCode()
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    )
  }
  f = message.getMessage()
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    )
  }
  f = message.getTableList()
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    )
  }
}


/**
 * optional int32 code = 1;
 * @return {number}
 */
proto.rpcpb.TableResp.prototype.getCode = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0))
}


/** @param {number} value */
proto.rpcpb.TableResp.prototype.setCode = function (value) {
  jspb.Message.setProto3IntField(this, 1, value)
}


/**
 * optional string message = 2;
 * @return {string}
 */
proto.rpcpb.TableResp.prototype.getMessage = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""))
}


/** @param {string} value */
proto.rpcpb.TableResp.prototype.setMessage = function (value) {
  jspb.Message.setProto3StringField(this, 2, value)
}


/**
 * repeated string table = 3;
 * @return {!Array<string>}
 */
proto.rpcpb.TableResp.prototype.getTableList = function () {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3))
}


/** @param {!Array<string>} value */
proto.rpcpb.TableResp.prototype.setTableList = function (value) {
  jspb.Message.setField(this, 3, value || [])
}


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.rpcpb.TableResp.prototype.addTable = function (value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index)
}


/**
 * Clears the list making it empty but non-null.
 */
proto.rpcpb.TableResp.prototype.clearTableList = function () {
  this.setTableList([])
}





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.rpcpb.GetCodeReq.prototype.toObject = function (opt_includeInstance) {
    return proto.rpcpb.GetCodeReq.toObject(opt_includeInstance, this)
  }


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.rpcpb.GetCodeReq} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.rpcpb.GetCodeReq.toObject = function (includeInstance, msg) {
    var f, obj = {
      address: jspb.Message.getFieldWithDefault(msg, 1, "")
    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpcpb.GetCodeReq}
 */
proto.rpcpb.GetCodeReq.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.rpcpb.GetCodeReq
  return proto.rpcpb.GetCodeReq.deserializeBinaryFromReader(msg, reader)
}


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpcpb.GetCodeReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpcpb.GetCodeReq}
 */
proto.rpcpb.GetCodeReq.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString())
        msg.setAddress(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpcpb.GetCodeReq.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.rpcpb.GetCodeReq.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpcpb.GetCodeReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpcpb.GetCodeReq.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getAddress()
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    )
  }
}


/**
 * optional string address = 1;
 * @return {string}
 */
proto.rpcpb.GetCodeReq.prototype.getAddress = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""))
}


/** @param {string} value */
proto.rpcpb.GetCodeReq.prototype.setAddress = function (value) {
  jspb.Message.setProto3StringField(this, 1, value)
}





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.rpcpb.GetCodeResp.prototype.toObject = function (opt_includeInstance) {
    return proto.rpcpb.GetCodeResp.toObject(opt_includeInstance, this)
  }


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.rpcpb.GetCodeResp} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.rpcpb.GetCodeResp.toObject = function (includeInstance, msg) {
    var f, obj = {
      code: jspb.Message.getFieldWithDefault(msg, 1, 0),
      message: jspb.Message.getFieldWithDefault(msg, 2, ""),
      data: jspb.Message.getFieldWithDefault(msg, 3, "")
    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpcpb.GetCodeResp}
 */
proto.rpcpb.GetCodeResp.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.rpcpb.GetCodeResp
  return proto.rpcpb.GetCodeResp.deserializeBinaryFromReader(msg, reader)
}


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpcpb.GetCodeResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpcpb.GetCodeResp}
 */
proto.rpcpb.GetCodeResp.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readInt32())
        msg.setCode(value)
        break
      case 2:
        var value = /** @type {string} */ (reader.readString())
        msg.setMessage(value)
        break
      case 3:
        var value = /** @type {string} */ (reader.readString())
        msg.setData(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpcpb.GetCodeResp.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.rpcpb.GetCodeResp.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpcpb.GetCodeResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpcpb.GetCodeResp.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getCode()
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    )
  }
  f = message.getMessage()
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    )
  }
  f = message.getData()
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    )
  }
}


/**
 * optional int32 code = 1;
 * @return {number}
 */
proto.rpcpb.GetCodeResp.prototype.getCode = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0))
}


/** @param {number} value */
proto.rpcpb.GetCodeResp.prototype.setCode = function (value) {
  jspb.Message.setProto3IntField(this, 1, value)
}


/**
 * optional string message = 2;
 * @return {string}
 */
proto.rpcpb.GetCodeResp.prototype.getMessage = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""))
}


/** @param {string} value */
proto.rpcpb.GetCodeResp.prototype.setMessage = function (value) {
  jspb.Message.setProto3StringField(this, 2, value)
}


/**
 * optional string data = 3;
 * @return {string}
 */
proto.rpcpb.GetCodeResp.prototype.getData = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""))
}


/** @param {string} value */
proto.rpcpb.GetCodeResp.prototype.setData = function (value) {
  jspb.Message.setProto3StringField(this, 3, value)
}





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.rpcpb.StorageReq.prototype.toObject = function (opt_includeInstance) {
    return proto.rpcpb.StorageReq.toObject(opt_includeInstance, this)
  }


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.rpcpb.StorageReq} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.rpcpb.StorageReq.toObject = function (includeInstance, msg) {
    var f, obj = {
      address: jspb.Message.getFieldWithDefault(msg, 1, ""),
      position: jspb.Message.getFieldWithDefault(msg, 2, ""),
      height: jspb.Message.getFieldWithDefault(msg, 3, 0)
    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpcpb.StorageReq}
 */
proto.rpcpb.StorageReq.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.rpcpb.StorageReq
  return proto.rpcpb.StorageReq.deserializeBinaryFromReader(msg, reader)
}


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpcpb.StorageReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpcpb.StorageReq}
 */
proto.rpcpb.StorageReq.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString())
        msg.setAddress(value)
        break
      case 2:
        var value = /** @type {string} */ (reader.readString())
        msg.setPosition(value)
        break
      case 3:
        var value = /** @type {number} */ (reader.readUint32())
        msg.setHeight(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpcpb.StorageReq.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.rpcpb.StorageReq.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpcpb.StorageReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpcpb.StorageReq.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getAddress()
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    )
  }
  f = message.getPosition()
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    )
  }
  f = message.getHeight()
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    )
  }
}


/**
 * optional string address = 1;
 * @return {string}
 */
proto.rpcpb.StorageReq.prototype.getAddress = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""))
}


/** @param {string} value */
proto.rpcpb.StorageReq.prototype.setAddress = function (value) {
  jspb.Message.setProto3StringField(this, 1, value)
}


/**
 * optional string position = 2;
 * @return {string}
 */
proto.rpcpb.StorageReq.prototype.getPosition = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""))
}


/** @param {string} value */
proto.rpcpb.StorageReq.prototype.setPosition = function (value) {
  jspb.Message.setProto3StringField(this, 2, value)
}


/**
 * optional uint32 height = 3;
 * @return {number}
 */
proto.rpcpb.StorageReq.prototype.getHeight = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0))
}


/** @param {number} value */
proto.rpcpb.StorageReq.prototype.setHeight = function (value) {
  jspb.Message.setProto3IntField(this, 3, value)
}





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.rpcpb.StorageResp.prototype.toObject = function (opt_includeInstance) {
    return proto.rpcpb.StorageResp.toObject(opt_includeInstance, this)
  }


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.rpcpb.StorageResp} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.rpcpb.StorageResp.toObject = function (includeInstance, msg) {
    var f, obj = {
      code: jspb.Message.getFieldWithDefault(msg, 1, 0),
      message: jspb.Message.getFieldWithDefault(msg, 2, ""),
      data: jspb.Message.getFieldWithDefault(msg, 3, "")
    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpcpb.StorageResp}
 */
proto.rpcpb.StorageResp.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.rpcpb.StorageResp
  return proto.rpcpb.StorageResp.deserializeBinaryFromReader(msg, reader)
}


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpcpb.StorageResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpcpb.StorageResp}
 */
proto.rpcpb.StorageResp.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readInt32())
        msg.setCode(value)
        break
      case 2:
        var value = /** @type {string} */ (reader.readString())
        msg.setMessage(value)
        break
      case 3:
        var value = /** @type {string} */ (reader.readString())
        msg.setData(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpcpb.StorageResp.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.rpcpb.StorageResp.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpcpb.StorageResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpcpb.StorageResp.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getCode()
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    )
  }
  f = message.getMessage()
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    )
  }
  f = message.getData()
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    )
  }
}


/**
 * optional int32 code = 1;
 * @return {number}
 */
proto.rpcpb.StorageResp.prototype.getCode = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0))
}


/** @param {number} value */
proto.rpcpb.StorageResp.prototype.setCode = function (value) {
  jspb.Message.setProto3IntField(this, 1, value)
}


/**
 * optional string message = 2;
 * @return {string}
 */
proto.rpcpb.StorageResp.prototype.getMessage = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""))
}


/** @param {string} value */
proto.rpcpb.StorageResp.prototype.setMessage = function (value) {
  jspb.Message.setProto3StringField(this, 2, value)
}


/**
 * optional string data = 3;
 * @return {string}
 */
proto.rpcpb.StorageResp.prototype.getData = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""))
}


/** @param {string} value */
proto.rpcpb.StorageResp.prototype.setData = function (value) {
  jspb.Message.setProto3StringField(this, 3, value)
}


/**
 * @enum {number}
 */
proto.rpcpb.TxStatus = {
  UNKNOWN: 0,
  PENDING: 1,
  ONCHAIN: 2,
  CONFIRMED: 3
}

goog.object.extend(exports, proto.rpcpb)