/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf')
var goog = jspb
var global = Function('return this')()

goog.exportSymbol('proto.corepb.HashLog', null, global)
goog.exportSymbol('proto.corepb.Log', null, global)
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.corepb.Log = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.corepb.Log.repeatedFields_, null)
}
goog.inherits(proto.corepb.Log, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.corepb.Log.displayName = 'proto.corepb.Log'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.corepb.HashLog = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.corepb.HashLog.repeatedFields_, null)
}
goog.inherits(proto.corepb.HashLog, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.corepb.HashLog.displayName = 'proto.corepb.HashLog'
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.corepb.Log.repeatedFields_ = [2]



if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.corepb.Log.prototype.toObject = function (opt_includeInstance) {
    return proto.corepb.Log.toObject(opt_includeInstance, this)
  }


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.corepb.Log} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.corepb.Log.toObject = function (includeInstance, msg) {
    var f, obj = {
      address: msg.getAddress_asB64(),
      topicsList: msg.getTopicsList_asB64(),
      data: msg.getData_asB64(),
      blockNumber: jspb.Message.getFieldWithDefault(msg, 4, 0),
      txHash: msg.getTxHash_asB64(),
      txIndex: jspb.Message.getFieldWithDefault(msg, 6, 0),
      index: jspb.Message.getFieldWithDefault(msg, 8, 0),
      removed: jspb.Message.getFieldWithDefault(msg, 9, false)
    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.corepb.Log}
 */
proto.corepb.Log.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.corepb.Log
  return proto.corepb.Log.deserializeBinaryFromReader(msg, reader)
}


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.corepb.Log} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.corepb.Log}
 */
proto.corepb.Log.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes())
      msg.setAddress(value)
      break
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes())
      msg.addTopics(value)
      break
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes())
      msg.setData(value)
      break
    case 4:
      var value = /** @type {number} */ (reader.readUint64())
      msg.setBlockNumber(value)
      break
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes())
      msg.setTxHash(value)
      break
    case 6:
      var value = /** @type {number} */ (reader.readUint32())
      msg.setTxIndex(value)
      break
    case 8:
      var value = /** @type {number} */ (reader.readUint32())
      msg.setIndex(value)
      break
    case 9:
      var value = /** @type {boolean} */ (reader.readBool())
      msg.setRemoved(value)
      break
    default:
      reader.skipField()
      break
    }
  }
  return msg
}


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.corepb.Log.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.corepb.Log.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.corepb.Log} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.corepb.Log.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getAddress_asU8()
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    )
  }
  f = message.getTopicsList_asU8()
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      2,
      f
    )
  }
  f = message.getData_asU8()
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    )
  }
  f = message.getBlockNumber()
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    )
  }
  f = message.getTxHash_asU8()
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    )
  }
  f = message.getTxIndex()
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    )
  }
  f = message.getIndex()
  if (f !== 0) {
    writer.writeUint32(
      8,
      f
    )
  }
  f = message.getRemoved()
  if (f) {
    writer.writeBool(
      9,
      f
    )
  }
}


/**
 * optional bytes address = 1;
 * @return {!(string|Uint8Array)}
 */
proto.corepb.Log.prototype.getAddress = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""))
}


/**
 * optional bytes address = 1;
 * This is a type-conversion wrapper around `getAddress()`
 * @return {string}
 */
proto.corepb.Log.prototype.getAddress_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
    this.getAddress()))
}


/**
 * optional bytes address = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAddress()`
 * @return {!Uint8Array}
 */
proto.corepb.Log.prototype.getAddress_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
    this.getAddress()))
}


/** @param {!(string|Uint8Array)} value */
proto.corepb.Log.prototype.setAddress = function (value) {
  jspb.Message.setProto3BytesField(this, 1, value)
}


/**
 * repeated bytes topics = 2;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.corepb.Log.prototype.getTopicsList = function () {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 2))
}


/**
 * repeated bytes topics = 2;
 * This is a type-conversion wrapper around `getTopicsList()`
 * @return {!Array<string>}
 */
proto.corepb.Log.prototype.getTopicsList_asB64 = function () {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
    this.getTopicsList()))
}


/**
 * repeated bytes topics = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTopicsList()`
 * @return {!Array<!Uint8Array>}
 */
proto.corepb.Log.prototype.getTopicsList_asU8 = function () {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
    this.getTopicsList()))
}


/** @param {!(Array<!Uint8Array>|Array<string>)} value */
proto.corepb.Log.prototype.setTopicsList = function (value) {
  jspb.Message.setField(this, 2, value || [])
}


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 */
proto.corepb.Log.prototype.addTopics = function (value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index)
}


/**
 * Clears the list making it empty but non-null.
 */
proto.corepb.Log.prototype.clearTopicsList = function () {
  this.setTopicsList([])
}


/**
 * optional bytes data = 3;
 * @return {!(string|Uint8Array)}
 */
proto.corepb.Log.prototype.getData = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""))
}


/**
 * optional bytes data = 3;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.corepb.Log.prototype.getData_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
    this.getData()))
}


/**
 * optional bytes data = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.corepb.Log.prototype.getData_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
    this.getData()))
}


/** @param {!(string|Uint8Array)} value */
proto.corepb.Log.prototype.setData = function (value) {
  jspb.Message.setProto3BytesField(this, 3, value)
}


/**
 * optional uint64 block_number = 4;
 * @return {number}
 */
proto.corepb.Log.prototype.getBlockNumber = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0))
}


/** @param {number} value */
proto.corepb.Log.prototype.setBlockNumber = function (value) {
  jspb.Message.setProto3IntField(this, 4, value)
}


/**
 * optional bytes tx_hash = 5;
 * @return {!(string|Uint8Array)}
 */
proto.corepb.Log.prototype.getTxHash = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""))
}


/**
 * optional bytes tx_hash = 5;
 * This is a type-conversion wrapper around `getTxHash()`
 * @return {string}
 */
proto.corepb.Log.prototype.getTxHash_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
    this.getTxHash()))
}


/**
 * optional bytes tx_hash = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTxHash()`
 * @return {!Uint8Array}
 */
proto.corepb.Log.prototype.getTxHash_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
    this.getTxHash()))
}


/** @param {!(string|Uint8Array)} value */
proto.corepb.Log.prototype.setTxHash = function (value) {
  jspb.Message.setProto3BytesField(this, 5, value)
}


/**
 * optional uint32 tx_index = 6;
 * @return {number}
 */
proto.corepb.Log.prototype.getTxIndex = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0))
}


/** @param {number} value */
proto.corepb.Log.prototype.setTxIndex = function (value) {
  jspb.Message.setProto3IntField(this, 6, value)
}


/**
 * optional uint32 index = 8;
 * @return {number}
 */
proto.corepb.Log.prototype.getIndex = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0))
}


/** @param {number} value */
proto.corepb.Log.prototype.setIndex = function (value) {
  jspb.Message.setProto3IntField(this, 8, value)
}


/**
 * optional bool removed = 9;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.corepb.Log.prototype.getRemoved = function () {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 9, false))
}


/** @param {boolean} value */
proto.corepb.Log.prototype.setRemoved = function (value) {
  jspb.Message.setProto3BooleanField(this, 9, value)
}



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.corepb.HashLog.repeatedFields_ = [2]



if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.corepb.HashLog.prototype.toObject = function (opt_includeInstance) {
    return proto.corepb.HashLog.toObject(opt_includeInstance, this)
  }


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.corepb.HashLog} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.corepb.HashLog.toObject = function (includeInstance, msg) {
    var f, obj = {
      address: msg.getAddress_asB64(),
      topicsList: msg.getTopicsList_asB64(),
      data: msg.getData_asB64()
    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.corepb.HashLog}
 */
proto.corepb.HashLog.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.corepb.HashLog
  return proto.corepb.HashLog.deserializeBinaryFromReader(msg, reader)
}


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.corepb.HashLog} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.corepb.HashLog}
 */
proto.corepb.HashLog.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes())
      msg.setAddress(value)
      break
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes())
      msg.addTopics(value)
      break
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes())
      msg.setData(value)
      break
    default:
      reader.skipField()
      break
    }
  }
  return msg
}


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.corepb.HashLog.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.corepb.HashLog.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.corepb.HashLog} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.corepb.HashLog.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getAddress_asU8()
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    )
  }
  f = message.getTopicsList_asU8()
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      2,
      f
    )
  }
  f = message.getData_asU8()
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    )
  }
}


/**
 * optional bytes address = 1;
 * @return {!(string|Uint8Array)}
 */
proto.corepb.HashLog.prototype.getAddress = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""))
}


/**
 * optional bytes address = 1;
 * This is a type-conversion wrapper around `getAddress()`
 * @return {string}
 */
proto.corepb.HashLog.prototype.getAddress_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
    this.getAddress()))
}


/**
 * optional bytes address = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAddress()`
 * @return {!Uint8Array}
 */
proto.corepb.HashLog.prototype.getAddress_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
    this.getAddress()))
}


/** @param {!(string|Uint8Array)} value */
proto.corepb.HashLog.prototype.setAddress = function (value) {
  jspb.Message.setProto3BytesField(this, 1, value)
}


/**
 * repeated bytes topics = 2;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.corepb.HashLog.prototype.getTopicsList = function () {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 2))
}


/**
 * repeated bytes topics = 2;
 * This is a type-conversion wrapper around `getTopicsList()`
 * @return {!Array<string>}
 */
proto.corepb.HashLog.prototype.getTopicsList_asB64 = function () {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
    this.getTopicsList()))
}


/**
 * repeated bytes topics = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTopicsList()`
 * @return {!Array<!Uint8Array>}
 */
proto.corepb.HashLog.prototype.getTopicsList_asU8 = function () {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
    this.getTopicsList()))
}


/** @param {!(Array<!Uint8Array>|Array<string>)} value */
proto.corepb.HashLog.prototype.setTopicsList = function (value) {
  jspb.Message.setField(this, 2, value || [])
}


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 */
proto.corepb.HashLog.prototype.addTopics = function (value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index)
}


/**
 * Clears the list making it empty but non-null.
 */
proto.corepb.HashLog.prototype.clearTopicsList = function () {
  this.setTopicsList([])
}


/**
 * optional bytes data = 3;
 * @return {!(string|Uint8Array)}
 */
proto.corepb.HashLog.prototype.getData = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""))
}


/**
 * optional bytes data = 3;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.corepb.HashLog.prototype.getData_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
    this.getData()))
}


/**
 * optional bytes data = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.corepb.HashLog.prototype.getData_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
    this.getData()))
}


/** @param {!(string|Uint8Array)} value */
proto.corepb.HashLog.prototype.setData = function (value) {
  jspb.Message.setProto3BytesField(this, 3, value)
}


goog.object.extend(exports, proto.corepb)