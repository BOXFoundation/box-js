/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.Transaction', null, global);
goog.exportSymbol('proto.Transaction.Data', null, global);
goog.exportSymbol('proto.Transaction.TxIn', null, global);
goog.exportSymbol('proto.Transaction.TxIn.OutPoint', null, global);
goog.exportSymbol('proto.Transaction.TxOut', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Transaction = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Transaction.repeatedFields_, null);
};
goog.inherits(proto.Transaction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Transaction.displayName = 'proto.Transaction';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Transaction.repeatedFields_ = [2, 3];



if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.Transaction.prototype.toObject = function (opt_includeInstance) {
    return proto.Transaction.toObject(opt_includeInstance, this);
  };


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.Transaction} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.Transaction.toObject = function (includeInstance, msg) {
    var f, obj = {
      version: jspb.Message.getFieldWithDefault(msg, 1, 0),
      vinList: jspb.Message.toObjectList(msg.getVinList(),
        proto.Transaction.TxIn.toObject, includeInstance),
      voutList: jspb.Message.toObjectList(msg.getVoutList(),
        proto.Transaction.TxOut.toObject, includeInstance),
      data: (f = msg.getData()) && proto.Transaction.Data.toObject(includeInstance, f),
      magic: jspb.Message.getFieldWithDefault(msg, 5, 0),
      lockTime: jspb.Message.getFieldWithDefault(msg, 6, 0)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Transaction}
 */
proto.Transaction.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Transaction();
  return proto.Transaction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Transaction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Transaction}
 */
proto.Transaction.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setVersion(value);
        break;
      case 2:
        var value = new proto.Transaction.TxIn();
        reader.readMessage(value, proto.Transaction.TxIn.deserializeBinaryFromReader);
        msg.addVin(value);
        break;
      case 3:
        var value = new proto.Transaction.TxOut();
        reader.readMessage(value, proto.Transaction.TxOut.deserializeBinaryFromReader);
        msg.addVout(value);
        break;
      case 4:
        var value = new proto.Transaction.Data();
        reader.readMessage(value, proto.Transaction.Data.deserializeBinaryFromReader);
        msg.setData(value);
        break;
      case 5:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setMagic(value);
        break;
      case 6:
        var value = /** @type {number} */ (reader.readInt64());
        msg.setLockTime(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Transaction.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.Transaction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Transaction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Transaction.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getVersion();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getVinList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.Transaction.TxIn.serializeBinaryToWriter
    );
  }
  f = message.getVoutList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.Transaction.TxOut.serializeBinaryToWriter
    );
  }
  f = message.getData();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.Transaction.Data.serializeBinaryToWriter
    );
  }
  f = message.getMagic();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getLockTime();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Transaction.TxIn = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Transaction.TxIn, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Transaction.TxIn.displayName = 'proto.Transaction.TxIn';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.Transaction.TxIn.prototype.toObject = function (opt_includeInstance) {
    return proto.Transaction.TxIn.toObject(opt_includeInstance, this);
  };


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.Transaction.TxIn} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.Transaction.TxIn.toObject = function (includeInstance, msg) {
    var f, obj = {
      prevOutPoint: (f = msg.getPrevOutPoint()) && proto.Transaction.TxIn.OutPoint.toObject(includeInstance, f),
      scriptSig: msg.getScriptSig_asB64(),
      sequence: jspb.Message.getFieldWithDefault(msg, 3, 0)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Transaction.TxIn}
 */
proto.Transaction.TxIn.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Transaction.TxIn();
  return proto.Transaction.TxIn.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Transaction.TxIn} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Transaction.TxIn}
 */
proto.Transaction.TxIn.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.Transaction.TxIn.OutPoint();
        reader.readMessage(value, proto.Transaction.TxIn.OutPoint.deserializeBinaryFromReader);
        msg.setPrevOutPoint(value);
        break;
      case 2:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setScriptSig(value);
        break;
      case 3:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setSequence(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Transaction.TxIn.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.Transaction.TxIn.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Transaction.TxIn} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Transaction.TxIn.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getPrevOutPoint();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Transaction.TxIn.OutPoint.serializeBinaryToWriter
    );
  }
  f = message.getScriptSig_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getSequence();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Transaction.TxIn.OutPoint = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Transaction.TxIn.OutPoint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Transaction.TxIn.OutPoint.displayName = 'proto.Transaction.TxIn.OutPoint';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.Transaction.TxIn.OutPoint.prototype.toObject = function (opt_includeInstance) {
    return proto.Transaction.TxIn.OutPoint.toObject(opt_includeInstance, this);
  };


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.Transaction.TxIn.OutPoint} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.Transaction.TxIn.OutPoint.toObject = function (includeInstance, msg) {
    var f, obj = {
      hash: msg.getHash_asB64(),
      index: jspb.Message.getFieldWithDefault(msg, 2, 0)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Transaction.TxIn.OutPoint}
 */
proto.Transaction.TxIn.OutPoint.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Transaction.TxIn.OutPoint();
  return proto.Transaction.TxIn.OutPoint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Transaction.TxIn.OutPoint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Transaction.TxIn.OutPoint}
 */
proto.Transaction.TxIn.OutPoint.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setHash(value);
        break;
      case 2:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setIndex(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Transaction.TxIn.OutPoint.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.Transaction.TxIn.OutPoint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Transaction.TxIn.OutPoint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Transaction.TxIn.OutPoint.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getIndex();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional bytes hash = 1;
 * @return {!(string|Uint8Array)}
 */
proto.Transaction.TxIn.OutPoint.prototype.getHash = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes hash = 1;
 * This is a type-conversion wrapper around `getHash()`
 * @return {string}
 */
proto.Transaction.TxIn.OutPoint.prototype.getHash_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
    this.getHash()));
};


/**
 * optional bytes hash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHash()`
 * @return {!Uint8Array}
 */
proto.Transaction.TxIn.OutPoint.prototype.getHash_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
    this.getHash()));
};


/** @param {!(string|Uint8Array)} value */
proto.Transaction.TxIn.OutPoint.prototype.setHash = function (value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional uint32 index = 2;
 * @return {number}
 */
proto.Transaction.TxIn.OutPoint.prototype.getIndex = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.Transaction.TxIn.OutPoint.prototype.setIndex = function (value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional OutPoint prev_out_point = 1;
 * @return {?proto.Transaction.TxIn.OutPoint}
 */
proto.Transaction.TxIn.prototype.getPrevOutPoint = function () {
  return /** @type{?proto.Transaction.TxIn.OutPoint} */ (
    jspb.Message.getWrapperField(this, proto.Transaction.TxIn.OutPoint, 1));
};


/** @param {?proto.Transaction.TxIn.OutPoint|undefined} value */
proto.Transaction.TxIn.prototype.setPrevOutPoint = function (value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.Transaction.TxIn.prototype.clearPrevOutPoint = function () {
  this.setPrevOutPoint(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Transaction.TxIn.prototype.hasPrevOutPoint = function () {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes script_sig = 2;
 * @return {!(string|Uint8Array)}
 */
proto.Transaction.TxIn.prototype.getScriptSig = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes script_sig = 2;
 * This is a type-conversion wrapper around `getScriptSig()`
 * @return {string}
 */
proto.Transaction.TxIn.prototype.getScriptSig_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
    this.getScriptSig()));
};


/**
 * optional bytes script_sig = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getScriptSig()`
 * @return {!Uint8Array}
 */
proto.Transaction.TxIn.prototype.getScriptSig_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
    this.getScriptSig()));
};


/** @param {!(string|Uint8Array)} value */
proto.Transaction.TxIn.prototype.setScriptSig = function (value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional uint32 sequence = 3;
 * @return {number}
 */
proto.Transaction.TxIn.prototype.getSequence = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.Transaction.TxIn.prototype.setSequence = function (value) {
  jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Transaction.TxOut = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Transaction.TxOut, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Transaction.TxOut.displayName = 'proto.Transaction.TxOut';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.Transaction.TxOut.prototype.toObject = function (opt_includeInstance) {
    return proto.Transaction.TxOut.toObject(opt_includeInstance, this);
  };


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.Transaction.TxOut} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.Transaction.TxOut.toObject = function (includeInstance, msg) {
    var f, obj = {
      value: jspb.Message.getFieldWithDefault(msg, 1, 0),
      scriptPubKey: msg.getScriptPubKey_asB64()
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Transaction.TxOut}
 */
proto.Transaction.TxOut.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Transaction.TxOut();
  return proto.Transaction.TxOut.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Transaction.TxOut} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Transaction.TxOut}
 */
proto.Transaction.TxOut.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setValue(value);
        break;
      case 2:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setScriptPubKey(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Transaction.TxOut.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.Transaction.TxOut.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Transaction.TxOut} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Transaction.TxOut.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getScriptPubKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional uint64 value = 1;
 * @return {number}
 */
proto.Transaction.TxOut.prototype.getValue = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.Transaction.TxOut.prototype.setValue = function (value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bytes script_pub_key = 2;
 * @return {!(string|Uint8Array)}
 */
proto.Transaction.TxOut.prototype.getScriptPubKey = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes script_pub_key = 2;
 * This is a type-conversion wrapper around `getScriptPubKey()`
 * @return {string}
 */
proto.Transaction.TxOut.prototype.getScriptPubKey_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
    this.getScriptPubKey()));
};


/**
 * optional bytes script_pub_key = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getScriptPubKey()`
 * @return {!Uint8Array}
 */
proto.Transaction.TxOut.prototype.getScriptPubKey_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
    this.getScriptPubKey()));
};


/** @param {!(string|Uint8Array)} value */
proto.Transaction.TxOut.prototype.setScriptPubKey = function (value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Transaction.Data = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Transaction.Data, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Transaction.Data.displayName = 'proto.Transaction.Data';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.Transaction.Data.prototype.toObject = function (opt_includeInstance) {
    return proto.Transaction.Data.toObject(opt_includeInstance, this);
  };


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.Transaction.Data} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.Transaction.Data.toObject = function (includeInstance, msg) {
    var f, obj = {
      type: jspb.Message.getFieldWithDefault(msg, 1, 0),
      content: msg.getContent_asB64()
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Transaction.Data}
 */
proto.Transaction.Data.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Transaction.Data();
  return proto.Transaction.Data.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Transaction.Data} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Transaction.Data}
 */
proto.Transaction.Data.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setType(value);
        break;
      case 2:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setContent(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Transaction.Data.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.Transaction.Data.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Transaction.Data} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Transaction.Data.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getContent_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional int32 type = 1;
 * @return {number}
 */
proto.Transaction.Data.prototype.getType = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.Transaction.Data.prototype.setType = function (value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bytes content = 2;
 * @return {!(string|Uint8Array)}
 */
proto.Transaction.Data.prototype.getContent = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes content = 2;
 * This is a type-conversion wrapper around `getContent()`
 * @return {string}
 */
proto.Transaction.Data.prototype.getContent_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
    this.getContent()));
};


/**
 * optional bytes content = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContent()`
 * @return {!Uint8Array}
 */
proto.Transaction.Data.prototype.getContent_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
    this.getContent()));
};


/** @param {!(string|Uint8Array)} value */
proto.Transaction.Data.prototype.setContent = function (value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional int32 version = 1;
 * @return {number}
 */
proto.Transaction.prototype.getVersion = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.Transaction.prototype.setVersion = function (value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated TxIn vin = 2;
 * @return {!Array<!proto.Transaction.TxIn>}
 */
proto.Transaction.prototype.getVinList = function () {
  return /** @type{!Array<!proto.Transaction.TxIn>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Transaction.TxIn, 2));
};


/** @param {!Array<!proto.Transaction.TxIn>} value */
proto.Transaction.prototype.setVinList = function (value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.Transaction.TxIn=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Transaction.TxIn}
 */
proto.Transaction.prototype.addVin = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.Transaction.TxIn, opt_index);
};


proto.Transaction.prototype.clearVinList = function () {
  this.setVinList([]);
};


/**
 * repeated TxOut vout = 3;
 * @return {!Array<!proto.Transaction.TxOut>}
 */
proto.Transaction.prototype.getVoutList = function () {
  return /** @type{!Array<!proto.Transaction.TxOut>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Transaction.TxOut, 3));
};


/** @param {!Array<!proto.Transaction.TxOut>} value */
proto.Transaction.prototype.setVoutList = function (value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.Transaction.TxOut=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Transaction.TxOut}
 */
proto.Transaction.prototype.addVout = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.Transaction.TxOut, opt_index);
};


proto.Transaction.prototype.clearVoutList = function () {
  this.setVoutList([]);
};


/**
 * optional Data data = 4;
 * @return {?proto.Transaction.Data}
 */
proto.Transaction.prototype.getData = function () {
  return /** @type{?proto.Transaction.Data} */ (
    jspb.Message.getWrapperField(this, proto.Transaction.Data, 4));
};


/** @param {?proto.Transaction.Data|undefined} value */
proto.Transaction.prototype.setData = function (value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.Transaction.prototype.clearData = function () {
  this.setData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Transaction.prototype.hasData = function () {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional uint32 magic = 5;
 * @return {number}
 */
proto.Transaction.prototype.getMagic = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.Transaction.prototype.setMagic = function (value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int64 lock_time = 6;
 * @return {number}
 */
proto.Transaction.prototype.getLockTime = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.Transaction.prototype.setLockTime = function (value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


goog.object.extend(exports, proto);
