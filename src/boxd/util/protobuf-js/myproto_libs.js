/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!


goog.provide('proto.corepb.Block')
goog.provide('proto.corepb.BlockHeader')
goog.provide('proto.corepb.Data')
goog.provide('proto.corepb.IrreversibleInfo')
goog.provide('proto.corepb.Log')
goog.provide('proto.corepb.OutPoint')
goog.provide('proto.corepb.Receipt')
goog.provide('proto.corepb.Receipts')
goog.provide('proto.corepb.Transaction')
goog.provide('proto.corepb.TxIn')
goog.provide('proto.corepb.TxOut')
goog.provide('proto.corepb.UtxoWrap')
goog.provide('proto.rpcpb.AddNodeRequest')
goog.provide('proto.rpcpb.BaseResponse')
goog.provide('proto.rpcpb.BlockDetail')
goog.provide('proto.rpcpb.CallReq')
goog.provide('proto.rpcpb.CallResp')
goog.provide('proto.rpcpb.ClaimReq')
goog.provide('proto.rpcpb.ClaimResp')
goog.provide('proto.rpcpb.ContractInfo')
goog.provide('proto.rpcpb.DebugLevelRequest')
goog.provide('proto.rpcpb.FetchUtxosReq')
goog.provide('proto.rpcpb.FetchUtxosResp')
goog.provide('proto.rpcpb.GetBalanceReq')
goog.provide('proto.rpcpb.GetBalanceResp')
goog.provide('proto.rpcpb.GetBlockHashRequest')
goog.provide('proto.rpcpb.GetBlockHashResponse')
goog.provide('proto.rpcpb.GetBlockHeaderResponse')
goog.provide('proto.rpcpb.GetBlockHeightRequest')
goog.provide('proto.rpcpb.GetBlockHeightResponse')
goog.provide('proto.rpcpb.GetBlockRequest')
goog.provide('proto.rpcpb.GetBlockResponse')
goog.provide('proto.rpcpb.GetFeePriceRequest')
goog.provide('proto.rpcpb.GetFeePriceResponse')
goog.provide('proto.rpcpb.GetNetworkIDRequest')
goog.provide('proto.rpcpb.GetNetworkIDResponse')
goog.provide('proto.rpcpb.GetNodeInfoRequest')
goog.provide('proto.rpcpb.GetNodeInfoResponse')
goog.provide('proto.rpcpb.GetRawTransactionRequest')
goog.provide('proto.rpcpb.GetRawTransactionResponse')
goog.provide('proto.rpcpb.GetTokenBalanceReq')
goog.provide('proto.rpcpb.ListenBlocksReq')
goog.provide('proto.rpcpb.MakeContractTxReq')
goog.provide('proto.rpcpb.MakeContractTxResp')
goog.provide('proto.rpcpb.MakeSplitAddrTxReq')
goog.provide('proto.rpcpb.MakeSplitAddrTxResp')
goog.provide('proto.rpcpb.MakeTokenIssueTxReq')
goog.provide('proto.rpcpb.MakeTokenIssueTxResp')
goog.provide('proto.rpcpb.MakeTokenTransferTxReq')
goog.provide('proto.rpcpb.MakeTxReq')
goog.provide('proto.rpcpb.MakeTxResp')
goog.provide('proto.rpcpb.Node')
goog.provide('proto.rpcpb.NonceReq')
goog.provide('proto.rpcpb.NonceResp')
goog.provide('proto.rpcpb.SendRawTransactionReq')
goog.provide('proto.rpcpb.SendTransactionReq')
goog.provide('proto.rpcpb.SendTransactionResp')
goog.provide('proto.rpcpb.SplitContractInfo')
goog.provide('proto.rpcpb.TokenIssueInfo')
goog.provide('proto.rpcpb.TokenTag')
goog.provide('proto.rpcpb.TokenTransferInfo')
goog.provide('proto.rpcpb.TxDetail')
goog.provide('proto.rpcpb.TxInDetail')
goog.provide('proto.rpcpb.TxOutDetail')
goog.provide('proto.rpcpb.TxOutDetail.TxOutType')
goog.provide('proto.rpcpb.TxStatus')
goog.provide('proto.rpcpb.UpdateNetworkIDRequest')
goog.provide('proto.rpcpb.Utxo')
goog.provide('proto.rpcpb.ViewBlockDetailReq')
goog.provide('proto.rpcpb.ViewBlockDetailResp')
goog.provide('proto.rpcpb.ViewTxDetailReq')
goog.provide('proto.rpcpb.ViewTxDetailResp')

goog.require('jspb.BinaryReader')
goog.require('jspb.BinaryWriter')
goog.require('jspb.Message')

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.corepb.BlockHeader = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.corepb.BlockHeader, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.corepb.BlockHeader.displayName = 'proto.corepb.BlockHeader'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.corepb.IrreversibleInfo = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.corepb.IrreversibleInfo.repeatedFields_, null)
}
goog.inherits(proto.corepb.IrreversibleInfo, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.corepb.IrreversibleInfo.displayName = 'proto.corepb.IrreversibleInfo'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.corepb.Block = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.corepb.Block.repeatedFields_, null)
}
goog.inherits(proto.corepb.Block, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.corepb.Block.displayName = 'proto.corepb.Block'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.corepb.Transaction = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.corepb.Transaction.repeatedFields_, null)
}
goog.inherits(proto.corepb.Transaction, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.corepb.Transaction.displayName = 'proto.corepb.Transaction'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.corepb.TxIn = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.corepb.TxIn, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.corepb.TxIn.displayName = 'proto.corepb.TxIn'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.corepb.TxOut = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.corepb.TxOut, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.corepb.TxOut.displayName = 'proto.corepb.TxOut'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.corepb.OutPoint = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.corepb.OutPoint, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.corepb.OutPoint.displayName = 'proto.corepb.OutPoint'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.corepb.Data = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.corepb.Data, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.corepb.Data.displayName = 'proto.corepb.Data'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.corepb.UtxoWrap = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.corepb.UtxoWrap, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.corepb.UtxoWrap.displayName = 'proto.corepb.UtxoWrap'
}



if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.corepb.BlockHeader.prototype.toObject = function (opt_includeInstance) {
    return proto.corepb.BlockHeader.toObject(opt_includeInstance, this)
  }


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.corepb.BlockHeader} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.corepb.BlockHeader.toObject = function (includeInstance, msg) {
    var f, obj = {
      version: jspb.Message.getFieldWithDefault(msg, 1, 0),
      prevBlockHash: msg.getPrevBlockHash_asB64(),
      txsRoot: msg.getTxsRoot_asB64(),
      internalTxsRoot: msg.getInternalTxsRoot_asB64(),
      utxoRoot: msg.getUtxoRoot_asB64(),
      receiptHash: msg.getReceiptHash_asB64(),
      timeStamp: jspb.Message.getFieldWithDefault(msg, 7, 0),
      magic: jspb.Message.getFieldWithDefault(msg, 8, 0),
      periodHash: msg.getPeriodHash_asB64(),
      candidatesHash: msg.getCandidatesHash_asB64(),
      rootHash: msg.getRootHash_asB64(),
      height: jspb.Message.getFieldWithDefault(msg, 12, 0),
      gasUsed: jspb.Message.getFieldWithDefault(msg, 13, 0),
      bookKeeper: msg.getBookKeeper_asB64()
    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.corepb.BlockHeader}
 */
proto.corepb.BlockHeader.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.corepb.BlockHeader
  return proto.corepb.BlockHeader.deserializeBinaryFromReader(msg, reader)
}


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.corepb.BlockHeader} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.corepb.BlockHeader}
 */
proto.corepb.BlockHeader.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readInt32())
        msg.setVersion(value)
        break
      case 2:
        var value = /** @type {!Uint8Array} */ (reader.readBytes())
        msg.setPrevBlockHash(value)
        break
      case 3:
        var value = /** @type {!Uint8Array} */ (reader.readBytes())
        msg.setTxsRoot(value)
        break
      case 4:
        var value = /** @type {!Uint8Array} */ (reader.readBytes())
        msg.setInternalTxsRoot(value)
        break
      case 5:
        var value = /** @type {!Uint8Array} */ (reader.readBytes())
        msg.setUtxoRoot(value)
        break
      case 6:
        var value = /** @type {!Uint8Array} */ (reader.readBytes())
        msg.setReceiptHash(value)
        break
      case 7:
        var value = /** @type {number} */ (reader.readInt64())
        msg.setTimeStamp(value)
        break
      case 8:
        var value = /** @type {number} */ (reader.readUint32())
        msg.setMagic(value)
        break
      case 9:
        var value = /** @type {!Uint8Array} */ (reader.readBytes())
        msg.setPeriodHash(value)
        break
      case 10:
        var value = /** @type {!Uint8Array} */ (reader.readBytes())
        msg.setCandidatesHash(value)
        break
      case 11:
        var value = /** @type {!Uint8Array} */ (reader.readBytes())
        msg.setRootHash(value)
        break
      case 12:
        var value = /** @type {number} */ (reader.readUint32())
        msg.setHeight(value)
        break
      case 13:
        var value = /** @type {number} */ (reader.readUint64())
        msg.setGasUsed(value)
        break
      case 14:
        var value = /** @type {!Uint8Array} */ (reader.readBytes())
        msg.setBookKeeper(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.corepb.BlockHeader.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.corepb.BlockHeader.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.corepb.BlockHeader} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.corepb.BlockHeader.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getVersion()
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    )
  }
  f = message.getPrevBlockHash_asU8()
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    )
  }
  f = message.getTxsRoot_asU8()
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    )
  }
  f = message.getInternalTxsRoot_asU8()
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    )
  }
  f = message.getUtxoRoot_asU8()
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    )
  }
  f = message.getReceiptHash_asU8()
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    )
  }
  f = message.getTimeStamp()
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    )
  }
  f = message.getMagic()
  if (f !== 0) {
    writer.writeUint32(
      8,
      f
    )
  }
  f = message.getPeriodHash_asU8()
  if (f.length > 0) {
    writer.writeBytes(
      9,
      f
    )
  }
  f = message.getCandidatesHash_asU8()
  if (f.length > 0) {
    writer.writeBytes(
      10,
      f
    )
  }
  f = message.getRootHash_asU8()
  if (f.length > 0) {
    writer.writeBytes(
      11,
      f
    )
  }
  f = message.getHeight()
  if (f !== 0) {
    writer.writeUint32(
      12,
      f
    )
  }
  f = message.getGasUsed()
  if (f !== 0) {
    writer.writeUint64(
      13,
      f
    )
  }
  f = message.getBookKeeper_asU8()
  if (f.length > 0) {
    writer.writeBytes(
      14,
      f
    )
  }
}


/**
 * optional int32 version = 1;
 * @return {number}
 */
proto.corepb.BlockHeader.prototype.getVersion = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0))
}


/** @param {number} value */
proto.corepb.BlockHeader.prototype.setVersion = function (value) {
  jspb.Message.setProto3IntField(this, 1, value)
}


/**
 * optional bytes prev_block_hash = 2;
 * @return {!(string|Uint8Array)}
 */
proto.corepb.BlockHeader.prototype.getPrevBlockHash = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ''))
}


/**
 * optional bytes prev_block_hash = 2;
 * This is a type-conversion wrapper around `getPrevBlockHash()`
 * @return {string}
 */
proto.corepb.BlockHeader.prototype.getPrevBlockHash_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
    this.getPrevBlockHash()))
}


/**
 * optional bytes prev_block_hash = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPrevBlockHash()`
 * @return {!Uint8Array}
 */
proto.corepb.BlockHeader.prototype.getPrevBlockHash_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
    this.getPrevBlockHash()))
}


/** @param {!(string|Uint8Array)} value */
proto.corepb.BlockHeader.prototype.setPrevBlockHash = function (value) {
  jspb.Message.setProto3BytesField(this, 2, value)
}


/**
 * optional bytes txs_root = 3;
 * @return {!(string|Uint8Array)}
 */
proto.corepb.BlockHeader.prototype.getTxsRoot = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ''))
}


/**
 * optional bytes txs_root = 3;
 * This is a type-conversion wrapper around `getTxsRoot()`
 * @return {string}
 */
proto.corepb.BlockHeader.prototype.getTxsRoot_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
    this.getTxsRoot()))
}


/**
 * optional bytes txs_root = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTxsRoot()`
 * @return {!Uint8Array}
 */
proto.corepb.BlockHeader.prototype.getTxsRoot_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
    this.getTxsRoot()))
}


/** @param {!(string|Uint8Array)} value */
proto.corepb.BlockHeader.prototype.setTxsRoot = function (value) {
  jspb.Message.setProto3BytesField(this, 3, value)
}


/**
 * optional bytes internal_txs_root = 4;
 * @return {!(string|Uint8Array)}
 */
proto.corepb.BlockHeader.prototype.getInternalTxsRoot = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ''))
}


/**
 * optional bytes internal_txs_root = 4;
 * This is a type-conversion wrapper around `getInternalTxsRoot()`
 * @return {string}
 */
proto.corepb.BlockHeader.prototype.getInternalTxsRoot_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
    this.getInternalTxsRoot()))
}


/**
 * optional bytes internal_txs_root = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getInternalTxsRoot()`
 * @return {!Uint8Array}
 */
proto.corepb.BlockHeader.prototype.getInternalTxsRoot_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
    this.getInternalTxsRoot()))
}


/** @param {!(string|Uint8Array)} value */
proto.corepb.BlockHeader.prototype.setInternalTxsRoot = function (value) {
  jspb.Message.setProto3BytesField(this, 4, value)
}


/**
 * optional bytes utxo_root = 5;
 * @return {!(string|Uint8Array)}
 */
proto.corepb.BlockHeader.prototype.getUtxoRoot = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ''))
}


/**
 * optional bytes utxo_root = 5;
 * This is a type-conversion wrapper around `getUtxoRoot()`
 * @return {string}
 */
proto.corepb.BlockHeader.prototype.getUtxoRoot_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
    this.getUtxoRoot()))
}


/**
 * optional bytes utxo_root = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getUtxoRoot()`
 * @return {!Uint8Array}
 */
proto.corepb.BlockHeader.prototype.getUtxoRoot_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
    this.getUtxoRoot()))
}


/** @param {!(string|Uint8Array)} value */
proto.corepb.BlockHeader.prototype.setUtxoRoot = function (value) {
  jspb.Message.setProto3BytesField(this, 5, value)
}


/**
 * optional bytes receipt_hash = 6;
 * @return {!(string|Uint8Array)}
 */
proto.corepb.BlockHeader.prototype.getReceiptHash = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ''))
}


/**
 * optional bytes receipt_hash = 6;
 * This is a type-conversion wrapper around `getReceiptHash()`
 * @return {string}
 */
proto.corepb.BlockHeader.prototype.getReceiptHash_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
    this.getReceiptHash()))
}


/**
 * optional bytes receipt_hash = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getReceiptHash()`
 * @return {!Uint8Array}
 */
proto.corepb.BlockHeader.prototype.getReceiptHash_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
    this.getReceiptHash()))
}


/** @param {!(string|Uint8Array)} value */
proto.corepb.BlockHeader.prototype.setReceiptHash = function (value) {
  jspb.Message.setProto3BytesField(this, 6, value)
}


/**
 * optional int64 time_stamp = 7;
 * @return {number}
 */
proto.corepb.BlockHeader.prototype.getTimeStamp = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0))
}


/** @param {number} value */
proto.corepb.BlockHeader.prototype.setTimeStamp = function (value) {
  jspb.Message.setProto3IntField(this, 7, value)
}


/**
 * optional uint32 magic = 8;
 * @return {number}
 */
proto.corepb.BlockHeader.prototype.getMagic = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0))
}


/** @param {number} value */
proto.corepb.BlockHeader.prototype.setMagic = function (value) {
  jspb.Message.setProto3IntField(this, 8, value)
}


/**
 * optional bytes period_hash = 9;
 * @return {!(string|Uint8Array)}
 */
proto.corepb.BlockHeader.prototype.getPeriodHash = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 9, ''))
}


/**
 * optional bytes period_hash = 9;
 * This is a type-conversion wrapper around `getPeriodHash()`
 * @return {string}
 */
proto.corepb.BlockHeader.prototype.getPeriodHash_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
    this.getPeriodHash()))
}


/**
 * optional bytes period_hash = 9;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPeriodHash()`
 * @return {!Uint8Array}
 */
proto.corepb.BlockHeader.prototype.getPeriodHash_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
    this.getPeriodHash()))
}


/** @param {!(string|Uint8Array)} value */
proto.corepb.BlockHeader.prototype.setPeriodHash = function (value) {
  jspb.Message.setProto3BytesField(this, 9, value)
}


/**
 * optional bytes candidates_hash = 10;
 * @return {!(string|Uint8Array)}
 */
proto.corepb.BlockHeader.prototype.getCandidatesHash = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 10, ''))
}


/**
 * optional bytes candidates_hash = 10;
 * This is a type-conversion wrapper around `getCandidatesHash()`
 * @return {string}
 */
proto.corepb.BlockHeader.prototype.getCandidatesHash_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
    this.getCandidatesHash()))
}


/**
 * optional bytes candidates_hash = 10;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCandidatesHash()`
 * @return {!Uint8Array}
 */
proto.corepb.BlockHeader.prototype.getCandidatesHash_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
    this.getCandidatesHash()))
}


/** @param {!(string|Uint8Array)} value */
proto.corepb.BlockHeader.prototype.setCandidatesHash = function (value) {
  jspb.Message.setProto3BytesField(this, 10, value)
}


/**
 * optional bytes root_hash = 11;
 * @return {!(string|Uint8Array)}
 */
proto.corepb.BlockHeader.prototype.getRootHash = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 11, ''))
}


/**
 * optional bytes root_hash = 11;
 * This is a type-conversion wrapper around `getRootHash()`
 * @return {string}
 */
proto.corepb.BlockHeader.prototype.getRootHash_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
    this.getRootHash()))
}


/**
 * optional bytes root_hash = 11;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRootHash()`
 * @return {!Uint8Array}
 */
proto.corepb.BlockHeader.prototype.getRootHash_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
    this.getRootHash()))
}


/** @param {!(string|Uint8Array)} value */
proto.corepb.BlockHeader.prototype.setRootHash = function (value) {
  jspb.Message.setProto3BytesField(this, 11, value)
}


/**
 * optional uint32 height = 12;
 * @return {number}
 */
proto.corepb.BlockHeader.prototype.getHeight = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0))
}


/** @param {number} value */
proto.corepb.BlockHeader.prototype.setHeight = function (value) {
  jspb.Message.setProto3IntField(this, 12, value)
}


/**
 * optional uint64 gas_used = 13;
 * @return {number}
 */
proto.corepb.BlockHeader.prototype.getGasUsed = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0))
}


/** @param {number} value */
proto.corepb.BlockHeader.prototype.setGasUsed = function (value) {
  jspb.Message.setProto3IntField(this, 13, value)
}


/**
 * optional bytes book_keeper = 14;
 * @return {!(string|Uint8Array)}
 */
proto.corepb.BlockHeader.prototype.getBookKeeper = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 14, ''))
}


/**
 * optional bytes book_keeper = 14;
 * This is a type-conversion wrapper around `getBookKeeper()`
 * @return {string}
 */
proto.corepb.BlockHeader.prototype.getBookKeeper_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
    this.getBookKeeper()))
}


/**
 * optional bytes book_keeper = 14;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBookKeeper()`
 * @return {!Uint8Array}
 */
proto.corepb.BlockHeader.prototype.getBookKeeper_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
    this.getBookKeeper()))
}


/** @param {!(string|Uint8Array)} value */
proto.corepb.BlockHeader.prototype.setBookKeeper = function (value) {
  jspb.Message.setProto3BytesField(this, 14, value)
}



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.corepb.IrreversibleInfo.repeatedFields_ = [2]



if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.corepb.IrreversibleInfo.prototype.toObject = function (opt_includeInstance) {
    return proto.corepb.IrreversibleInfo.toObject(opt_includeInstance, this)
  }


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.corepb.IrreversibleInfo} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.corepb.IrreversibleInfo.toObject = function (includeInstance, msg) {
    var f, obj = {
      hash: msg.getHash_asB64(),
      signaturesList: msg.getSignaturesList_asB64()
    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.corepb.IrreversibleInfo}
 */
proto.corepb.IrreversibleInfo.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.corepb.IrreversibleInfo
  return proto.corepb.IrreversibleInfo.deserializeBinaryFromReader(msg, reader)
}


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.corepb.IrreversibleInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.corepb.IrreversibleInfo}
 */
proto.corepb.IrreversibleInfo.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {!Uint8Array} */ (reader.readBytes())
        msg.setHash(value)
        break
      case 2:
        var value = /** @type {!Uint8Array} */ (reader.readBytes())
        msg.addSignatures(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.corepb.IrreversibleInfo.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.corepb.IrreversibleInfo.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.corepb.IrreversibleInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.corepb.IrreversibleInfo.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getHash_asU8()
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    )
  }
  f = message.getSignaturesList_asU8()
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      2,
      f
    )
  }
}


/**
 * optional bytes hash = 1;
 * @return {!(string|Uint8Array)}
 */
proto.corepb.IrreversibleInfo.prototype.getHash = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
}


/**
 * optional bytes hash = 1;
 * This is a type-conversion wrapper around `getHash()`
 * @return {string}
 */
proto.corepb.IrreversibleInfo.prototype.getHash_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
    this.getHash()))
}


/**
 * optional bytes hash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHash()`
 * @return {!Uint8Array}
 */
proto.corepb.IrreversibleInfo.prototype.getHash_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
    this.getHash()))
}


/** @param {!(string|Uint8Array)} value */
proto.corepb.IrreversibleInfo.prototype.setHash = function (value) {
  jspb.Message.setProto3BytesField(this, 1, value)
}


/**
 * repeated bytes signatures = 2;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.corepb.IrreversibleInfo.prototype.getSignaturesList = function () {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 2))
}


/**
 * repeated bytes signatures = 2;
 * This is a type-conversion wrapper around `getSignaturesList()`
 * @return {!Array<string>}
 */
proto.corepb.IrreversibleInfo.prototype.getSignaturesList_asB64 = function () {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
    this.getSignaturesList()))
}


/**
 * repeated bytes signatures = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignaturesList()`
 * @return {!Array<!Uint8Array>}
 */
proto.corepb.IrreversibleInfo.prototype.getSignaturesList_asU8 = function () {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
    this.getSignaturesList()))
}


/** @param {!(Array<!Uint8Array>|Array<string>)} value */
proto.corepb.IrreversibleInfo.prototype.setSignaturesList = function (value) {
  jspb.Message.setField(this, 2, value || [])
}


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 */
proto.corepb.IrreversibleInfo.prototype.addSignatures = function (value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index)
}


/**
 * Clears the list making it empty but non-null.
 */
proto.corepb.IrreversibleInfo.prototype.clearSignaturesList = function () {
  this.setSignaturesList([])
}



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.corepb.Block.repeatedFields_ = [2, 3]



if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.corepb.Block.prototype.toObject = function (opt_includeInstance) {
    return proto.corepb.Block.toObject(opt_includeInstance, this)
  }


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.corepb.Block} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.corepb.Block.toObject = function (includeInstance, msg) {
    var f, obj = {
      header: (f = msg.getHeader()) && proto.corepb.BlockHeader.toObject(includeInstance, f),
      txsList: jspb.Message.toObjectList(msg.getTxsList(),
        proto.corepb.Transaction.toObject, includeInstance),
      internalTxsList: jspb.Message.toObjectList(msg.getInternalTxsList(),
        proto.corepb.Transaction.toObject, includeInstance),
      signature: msg.getSignature_asB64(),
      irreversibleInfo: (f = msg.getIrreversibleInfo()) && proto.corepb.IrreversibleInfo.toObject(includeInstance, f)
    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.corepb.Block}
 */
proto.corepb.Block.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.corepb.Block
  return proto.corepb.Block.deserializeBinaryFromReader(msg, reader)
}


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.corepb.Block} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.corepb.Block}
 */
proto.corepb.Block.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = new proto.corepb.BlockHeader
        reader.readMessage(value, proto.corepb.BlockHeader.deserializeBinaryFromReader)
        msg.setHeader(value)
        break
      case 2:
        var value = new proto.corepb.Transaction
        reader.readMessage(value, proto.corepb.Transaction.deserializeBinaryFromReader)
        msg.addTxs(value)
        break
      case 3:
        var value = new proto.corepb.Transaction
        reader.readMessage(value, proto.corepb.Transaction.deserializeBinaryFromReader)
        msg.addInternalTxs(value)
        break
      case 4:
        var value = /** @type {!Uint8Array} */ (reader.readBytes())
        msg.setSignature(value)
        break
      case 5:
        var value = new proto.corepb.IrreversibleInfo
        reader.readMessage(value, proto.corepb.IrreversibleInfo.deserializeBinaryFromReader)
        msg.setIrreversibleInfo(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.corepb.Block.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.corepb.Block.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.corepb.Block} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.corepb.Block.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getHeader()
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.corepb.BlockHeader.serializeBinaryToWriter
    )
  }
  f = message.getTxsList()
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.corepb.Transaction.serializeBinaryToWriter
    )
  }
  f = message.getInternalTxsList()
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.corepb.Transaction.serializeBinaryToWriter
    )
  }
  f = message.getSignature_asU8()
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    )
  }
  f = message.getIrreversibleInfo()
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.corepb.IrreversibleInfo.serializeBinaryToWriter
    )
  }
}


/**
 * optional BlockHeader header = 1;
 * @return {?proto.corepb.BlockHeader}
 */
proto.corepb.Block.prototype.getHeader = function () {
  return /** @type{?proto.corepb.BlockHeader} */ (
    jspb.Message.getWrapperField(this, proto.corepb.BlockHeader, 1))
}


/** @param {?proto.corepb.BlockHeader|undefined} value */
proto.corepb.Block.prototype.setHeader = function (value) {
  jspb.Message.setWrapperField(this, 1, value)
}


/**
 * Clears the message field making it undefined.
 */
proto.corepb.Block.prototype.clearHeader = function () {
  this.setHeader(undefined)
}


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.corepb.Block.prototype.hasHeader = function () {
  return jspb.Message.getField(this, 1) != null
}


/**
 * repeated Transaction txs = 2;
 * @return {!Array<!proto.corepb.Transaction>}
 */
proto.corepb.Block.prototype.getTxsList = function () {
  return /** @type{!Array<!proto.corepb.Transaction>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.corepb.Transaction, 2))
}


/** @param {!Array<!proto.corepb.Transaction>} value */
proto.corepb.Block.prototype.setTxsList = function (value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value)
}


/**
 * @param {!proto.corepb.Transaction=} opt_value
 * @param {number=} opt_index
 * @return {!proto.corepb.Transaction}
 */
proto.corepb.Block.prototype.addTxs = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.corepb.Transaction, opt_index)
}


/**
 * Clears the list making it empty but non-null.
 */
proto.corepb.Block.prototype.clearTxsList = function () {
  this.setTxsList([])
}


/**
 * repeated Transaction internal_txs = 3;
 * @return {!Array<!proto.corepb.Transaction>}
 */
proto.corepb.Block.prototype.getInternalTxsList = function () {
  return /** @type{!Array<!proto.corepb.Transaction>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.corepb.Transaction, 3))
}


/** @param {!Array<!proto.corepb.Transaction>} value */
proto.corepb.Block.prototype.setInternalTxsList = function (value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value)
}


/**
 * @param {!proto.corepb.Transaction=} opt_value
 * @param {number=} opt_index
 * @return {!proto.corepb.Transaction}
 */
proto.corepb.Block.prototype.addInternalTxs = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.corepb.Transaction, opt_index)
}


/**
 * Clears the list making it empty but non-null.
 */
proto.corepb.Block.prototype.clearInternalTxsList = function () {
  this.setInternalTxsList([])
}


/**
 * optional bytes signature = 4;
 * @return {!(string|Uint8Array)}
 */
proto.corepb.Block.prototype.getSignature = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ''))
}


/**
 * optional bytes signature = 4;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.corepb.Block.prototype.getSignature_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
    this.getSignature()))
}


/**
 * optional bytes signature = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.corepb.Block.prototype.getSignature_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
    this.getSignature()))
}


/** @param {!(string|Uint8Array)} value */
proto.corepb.Block.prototype.setSignature = function (value) {
  jspb.Message.setProto3BytesField(this, 4, value)
}


/**
 * optional IrreversibleInfo irreversible_info = 5;
 * @return {?proto.corepb.IrreversibleInfo}
 */
proto.corepb.Block.prototype.getIrreversibleInfo = function () {
  return /** @type{?proto.corepb.IrreversibleInfo} */ (
    jspb.Message.getWrapperField(this, proto.corepb.IrreversibleInfo, 5))
}


/** @param {?proto.corepb.IrreversibleInfo|undefined} value */
proto.corepb.Block.prototype.setIrreversibleInfo = function (value) {
  jspb.Message.setWrapperField(this, 5, value)
}


/**
 * Clears the message field making it undefined.
 */
proto.corepb.Block.prototype.clearIrreversibleInfo = function () {
  this.setIrreversibleInfo(undefined)
}


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.corepb.Block.prototype.hasIrreversibleInfo = function () {
  return jspb.Message.getField(this, 5) != null
}



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.corepb.Transaction.repeatedFields_ = [2, 3]



if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.corepb.Transaction.prototype.toObject = function (opt_includeInstance) {
    return proto.corepb.Transaction.toObject(opt_includeInstance, this)
  }


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.corepb.Transaction} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.corepb.Transaction.toObject = function (includeInstance, msg) {
    var f, obj = {
      version: jspb.Message.getFieldWithDefault(msg, 1, 0),
      vinList: jspb.Message.toObjectList(msg.getVinList(),
        proto.corepb.TxIn.toObject, includeInstance),
      voutList: jspb.Message.toObjectList(msg.getVoutList(),
        proto.corepb.TxOut.toObject, includeInstance),
      data: (f = msg.getData()) && proto.corepb.Data.toObject(includeInstance, f),
      magic: jspb.Message.getFieldWithDefault(msg, 5, 0),
      lockTime: jspb.Message.getFieldWithDefault(msg, 6, 0)
    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.corepb.Transaction}
 */
proto.corepb.Transaction.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.corepb.Transaction
  return proto.corepb.Transaction.deserializeBinaryFromReader(msg, reader)
}


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.corepb.Transaction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.corepb.Transaction}
 */
proto.corepb.Transaction.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readInt32())
        msg.setVersion(value)
        break
      case 2:
        var value = new proto.corepb.TxIn
        reader.readMessage(value, proto.corepb.TxIn.deserializeBinaryFromReader)
        msg.addVin(value)
        break
      case 3:
        var value = new proto.corepb.TxOut
        reader.readMessage(value, proto.corepb.TxOut.deserializeBinaryFromReader)
        msg.addVout(value)
        break
      case 4:
        var value = new proto.corepb.Data
        reader.readMessage(value, proto.corepb.Data.deserializeBinaryFromReader)
        msg.setData(value)
        break
      case 5:
        var value = /** @type {number} */ (reader.readUint32())
        msg.setMagic(value)
        break
      case 6:
        var value = /** @type {number} */ (reader.readInt64())
        msg.setLockTime(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.corepb.Transaction.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.corepb.Transaction.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.corepb.Transaction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.corepb.Transaction.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getVersion()
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    )
  }
  f = message.getVinList()
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.corepb.TxIn.serializeBinaryToWriter
    )
  }
  f = message.getVoutList()
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.corepb.TxOut.serializeBinaryToWriter
    )
  }
  f = message.getData()
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.corepb.Data.serializeBinaryToWriter
    )
  }
  f = message.getMagic()
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    )
  }
  f = message.getLockTime()
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    )
  }
}


/**
 * optional int32 version = 1;
 * @return {number}
 */
proto.corepb.Transaction.prototype.getVersion = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0))
}


/** @param {number} value */
proto.corepb.Transaction.prototype.setVersion = function (value) {
  jspb.Message.setProto3IntField(this, 1, value)
}


/**
 * repeated TxIn vin = 2;
 * @return {!Array<!proto.corepb.TxIn>}
 */
proto.corepb.Transaction.prototype.getVinList = function () {
  return /** @type{!Array<!proto.corepb.TxIn>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.corepb.TxIn, 2))
}


/** @param {!Array<!proto.corepb.TxIn>} value */
proto.corepb.Transaction.prototype.setVinList = function (value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value)
}


/**
 * @param {!proto.corepb.TxIn=} opt_value
 * @param {number=} opt_index
 * @return {!proto.corepb.TxIn}
 */
proto.corepb.Transaction.prototype.addVin = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.corepb.TxIn, opt_index)
}


/**
 * Clears the list making it empty but non-null.
 */
proto.corepb.Transaction.prototype.clearVinList = function () {
  this.setVinList([])
}


/**
 * repeated TxOut vout = 3;
 * @return {!Array<!proto.corepb.TxOut>}
 */
proto.corepb.Transaction.prototype.getVoutList = function () {
  return /** @type{!Array<!proto.corepb.TxOut>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.corepb.TxOut, 3))
}


/** @param {!Array<!proto.corepb.TxOut>} value */
proto.corepb.Transaction.prototype.setVoutList = function (value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value)
}


/**
 * @param {!proto.corepb.TxOut=} opt_value
 * @param {number=} opt_index
 * @return {!proto.corepb.TxOut}
 */
proto.corepb.Transaction.prototype.addVout = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.corepb.TxOut, opt_index)
}


/**
 * Clears the list making it empty but non-null.
 */
proto.corepb.Transaction.prototype.clearVoutList = function () {
  this.setVoutList([])
}


/**
 * optional Data data = 4;
 * @return {?proto.corepb.Data}
 */
proto.corepb.Transaction.prototype.getData = function () {
  return /** @type{?proto.corepb.Data} */ (
    jspb.Message.getWrapperField(this, proto.corepb.Data, 4))
}


/** @param {?proto.corepb.Data|undefined} value */
proto.corepb.Transaction.prototype.setData = function (value) {
  jspb.Message.setWrapperField(this, 4, value)
}


/**
 * Clears the message field making it undefined.
 */
proto.corepb.Transaction.prototype.clearData = function () {
  this.setData(undefined)
}


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.corepb.Transaction.prototype.hasData = function () {
  return jspb.Message.getField(this, 4) != null
}


/**
 * optional uint32 magic = 5;
 * @return {number}
 */
proto.corepb.Transaction.prototype.getMagic = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0))
}


/** @param {number} value */
proto.corepb.Transaction.prototype.setMagic = function (value) {
  jspb.Message.setProto3IntField(this, 5, value)
}


/**
 * optional int64 lock_time = 6;
 * @return {number}
 */
proto.corepb.Transaction.prototype.getLockTime = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0))
}


/** @param {number} value */
proto.corepb.Transaction.prototype.setLockTime = function (value) {
  jspb.Message.setProto3IntField(this, 6, value)
}





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.corepb.TxIn.prototype.toObject = function (opt_includeInstance) {
    return proto.corepb.TxIn.toObject(opt_includeInstance, this)
  }


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.corepb.TxIn} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.corepb.TxIn.toObject = function (includeInstance, msg) {
    var f, obj = {
      prevOutPoint: (f = msg.getPrevOutPoint()) && proto.corepb.OutPoint.toObject(includeInstance, f),
      scriptSig: msg.getScriptSig_asB64(),
      sequence: jspb.Message.getFieldWithDefault(msg, 3, 0)
    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.corepb.TxIn}
 */
proto.corepb.TxIn.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.corepb.TxIn
  return proto.corepb.TxIn.deserializeBinaryFromReader(msg, reader)
}


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.corepb.TxIn} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.corepb.TxIn}
 */
proto.corepb.TxIn.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = new proto.corepb.OutPoint
        reader.readMessage(value, proto.corepb.OutPoint.deserializeBinaryFromReader)
        msg.setPrevOutPoint(value)
        break
      case 2:
        var value = /** @type {!Uint8Array} */ (reader.readBytes())
        msg.setScriptSig(value)
        break
      case 3:
        var value = /** @type {number} */ (reader.readUint32())
        msg.setSequence(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.corepb.TxIn.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.corepb.TxIn.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.corepb.TxIn} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.corepb.TxIn.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getPrevOutPoint()
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.corepb.OutPoint.serializeBinaryToWriter
    )
  }
  f = message.getScriptSig_asU8()
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    )
  }
  f = message.getSequence()
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    )
  }
}


/**
 * optional OutPoint prev_out_point = 1;
 * @return {?proto.corepb.OutPoint}
 */
proto.corepb.TxIn.prototype.getPrevOutPoint = function () {
  return /** @type{?proto.corepb.OutPoint} */ (
    jspb.Message.getWrapperField(this, proto.corepb.OutPoint, 1))
}


/** @param {?proto.corepb.OutPoint|undefined} value */
proto.corepb.TxIn.prototype.setPrevOutPoint = function (value) {
  jspb.Message.setWrapperField(this, 1, value)
}


/**
 * Clears the message field making it undefined.
 */
proto.corepb.TxIn.prototype.clearPrevOutPoint = function () {
  this.setPrevOutPoint(undefined)
}


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.corepb.TxIn.prototype.hasPrevOutPoint = function () {
  return jspb.Message.getField(this, 1) != null
}


/**
 * optional bytes script_sig = 2;
 * @return {!(string|Uint8Array)}
 */
proto.corepb.TxIn.prototype.getScriptSig = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ''))
}


/**
 * optional bytes script_sig = 2;
 * This is a type-conversion wrapper around `getScriptSig()`
 * @return {string}
 */
proto.corepb.TxIn.prototype.getScriptSig_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
    this.getScriptSig()))
}


/**
 * optional bytes script_sig = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getScriptSig()`
 * @return {!Uint8Array}
 */
proto.corepb.TxIn.prototype.getScriptSig_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
    this.getScriptSig()))
}


/** @param {!(string|Uint8Array)} value */
proto.corepb.TxIn.prototype.setScriptSig = function (value) {
  jspb.Message.setProto3BytesField(this, 2, value)
}


/**
 * optional uint32 sequence = 3;
 * @return {number}
 */
proto.corepb.TxIn.prototype.getSequence = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0))
}


/** @param {number} value */
proto.corepb.TxIn.prototype.setSequence = function (value) {
  jspb.Message.setProto3IntField(this, 3, value)
}





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.corepb.TxOut.prototype.toObject = function (opt_includeInstance) {
    return proto.corepb.TxOut.toObject(opt_includeInstance, this)
  }


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.corepb.TxOut} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.corepb.TxOut.toObject = function (includeInstance, msg) {
    var f, obj = {
      value: jspb.Message.getFieldWithDefault(msg, 1, 0),
      scriptPubKey: msg.getScriptPubKey_asB64()
    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.corepb.TxOut}
 */
proto.corepb.TxOut.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.corepb.TxOut
  return proto.corepb.TxOut.deserializeBinaryFromReader(msg, reader)
}


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.corepb.TxOut} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.corepb.TxOut}
 */
proto.corepb.TxOut.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readUint64())
        msg.setValue(value)
        break
      case 2:
        var value = /** @type {!Uint8Array} */ (reader.readBytes())
        msg.setScriptPubKey(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.corepb.TxOut.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.corepb.TxOut.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.corepb.TxOut} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.corepb.TxOut.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getValue()
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    )
  }
  f = message.getScriptPubKey_asU8()
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    )
  }
}


/**
 * optional uint64 value = 1;
 * @return {number}
 */
proto.corepb.TxOut.prototype.getValue = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0))
}


/** @param {number} value */
proto.corepb.TxOut.prototype.setValue = function (value) {
  jspb.Message.setProto3IntField(this, 1, value)
}


/**
 * optional bytes script_pub_key = 2;
 * @return {!(string|Uint8Array)}
 */
proto.corepb.TxOut.prototype.getScriptPubKey = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ''))
}


/**
 * optional bytes script_pub_key = 2;
 * This is a type-conversion wrapper around `getScriptPubKey()`
 * @return {string}
 */
proto.corepb.TxOut.prototype.getScriptPubKey_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
    this.getScriptPubKey()))
}


/**
 * optional bytes script_pub_key = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getScriptPubKey()`
 * @return {!Uint8Array}
 */
proto.corepb.TxOut.prototype.getScriptPubKey_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
    this.getScriptPubKey()))
}


/** @param {!(string|Uint8Array)} value */
proto.corepb.TxOut.prototype.setScriptPubKey = function (value) {
  jspb.Message.setProto3BytesField(this, 2, value)
}





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.corepb.OutPoint.prototype.toObject = function (opt_includeInstance) {
    return proto.corepb.OutPoint.toObject(opt_includeInstance, this)
  }


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.corepb.OutPoint} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.corepb.OutPoint.toObject = function (includeInstance, msg) {
    var f, obj = {
      hash: msg.getHash_asB64(),
      index: jspb.Message.getFieldWithDefault(msg, 2, 0)
    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.corepb.OutPoint}
 */
proto.corepb.OutPoint.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.corepb.OutPoint
  return proto.corepb.OutPoint.deserializeBinaryFromReader(msg, reader)
}


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.corepb.OutPoint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.corepb.OutPoint}
 */
proto.corepb.OutPoint.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {!Uint8Array} */ (reader.readBytes())
        msg.setHash(value)
        break
      case 2:
        var value = /** @type {number} */ (reader.readUint32())
        msg.setIndex(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.corepb.OutPoint.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.corepb.OutPoint.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.corepb.OutPoint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.corepb.OutPoint.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getHash_asU8()
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    )
  }
  f = message.getIndex()
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    )
  }
}


/**
 * optional bytes hash = 1;
 * @return {!(string|Uint8Array)}
 */
proto.corepb.OutPoint.prototype.getHash = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
}


/**
 * optional bytes hash = 1;
 * This is a type-conversion wrapper around `getHash()`
 * @return {string}
 */
proto.corepb.OutPoint.prototype.getHash_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
    this.getHash()))
}


/**
 * optional bytes hash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHash()`
 * @return {!Uint8Array}
 */
proto.corepb.OutPoint.prototype.getHash_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
    this.getHash()))
}


/** @param {!(string|Uint8Array)} value */
proto.corepb.OutPoint.prototype.setHash = function (value) {
  jspb.Message.setProto3BytesField(this, 1, value)
}


/**
 * optional uint32 index = 2;
 * @return {number}
 */
proto.corepb.OutPoint.prototype.getIndex = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0))
}


/** @param {number} value */
proto.corepb.OutPoint.prototype.setIndex = function (value) {
  jspb.Message.setProto3IntField(this, 2, value)
}





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.corepb.Data.prototype.toObject = function (opt_includeInstance) {
    return proto.corepb.Data.toObject(opt_includeInstance, this)
  }


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.corepb.Data} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.corepb.Data.toObject = function (includeInstance, msg) {
    var f, obj = {
      type: jspb.Message.getFieldWithDefault(msg, 1, 0),
      content: msg.getContent_asB64()
    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.corepb.Data}
 */
proto.corepb.Data.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.corepb.Data
  return proto.corepb.Data.deserializeBinaryFromReader(msg, reader)
}


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.corepb.Data} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.corepb.Data}
 */
proto.corepb.Data.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readInt32())
        msg.setType(value)
        break
      case 2:
        var value = /** @type {!Uint8Array} */ (reader.readBytes())
        msg.setContent(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.corepb.Data.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.corepb.Data.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.corepb.Data} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.corepb.Data.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getType()
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    )
  }
  f = message.getContent_asU8()
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    )
  }
}


/**
 * optional int32 type = 1;
 * @return {number}
 */
proto.corepb.Data.prototype.getType = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0))
}


/** @param {number} value */
proto.corepb.Data.prototype.setType = function (value) {
  jspb.Message.setProto3IntField(this, 1, value)
}


/**
 * optional bytes content = 2;
 * @return {!(string|Uint8Array)}
 */
proto.corepb.Data.prototype.getContent = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ''))
}


/**
 * optional bytes content = 2;
 * This is a type-conversion wrapper around `getContent()`
 * @return {string}
 */
proto.corepb.Data.prototype.getContent_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
    this.getContent()))
}


/**
 * optional bytes content = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContent()`
 * @return {!Uint8Array}
 */
proto.corepb.Data.prototype.getContent_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
    this.getContent()))
}


/** @param {!(string|Uint8Array)} value */
proto.corepb.Data.prototype.setContent = function (value) {
  jspb.Message.setProto3BytesField(this, 2, value)
}





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.corepb.UtxoWrap.prototype.toObject = function (opt_includeInstance) {
    return proto.corepb.UtxoWrap.toObject(opt_includeInstance, this)
  }


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.corepb.UtxoWrap} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.corepb.UtxoWrap.toObject = function (includeInstance, msg) {
    var f, obj = {
      output: (f = msg.getOutput()) && proto.corepb.TxOut.toObject(includeInstance, f),
      blockHeight: jspb.Message.getFieldWithDefault(msg, 2, 0),
      isSpent: jspb.Message.getFieldWithDefault(msg, 3, false),
      isCoinbase: jspb.Message.getFieldWithDefault(msg, 4, false)
    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.corepb.UtxoWrap}
 */
proto.corepb.UtxoWrap.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.corepb.UtxoWrap
  return proto.corepb.UtxoWrap.deserializeBinaryFromReader(msg, reader)
}


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.corepb.UtxoWrap} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.corepb.UtxoWrap}
 */
proto.corepb.UtxoWrap.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = new proto.corepb.TxOut
        reader.readMessage(value, proto.corepb.TxOut.deserializeBinaryFromReader)
        msg.setOutput(value)
        break
      case 2:
        var value = /** @type {number} */ (reader.readUint32())
        msg.setBlockHeight(value)
        break
      case 3:
        var value = /** @type {boolean} */ (reader.readBool())
        msg.setIsSpent(value)
        break
      case 4:
        var value = /** @type {boolean} */ (reader.readBool())
        msg.setIsCoinbase(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.corepb.UtxoWrap.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.corepb.UtxoWrap.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.corepb.UtxoWrap} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.corepb.UtxoWrap.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getOutput()
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.corepb.TxOut.serializeBinaryToWriter
    )
  }
  f = message.getBlockHeight()
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    )
  }
  f = message.getIsSpent()
  if (f) {
    writer.writeBool(
      3,
      f
    )
  }
  f = message.getIsCoinbase()
  if (f) {
    writer.writeBool(
      4,
      f
    )
  }
}


/**
 * optional TxOut output = 1;
 * @return {?proto.corepb.TxOut}
 */
proto.corepb.UtxoWrap.prototype.getOutput = function () {
  return /** @type{?proto.corepb.TxOut} */ (
    jspb.Message.getWrapperField(this, proto.corepb.TxOut, 1))
}


/** @param {?proto.corepb.TxOut|undefined} value */
proto.corepb.UtxoWrap.prototype.setOutput = function (value) {
  jspb.Message.setWrapperField(this, 1, value)
}


/**
 * Clears the message field making it undefined.
 */
proto.corepb.UtxoWrap.prototype.clearOutput = function () {
  this.setOutput(undefined)
}


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.corepb.UtxoWrap.prototype.hasOutput = function () {
  return jspb.Message.getField(this, 1) != null
}


/**
 * optional uint32 block_height = 2;
 * @return {number}
 */
proto.corepb.UtxoWrap.prototype.getBlockHeight = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0))
}


/** @param {number} value */
proto.corepb.UtxoWrap.prototype.setBlockHeight = function (value) {
  jspb.Message.setProto3IntField(this, 2, value)
}


/**
 * optional bool is_spent = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.corepb.UtxoWrap.prototype.getIsSpent = function () {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false))
}


/** @param {boolean} value */
proto.corepb.UtxoWrap.prototype.setIsSpent = function (value) {
  jspb.Message.setProto3BooleanField(this, 3, value)
}


/**
 * optional bool is_coinbase = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.corepb.UtxoWrap.prototype.getIsCoinbase = function () {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false))
}


/** @param {boolean} value */
proto.corepb.UtxoWrap.prototype.setIsCoinbase = function (value) {
  jspb.Message.setProto3BooleanField(this, 4, value)
}


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpcpb.Utxo = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.rpcpb.Utxo, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpcpb.Utxo.displayName = 'proto.rpcpb.Utxo'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpcpb.BaseResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.rpcpb.BaseResponse, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpcpb.BaseResponse.displayName = 'proto.rpcpb.BaseResponse'
}



if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.rpcpb.Utxo.prototype.toObject = function (opt_includeInstance) {
    return proto.rpcpb.Utxo.toObject(opt_includeInstance, this)
  }


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.rpcpb.Utxo} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.rpcpb.Utxo.toObject = function (includeInstance, msg) {
    var f, obj = {
      outPoint: (f = msg.getOutPoint()) && proto.corepb.OutPoint.toObject(includeInstance, f),
      txOut: (f = msg.getTxOut()) && proto.corepb.TxOut.toObject(includeInstance, f),
      blockHeight: jspb.Message.getFieldWithDefault(msg, 3, 0),
      isCoinbase: jspb.Message.getFieldWithDefault(msg, 4, false),
      isSpent: jspb.Message.getFieldWithDefault(msg, 5, false)
    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpcpb.Utxo}
 */
proto.rpcpb.Utxo.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.rpcpb.Utxo
  return proto.rpcpb.Utxo.deserializeBinaryFromReader(msg, reader)
}


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpcpb.Utxo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpcpb.Utxo}
 */
proto.rpcpb.Utxo.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = new proto.corepb.OutPoint
        reader.readMessage(value, proto.corepb.OutPoint.deserializeBinaryFromReader)
        msg.setOutPoint(value)
        break
      case 2:
        var value = new proto.corepb.TxOut
        reader.readMessage(value, proto.corepb.TxOut.deserializeBinaryFromReader)
        msg.setTxOut(value)
        break
      case 3:
        var value = /** @type {number} */ (reader.readUint32())
        msg.setBlockHeight(value)
        break
      case 4:
        var value = /** @type {boolean} */ (reader.readBool())
        msg.setIsCoinbase(value)
        break
      case 5:
        var value = /** @type {boolean} */ (reader.readBool())
        msg.setIsSpent(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpcpb.Utxo.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.rpcpb.Utxo.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpcpb.Utxo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpcpb.Utxo.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getOutPoint()
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.corepb.OutPoint.serializeBinaryToWriter
    )
  }
  f = message.getTxOut()
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.corepb.TxOut.serializeBinaryToWriter
    )
  }
  f = message.getBlockHeight()
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    )
  }
  f = message.getIsCoinbase()
  if (f) {
    writer.writeBool(
      4,
      f
    )
  }
  f = message.getIsSpent()
  if (f) {
    writer.writeBool(
      5,
      f
    )
  }
}


/**
 * optional corepb.OutPoint out_point = 1;
 * @return {?proto.corepb.OutPoint}
 */
proto.rpcpb.Utxo.prototype.getOutPoint = function () {
  return /** @type{?proto.corepb.OutPoint} */ (
    jspb.Message.getWrapperField(this, proto.corepb.OutPoint, 1))
}


/** @param {?proto.corepb.OutPoint|undefined} value */
proto.rpcpb.Utxo.prototype.setOutPoint = function (value) {
  jspb.Message.setWrapperField(this, 1, value)
}


/**
 * Clears the message field making it undefined.
 */
proto.rpcpb.Utxo.prototype.clearOutPoint = function () {
  this.setOutPoint(undefined)
}


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rpcpb.Utxo.prototype.hasOutPoint = function () {
  return jspb.Message.getField(this, 1) != null
}


/**
 * optional corepb.TxOut tx_out = 2;
 * @return {?proto.corepb.TxOut}
 */
proto.rpcpb.Utxo.prototype.getTxOut = function () {
  return /** @type{?proto.corepb.TxOut} */ (
    jspb.Message.getWrapperField(this, proto.corepb.TxOut, 2))
}


/** @param {?proto.corepb.TxOut|undefined} value */
proto.rpcpb.Utxo.prototype.setTxOut = function (value) {
  jspb.Message.setWrapperField(this, 2, value)
}


/**
 * Clears the message field making it undefined.
 */
proto.rpcpb.Utxo.prototype.clearTxOut = function () {
  this.setTxOut(undefined)
}


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rpcpb.Utxo.prototype.hasTxOut = function () {
  return jspb.Message.getField(this, 2) != null
}


/**
 * optional uint32 block_height = 3;
 * @return {number}
 */
proto.rpcpb.Utxo.prototype.getBlockHeight = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0))
}


/** @param {number} value */
proto.rpcpb.Utxo.prototype.setBlockHeight = function (value) {
  jspb.Message.setProto3IntField(this, 3, value)
}


/**
 * optional bool is_coinbase = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.rpcpb.Utxo.prototype.getIsCoinbase = function () {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false))
}


/** @param {boolean} value */
proto.rpcpb.Utxo.prototype.setIsCoinbase = function (value) {
  jspb.Message.setProto3BooleanField(this, 4, value)
}


/**
 * optional bool is_spent = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.rpcpb.Utxo.prototype.getIsSpent = function () {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false))
}


/** @param {boolean} value */
proto.rpcpb.Utxo.prototype.setIsSpent = function (value) {
  jspb.Message.setProto3BooleanField(this, 5, value)
}





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.rpcpb.BaseResponse.prototype.toObject = function (opt_includeInstance) {
    return proto.rpcpb.BaseResponse.toObject(opt_includeInstance, this)
  }


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.rpcpb.BaseResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.rpcpb.BaseResponse.toObject = function (includeInstance, msg) {
    var f, obj = {
      code: jspb.Message.getFieldWithDefault(msg, 1, 0),
      message: jspb.Message.getFieldWithDefault(msg, 2, '')
    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpcpb.BaseResponse}
 */
proto.rpcpb.BaseResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.rpcpb.BaseResponse
  return proto.rpcpb.BaseResponse.deserializeBinaryFromReader(msg, reader)
}


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpcpb.BaseResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpcpb.BaseResponse}
 */
proto.rpcpb.BaseResponse.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readInt32())
        msg.setCode(value)
        break
      case 2:
        var value = /** @type {string} */ (reader.readString())
        msg.setMessage(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpcpb.BaseResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.rpcpb.BaseResponse.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpcpb.BaseResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpcpb.BaseResponse.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getCode()
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    )
  }
  f = message.getMessage()
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    )
  }
}


/**
 * optional int32 code = 1;
 * @return {number}
 */
proto.rpcpb.BaseResponse.prototype.getCode = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0))
}


/** @param {number} value */
proto.rpcpb.BaseResponse.prototype.setCode = function (value) {
  jspb.Message.setProto3IntField(this, 1, value)
}


/**
 * optional string message = 2;
 * @return {string}
 */
proto.rpcpb.BaseResponse.prototype.getMessage = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''))
}


/** @param {string} value */
proto.rpcpb.BaseResponse.prototype.setMessage = function (value) {
  jspb.Message.setProto3StringField(this, 2, value)
}


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpcpb.DebugLevelRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.rpcpb.DebugLevelRequest, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpcpb.DebugLevelRequest.displayName = 'proto.rpcpb.DebugLevelRequest'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpcpb.UpdateNetworkIDRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.rpcpb.UpdateNetworkIDRequest, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpcpb.UpdateNetworkIDRequest.displayName = 'proto.rpcpb.UpdateNetworkIDRequest'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpcpb.GetNetworkIDRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.rpcpb.GetNetworkIDRequest, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpcpb.GetNetworkIDRequest.displayName = 'proto.rpcpb.GetNetworkIDRequest'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpcpb.GetNetworkIDResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.rpcpb.GetNetworkIDResponse, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpcpb.GetNetworkIDResponse.displayName = 'proto.rpcpb.GetNetworkIDResponse'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpcpb.AddNodeRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.rpcpb.AddNodeRequest, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpcpb.AddNodeRequest.displayName = 'proto.rpcpb.AddNodeRequest'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpcpb.GetBlockHeightRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.rpcpb.GetBlockHeightRequest, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpcpb.GetBlockHeightRequest.displayName = 'proto.rpcpb.GetBlockHeightRequest'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpcpb.GetBlockHeightResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.rpcpb.GetBlockHeightResponse, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpcpb.GetBlockHeightResponse.displayName = 'proto.rpcpb.GetBlockHeightResponse'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpcpb.GetBlockHashRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.rpcpb.GetBlockHashRequest, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpcpb.GetBlockHashRequest.displayName = 'proto.rpcpb.GetBlockHashRequest'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpcpb.GetBlockHashResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.rpcpb.GetBlockHashResponse, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpcpb.GetBlockHashResponse.displayName = 'proto.rpcpb.GetBlockHashResponse'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpcpb.GetBlockRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.rpcpb.GetBlockRequest, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpcpb.GetBlockRequest.displayName = 'proto.rpcpb.GetBlockRequest'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpcpb.GetBlockHeaderResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.rpcpb.GetBlockHeaderResponse, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpcpb.GetBlockHeaderResponse.displayName = 'proto.rpcpb.GetBlockHeaderResponse'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpcpb.GetBlockResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.rpcpb.GetBlockResponse, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpcpb.GetBlockResponse.displayName = 'proto.rpcpb.GetBlockResponse'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpcpb.Node = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rpcpb.Node.repeatedFields_, null)
}
goog.inherits(proto.rpcpb.Node, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpcpb.Node.displayName = 'proto.rpcpb.Node'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpcpb.GetNodeInfoRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.rpcpb.GetNodeInfoRequest, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpcpb.GetNodeInfoRequest.displayName = 'proto.rpcpb.GetNodeInfoRequest'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpcpb.GetNodeInfoResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rpcpb.GetNodeInfoResponse.repeatedFields_, null)
}
goog.inherits(proto.rpcpb.GetNodeInfoResponse, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpcpb.GetNodeInfoResponse.displayName = 'proto.rpcpb.GetNodeInfoResponse'
}



if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.rpcpb.DebugLevelRequest.prototype.toObject = function (opt_includeInstance) {
    return proto.rpcpb.DebugLevelRequest.toObject(opt_includeInstance, this)
  }


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.rpcpb.DebugLevelRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.rpcpb.DebugLevelRequest.toObject = function (includeInstance, msg) {
    var f, obj = {
      level: jspb.Message.getFieldWithDefault(msg, 1, '')
    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpcpb.DebugLevelRequest}
 */
proto.rpcpb.DebugLevelRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.rpcpb.DebugLevelRequest
  return proto.rpcpb.DebugLevelRequest.deserializeBinaryFromReader(msg, reader)
}


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpcpb.DebugLevelRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpcpb.DebugLevelRequest}
 */
proto.rpcpb.DebugLevelRequest.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString())
        msg.setLevel(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpcpb.DebugLevelRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.rpcpb.DebugLevelRequest.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpcpb.DebugLevelRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpcpb.DebugLevelRequest.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getLevel()
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    )
  }
}


/**
 * optional string level = 1;
 * @return {string}
 */
proto.rpcpb.DebugLevelRequest.prototype.getLevel = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
}


/** @param {string} value */
proto.rpcpb.DebugLevelRequest.prototype.setLevel = function (value) {
  jspb.Message.setProto3StringField(this, 1, value)
}





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.rpcpb.UpdateNetworkIDRequest.prototype.toObject = function (opt_includeInstance) {
    return proto.rpcpb.UpdateNetworkIDRequest.toObject(opt_includeInstance, this)
  }


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.rpcpb.UpdateNetworkIDRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.rpcpb.UpdateNetworkIDRequest.toObject = function (includeInstance, msg) {
    var f, obj = {
      id: jspb.Message.getFieldWithDefault(msg, 1, 0)
    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpcpb.UpdateNetworkIDRequest}
 */
proto.rpcpb.UpdateNetworkIDRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.rpcpb.UpdateNetworkIDRequest
  return proto.rpcpb.UpdateNetworkIDRequest.deserializeBinaryFromReader(msg, reader)
}


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpcpb.UpdateNetworkIDRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpcpb.UpdateNetworkIDRequest}
 */
proto.rpcpb.UpdateNetworkIDRequest.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readUint32())
        msg.setId(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpcpb.UpdateNetworkIDRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.rpcpb.UpdateNetworkIDRequest.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpcpb.UpdateNetworkIDRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpcpb.UpdateNetworkIDRequest.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getId()
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    )
  }
}


/**
 * optional uint32 id = 1;
 * @return {number}
 */
proto.rpcpb.UpdateNetworkIDRequest.prototype.getId = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0))
}


/** @param {number} value */
proto.rpcpb.UpdateNetworkIDRequest.prototype.setId = function (value) {
  jspb.Message.setProto3IntField(this, 1, value)
}





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.rpcpb.GetNetworkIDRequest.prototype.toObject = function (opt_includeInstance) {
    return proto.rpcpb.GetNetworkIDRequest.toObject(opt_includeInstance, this)
  }


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.rpcpb.GetNetworkIDRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.rpcpb.GetNetworkIDRequest.toObject = function (includeInstance, msg) {
    var f, obj = {

    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpcpb.GetNetworkIDRequest}
 */
proto.rpcpb.GetNetworkIDRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.rpcpb.GetNetworkIDRequest
  return proto.rpcpb.GetNetworkIDRequest.deserializeBinaryFromReader(msg, reader)
}


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpcpb.GetNetworkIDRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpcpb.GetNetworkIDRequest}
 */
proto.rpcpb.GetNetworkIDRequest.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      default:
        reader.skipField()
        break
    }
  }
  return msg
}


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpcpb.GetNetworkIDRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.rpcpb.GetNetworkIDRequest.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpcpb.GetNetworkIDRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpcpb.GetNetworkIDRequest.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
}





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.rpcpb.GetNetworkIDResponse.prototype.toObject = function (opt_includeInstance) {
    return proto.rpcpb.GetNetworkIDResponse.toObject(opt_includeInstance, this)
  }


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.rpcpb.GetNetworkIDResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.rpcpb.GetNetworkIDResponse.toObject = function (includeInstance, msg) {
    var f, obj = {
      id: jspb.Message.getFieldWithDefault(msg, 1, 0),
      literal: jspb.Message.getFieldWithDefault(msg, 2, '')
    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpcpb.GetNetworkIDResponse}
 */
proto.rpcpb.GetNetworkIDResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.rpcpb.GetNetworkIDResponse
  return proto.rpcpb.GetNetworkIDResponse.deserializeBinaryFromReader(msg, reader)
}


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpcpb.GetNetworkIDResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpcpb.GetNetworkIDResponse}
 */
proto.rpcpb.GetNetworkIDResponse.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readUint32())
        msg.setId(value)
        break
      case 2:
        var value = /** @type {string} */ (reader.readString())
        msg.setLiteral(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpcpb.GetNetworkIDResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.rpcpb.GetNetworkIDResponse.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpcpb.GetNetworkIDResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpcpb.GetNetworkIDResponse.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getId()
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    )
  }
  f = message.getLiteral()
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    )
  }
}


/**
 * optional uint32 id = 1;
 * @return {number}
 */
proto.rpcpb.GetNetworkIDResponse.prototype.getId = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0))
}


/** @param {number} value */
proto.rpcpb.GetNetworkIDResponse.prototype.setId = function (value) {
  jspb.Message.setProto3IntField(this, 1, value)
}


/**
 * optional string literal = 2;
 * @return {string}
 */
proto.rpcpb.GetNetworkIDResponse.prototype.getLiteral = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''))
}


/** @param {string} value */
proto.rpcpb.GetNetworkIDResponse.prototype.setLiteral = function (value) {
  jspb.Message.setProto3StringField(this, 2, value)
}





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.rpcpb.AddNodeRequest.prototype.toObject = function (opt_includeInstance) {
    return proto.rpcpb.AddNodeRequest.toObject(opt_includeInstance, this)
  }


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.rpcpb.AddNodeRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.rpcpb.AddNodeRequest.toObject = function (includeInstance, msg) {
    var f, obj = {
      node: jspb.Message.getFieldWithDefault(msg, 1, '')
    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpcpb.AddNodeRequest}
 */
proto.rpcpb.AddNodeRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.rpcpb.AddNodeRequest
  return proto.rpcpb.AddNodeRequest.deserializeBinaryFromReader(msg, reader)
}


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpcpb.AddNodeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpcpb.AddNodeRequest}
 */
proto.rpcpb.AddNodeRequest.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString())
        msg.setNode(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpcpb.AddNodeRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.rpcpb.AddNodeRequest.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpcpb.AddNodeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpcpb.AddNodeRequest.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getNode()
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    )
  }
}


/**
 * optional string node = 1;
 * @return {string}
 */
proto.rpcpb.AddNodeRequest.prototype.getNode = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
}


/** @param {string} value */
proto.rpcpb.AddNodeRequest.prototype.setNode = function (value) {
  jspb.Message.setProto3StringField(this, 1, value)
}





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.rpcpb.GetBlockHeightRequest.prototype.toObject = function (opt_includeInstance) {
    return proto.rpcpb.GetBlockHeightRequest.toObject(opt_includeInstance, this)
  }


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.rpcpb.GetBlockHeightRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.rpcpb.GetBlockHeightRequest.toObject = function (includeInstance, msg) {
    var f, obj = {

    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpcpb.GetBlockHeightRequest}
 */
proto.rpcpb.GetBlockHeightRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.rpcpb.GetBlockHeightRequest
  return proto.rpcpb.GetBlockHeightRequest.deserializeBinaryFromReader(msg, reader)
}


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpcpb.GetBlockHeightRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpcpb.GetBlockHeightRequest}
 */
proto.rpcpb.GetBlockHeightRequest.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      default:
        reader.skipField()
        break
    }
  }
  return msg
}


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpcpb.GetBlockHeightRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.rpcpb.GetBlockHeightRequest.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpcpb.GetBlockHeightRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpcpb.GetBlockHeightRequest.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
}





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.rpcpb.GetBlockHeightResponse.prototype.toObject = function (opt_includeInstance) {
    return proto.rpcpb.GetBlockHeightResponse.toObject(opt_includeInstance, this)
  }


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.rpcpb.GetBlockHeightResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.rpcpb.GetBlockHeightResponse.toObject = function (includeInstance, msg) {
    var f, obj = {
      code: jspb.Message.getFieldWithDefault(msg, 1, 0),
      message: jspb.Message.getFieldWithDefault(msg, 2, ''),
      height: jspb.Message.getFieldWithDefault(msg, 3, 0)
    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpcpb.GetBlockHeightResponse}
 */
proto.rpcpb.GetBlockHeightResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.rpcpb.GetBlockHeightResponse
  return proto.rpcpb.GetBlockHeightResponse.deserializeBinaryFromReader(msg, reader)
}


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpcpb.GetBlockHeightResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpcpb.GetBlockHeightResponse}
 */
proto.rpcpb.GetBlockHeightResponse.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readInt32())
        msg.setCode(value)
        break
      case 2:
        var value = /** @type {string} */ (reader.readString())
        msg.setMessage(value)
        break
      case 3:
        var value = /** @type {number} */ (reader.readUint32())
        msg.setHeight(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpcpb.GetBlockHeightResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.rpcpb.GetBlockHeightResponse.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpcpb.GetBlockHeightResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpcpb.GetBlockHeightResponse.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getCode()
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    )
  }
  f = message.getMessage()
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    )
  }
  f = message.getHeight()
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    )
  }
}


/**
 * optional int32 code = 1;
 * @return {number}
 */
proto.rpcpb.GetBlockHeightResponse.prototype.getCode = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0))
}


/** @param {number} value */
proto.rpcpb.GetBlockHeightResponse.prototype.setCode = function (value) {
  jspb.Message.setProto3IntField(this, 1, value)
}


/**
 * optional string message = 2;
 * @return {string}
 */
proto.rpcpb.GetBlockHeightResponse.prototype.getMessage = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''))
}


/** @param {string} value */
proto.rpcpb.GetBlockHeightResponse.prototype.setMessage = function (value) {
  jspb.Message.setProto3StringField(this, 2, value)
}


/**
 * optional uint32 height = 3;
 * @return {number}
 */
proto.rpcpb.GetBlockHeightResponse.prototype.getHeight = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0))
}


/** @param {number} value */
proto.rpcpb.GetBlockHeightResponse.prototype.setHeight = function (value) {
  jspb.Message.setProto3IntField(this, 3, value)
}





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.rpcpb.GetBlockHashRequest.prototype.toObject = function (opt_includeInstance) {
    return proto.rpcpb.GetBlockHashRequest.toObject(opt_includeInstance, this)
  }


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.rpcpb.GetBlockHashRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.rpcpb.GetBlockHashRequest.toObject = function (includeInstance, msg) {
    var f, obj = {
      height: jspb.Message.getFieldWithDefault(msg, 1, 0)
    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpcpb.GetBlockHashRequest}
 */
proto.rpcpb.GetBlockHashRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.rpcpb.GetBlockHashRequest
  return proto.rpcpb.GetBlockHashRequest.deserializeBinaryFromReader(msg, reader)
}


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpcpb.GetBlockHashRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpcpb.GetBlockHashRequest}
 */
proto.rpcpb.GetBlockHashRequest.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readUint32())
        msg.setHeight(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpcpb.GetBlockHashRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.rpcpb.GetBlockHashRequest.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpcpb.GetBlockHashRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpcpb.GetBlockHashRequest.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getHeight()
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    )
  }
}


/**
 * optional uint32 height = 1;
 * @return {number}
 */
proto.rpcpb.GetBlockHashRequest.prototype.getHeight = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0))
}


/** @param {number} value */
proto.rpcpb.GetBlockHashRequest.prototype.setHeight = function (value) {
  jspb.Message.setProto3IntField(this, 1, value)
}





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.rpcpb.GetBlockHashResponse.prototype.toObject = function (opt_includeInstance) {
    return proto.rpcpb.GetBlockHashResponse.toObject(opt_includeInstance, this)
  }


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.rpcpb.GetBlockHashResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.rpcpb.GetBlockHashResponse.toObject = function (includeInstance, msg) {
    var f, obj = {
      code: jspb.Message.getFieldWithDefault(msg, 1, 0),
      message: jspb.Message.getFieldWithDefault(msg, 2, ''),
      hash: jspb.Message.getFieldWithDefault(msg, 3, '')
    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpcpb.GetBlockHashResponse}
 */
proto.rpcpb.GetBlockHashResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.rpcpb.GetBlockHashResponse
  return proto.rpcpb.GetBlockHashResponse.deserializeBinaryFromReader(msg, reader)
}


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpcpb.GetBlockHashResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpcpb.GetBlockHashResponse}
 */
proto.rpcpb.GetBlockHashResponse.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readInt32())
        msg.setCode(value)
        break
      case 2:
        var value = /** @type {string} */ (reader.readString())
        msg.setMessage(value)
        break
      case 3:
        var value = /** @type {string} */ (reader.readString())
        msg.setHash(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpcpb.GetBlockHashResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.rpcpb.GetBlockHashResponse.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpcpb.GetBlockHashResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpcpb.GetBlockHashResponse.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getCode()
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    )
  }
  f = message.getMessage()
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    )
  }
  f = message.getHash()
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    )
  }
}


/**
 * optional int32 code = 1;
 * @return {number}
 */
proto.rpcpb.GetBlockHashResponse.prototype.getCode = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0))
}


/** @param {number} value */
proto.rpcpb.GetBlockHashResponse.prototype.setCode = function (value) {
  jspb.Message.setProto3IntField(this, 1, value)
}


/**
 * optional string message = 2;
 * @return {string}
 */
proto.rpcpb.GetBlockHashResponse.prototype.getMessage = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''))
}


/** @param {string} value */
proto.rpcpb.GetBlockHashResponse.prototype.setMessage = function (value) {
  jspb.Message.setProto3StringField(this, 2, value)
}


/**
 * optional string hash = 3;
 * @return {string}
 */
proto.rpcpb.GetBlockHashResponse.prototype.getHash = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''))
}


/** @param {string} value */
proto.rpcpb.GetBlockHashResponse.prototype.setHash = function (value) {
  jspb.Message.setProto3StringField(this, 3, value)
}





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.rpcpb.GetBlockRequest.prototype.toObject = function (opt_includeInstance) {
    return proto.rpcpb.GetBlockRequest.toObject(opt_includeInstance, this)
  }


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.rpcpb.GetBlockRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.rpcpb.GetBlockRequest.toObject = function (includeInstance, msg) {
    var f, obj = {
      blockHash: jspb.Message.getFieldWithDefault(msg, 1, '')
    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpcpb.GetBlockRequest}
 */
proto.rpcpb.GetBlockRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.rpcpb.GetBlockRequest
  return proto.rpcpb.GetBlockRequest.deserializeBinaryFromReader(msg, reader)
}


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpcpb.GetBlockRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpcpb.GetBlockRequest}
 */
proto.rpcpb.GetBlockRequest.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString())
        msg.setBlockHash(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpcpb.GetBlockRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.rpcpb.GetBlockRequest.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpcpb.GetBlockRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpcpb.GetBlockRequest.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getBlockHash()
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    )
  }
}


/**
 * optional string block_hash = 1;
 * @return {string}
 */
proto.rpcpb.GetBlockRequest.prototype.getBlockHash = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
}


/** @param {string} value */
proto.rpcpb.GetBlockRequest.prototype.setBlockHash = function (value) {
  jspb.Message.setProto3StringField(this, 1, value)
}





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.rpcpb.GetBlockHeaderResponse.prototype.toObject = function (opt_includeInstance) {
    return proto.rpcpb.GetBlockHeaderResponse.toObject(opt_includeInstance, this)
  }


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.rpcpb.GetBlockHeaderResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.rpcpb.GetBlockHeaderResponse.toObject = function (includeInstance, msg) {
    var f, obj = {
      code: jspb.Message.getFieldWithDefault(msg, 1, 0),
      message: jspb.Message.getFieldWithDefault(msg, 2, ''),
      header: (f = msg.getHeader()) && proto.corepb.BlockHeader.toObject(includeInstance, f)
    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpcpb.GetBlockHeaderResponse}
 */
proto.rpcpb.GetBlockHeaderResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.rpcpb.GetBlockHeaderResponse
  return proto.rpcpb.GetBlockHeaderResponse.deserializeBinaryFromReader(msg, reader)
}


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpcpb.GetBlockHeaderResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpcpb.GetBlockHeaderResponse}
 */
proto.rpcpb.GetBlockHeaderResponse.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readInt32())
        msg.setCode(value)
        break
      case 2:
        var value = /** @type {string} */ (reader.readString())
        msg.setMessage(value)
        break
      case 3:
        var value = new proto.corepb.BlockHeader
        reader.readMessage(value, proto.corepb.BlockHeader.deserializeBinaryFromReader)
        msg.setHeader(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpcpb.GetBlockHeaderResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.rpcpb.GetBlockHeaderResponse.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpcpb.GetBlockHeaderResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpcpb.GetBlockHeaderResponse.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getCode()
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    )
  }
  f = message.getMessage()
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    )
  }
  f = message.getHeader()
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.corepb.BlockHeader.serializeBinaryToWriter
    )
  }
}


/**
 * optional int32 code = 1;
 * @return {number}
 */
proto.rpcpb.GetBlockHeaderResponse.prototype.getCode = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0))
}


/** @param {number} value */
proto.rpcpb.GetBlockHeaderResponse.prototype.setCode = function (value) {
  jspb.Message.setProto3IntField(this, 1, value)
}


/**
 * optional string message = 2;
 * @return {string}
 */
proto.rpcpb.GetBlockHeaderResponse.prototype.getMessage = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''))
}


/** @param {string} value */
proto.rpcpb.GetBlockHeaderResponse.prototype.setMessage = function (value) {
  jspb.Message.setProto3StringField(this, 2, value)
}


/**
 * optional corepb.BlockHeader header = 3;
 * @return {?proto.corepb.BlockHeader}
 */
proto.rpcpb.GetBlockHeaderResponse.prototype.getHeader = function () {
  return /** @type{?proto.corepb.BlockHeader} */ (
    jspb.Message.getWrapperField(this, proto.corepb.BlockHeader, 3))
}


/** @param {?proto.corepb.BlockHeader|undefined} value */
proto.rpcpb.GetBlockHeaderResponse.prototype.setHeader = function (value) {
  jspb.Message.setWrapperField(this, 3, value)
}


/**
 * Clears the message field making it undefined.
 */
proto.rpcpb.GetBlockHeaderResponse.prototype.clearHeader = function () {
  this.setHeader(undefined)
}


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rpcpb.GetBlockHeaderResponse.prototype.hasHeader = function () {
  return jspb.Message.getField(this, 3) != null
}





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.rpcpb.GetBlockResponse.prototype.toObject = function (opt_includeInstance) {
    return proto.rpcpb.GetBlockResponse.toObject(opt_includeInstance, this)
  }


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.rpcpb.GetBlockResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.rpcpb.GetBlockResponse.toObject = function (includeInstance, msg) {
    var f, obj = {
      code: jspb.Message.getFieldWithDefault(msg, 1, 0),
      message: jspb.Message.getFieldWithDefault(msg, 2, ''),
      block: (f = msg.getBlock()) && proto.corepb.Block.toObject(includeInstance, f)
    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpcpb.GetBlockResponse}
 */
proto.rpcpb.GetBlockResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.rpcpb.GetBlockResponse
  return proto.rpcpb.GetBlockResponse.deserializeBinaryFromReader(msg, reader)
}


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpcpb.GetBlockResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpcpb.GetBlockResponse}
 */
proto.rpcpb.GetBlockResponse.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readInt32())
        msg.setCode(value)
        break
      case 2:
        var value = /** @type {string} */ (reader.readString())
        msg.setMessage(value)
        break
      case 3:
        var value = new proto.corepb.Block
        reader.readMessage(value, proto.corepb.Block.deserializeBinaryFromReader)
        msg.setBlock(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpcpb.GetBlockResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.rpcpb.GetBlockResponse.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpcpb.GetBlockResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpcpb.GetBlockResponse.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getCode()
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    )
  }
  f = message.getMessage()
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    )
  }
  f = message.getBlock()
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.corepb.Block.serializeBinaryToWriter
    )
  }
}


/**
 * optional int32 code = 1;
 * @return {number}
 */
proto.rpcpb.GetBlockResponse.prototype.getCode = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0))
}


/** @param {number} value */
proto.rpcpb.GetBlockResponse.prototype.setCode = function (value) {
  jspb.Message.setProto3IntField(this, 1, value)
}


/**
 * optional string message = 2;
 * @return {string}
 */
proto.rpcpb.GetBlockResponse.prototype.getMessage = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''))
}


/** @param {string} value */
proto.rpcpb.GetBlockResponse.prototype.setMessage = function (value) {
  jspb.Message.setProto3StringField(this, 2, value)
}


/**
 * optional corepb.Block block = 3;
 * @return {?proto.corepb.Block}
 */
proto.rpcpb.GetBlockResponse.prototype.getBlock = function () {
  return /** @type{?proto.corepb.Block} */ (
    jspb.Message.getWrapperField(this, proto.corepb.Block, 3))
}


/** @param {?proto.corepb.Block|undefined} value */
proto.rpcpb.GetBlockResponse.prototype.setBlock = function (value) {
  jspb.Message.setWrapperField(this, 3, value)
}


/**
 * Clears the message field making it undefined.
 */
proto.rpcpb.GetBlockResponse.prototype.clearBlock = function () {
  this.setBlock(undefined)
}


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rpcpb.GetBlockResponse.prototype.hasBlock = function () {
  return jspb.Message.getField(this, 3) != null
}



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rpcpb.Node.repeatedFields_ = [2]



if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.rpcpb.Node.prototype.toObject = function (opt_includeInstance) {
    return proto.rpcpb.Node.toObject(opt_includeInstance, this)
  }


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.rpcpb.Node} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.rpcpb.Node.toObject = function (includeInstance, msg) {
    var f, obj = {
      id: jspb.Message.getFieldWithDefault(msg, 1, ''),
      addrsList: jspb.Message.getRepeatedField(msg, 2),
      ttl: jspb.Message.getFieldWithDefault(msg, 3, '')
    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpcpb.Node}
 */
proto.rpcpb.Node.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.rpcpb.Node
  return proto.rpcpb.Node.deserializeBinaryFromReader(msg, reader)
}


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpcpb.Node} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpcpb.Node}
 */
proto.rpcpb.Node.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString())
        msg.setId(value)
        break
      case 2:
        var value = /** @type {string} */ (reader.readString())
        msg.addAddrs(value)
        break
      case 3:
        var value = /** @type {string} */ (reader.readString())
        msg.setTtl(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpcpb.Node.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.rpcpb.Node.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpcpb.Node} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpcpb.Node.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getId()
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    )
  }
  f = message.getAddrsList()
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    )
  }
  f = message.getTtl()
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    )
  }
}


/**
 * optional string id = 1;
 * @return {string}
 */
proto.rpcpb.Node.prototype.getId = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
}


/** @param {string} value */
proto.rpcpb.Node.prototype.setId = function (value) {
  jspb.Message.setProto3StringField(this, 1, value)
}


/**
 * repeated string addrs = 2;
 * @return {!Array<string>}
 */
proto.rpcpb.Node.prototype.getAddrsList = function () {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2))
}


/** @param {!Array<string>} value */
proto.rpcpb.Node.prototype.setAddrsList = function (value) {
  jspb.Message.setField(this, 2, value || [])
}


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.rpcpb.Node.prototype.addAddrs = function (value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index)
}


/**
 * Clears the list making it empty but non-null.
 */
proto.rpcpb.Node.prototype.clearAddrsList = function () {
  this.setAddrsList([])
}


/**
 * optional string ttl = 3;
 * @return {string}
 */
proto.rpcpb.Node.prototype.getTtl = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''))
}


/** @param {string} value */
proto.rpcpb.Node.prototype.setTtl = function (value) {
  jspb.Message.setProto3StringField(this, 3, value)
}





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.rpcpb.GetNodeInfoRequest.prototype.toObject = function (opt_includeInstance) {
    return proto.rpcpb.GetNodeInfoRequest.toObject(opt_includeInstance, this)
  }


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.rpcpb.GetNodeInfoRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.rpcpb.GetNodeInfoRequest.toObject = function (includeInstance, msg) {
    var f, obj = {

    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpcpb.GetNodeInfoRequest}
 */
proto.rpcpb.GetNodeInfoRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.rpcpb.GetNodeInfoRequest
  return proto.rpcpb.GetNodeInfoRequest.deserializeBinaryFromReader(msg, reader)
}


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpcpb.GetNodeInfoRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpcpb.GetNodeInfoRequest}
 */
proto.rpcpb.GetNodeInfoRequest.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      default:
        reader.skipField()
        break
    }
  }
  return msg
}


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpcpb.GetNodeInfoRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.rpcpb.GetNodeInfoRequest.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpcpb.GetNodeInfoRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpcpb.GetNodeInfoRequest.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
}



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rpcpb.GetNodeInfoResponse.repeatedFields_ = [1]



if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.rpcpb.GetNodeInfoResponse.prototype.toObject = function (opt_includeInstance) {
    return proto.rpcpb.GetNodeInfoResponse.toObject(opt_includeInstance, this)
  }


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.rpcpb.GetNodeInfoResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.rpcpb.GetNodeInfoResponse.toObject = function (includeInstance, msg) {
    var f, obj = {
      nodesList: jspb.Message.toObjectList(msg.getNodesList(),
        proto.rpcpb.Node.toObject, includeInstance)
    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpcpb.GetNodeInfoResponse}
 */
proto.rpcpb.GetNodeInfoResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.rpcpb.GetNodeInfoResponse
  return proto.rpcpb.GetNodeInfoResponse.deserializeBinaryFromReader(msg, reader)
}


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpcpb.GetNodeInfoResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpcpb.GetNodeInfoResponse}
 */
proto.rpcpb.GetNodeInfoResponse.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = new proto.rpcpb.Node
        reader.readMessage(value, proto.rpcpb.Node.deserializeBinaryFromReader)
        msg.addNodes(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpcpb.GetNodeInfoResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.rpcpb.GetNodeInfoResponse.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpcpb.GetNodeInfoResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpcpb.GetNodeInfoResponse.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getNodesList()
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.rpcpb.Node.serializeBinaryToWriter
    )
  }
}


/**
 * repeated Node nodes = 1;
 * @return {!Array<!proto.rpcpb.Node>}
 */
proto.rpcpb.GetNodeInfoResponse.prototype.getNodesList = function () {
  return /** @type{!Array<!proto.rpcpb.Node>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rpcpb.Node, 1))
}


/** @param {!Array<!proto.rpcpb.Node>} value */
proto.rpcpb.GetNodeInfoResponse.prototype.setNodesList = function (value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value)
}


/**
 * @param {!proto.rpcpb.Node=} opt_value
 * @param {number=} opt_index
 * @return {!proto.rpcpb.Node}
 */
proto.rpcpb.GetNodeInfoResponse.prototype.addNodes = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.rpcpb.Node, opt_index)
}


/**
 * Clears the list making it empty but non-null.
 */
proto.rpcpb.GetNodeInfoResponse.prototype.clearNodesList = function () {
  this.setNodesList([])
}


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpcpb.ClaimReq = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.rpcpb.ClaimReq, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpcpb.ClaimReq.displayName = 'proto.rpcpb.ClaimReq'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpcpb.ClaimResp = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.rpcpb.ClaimResp, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpcpb.ClaimResp.displayName = 'proto.rpcpb.ClaimResp'
}



if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.rpcpb.ClaimReq.prototype.toObject = function (opt_includeInstance) {
    return proto.rpcpb.ClaimReq.toObject(opt_includeInstance, this)
  }


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.rpcpb.ClaimReq} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.rpcpb.ClaimReq.toObject = function (includeInstance, msg) {
    var f, obj = {
      addr: jspb.Message.getFieldWithDefault(msg, 1, ''),
      amount: jspb.Message.getFieldWithDefault(msg, 2, 0)
    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpcpb.ClaimReq}
 */
proto.rpcpb.ClaimReq.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.rpcpb.ClaimReq
  return proto.rpcpb.ClaimReq.deserializeBinaryFromReader(msg, reader)
}


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpcpb.ClaimReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpcpb.ClaimReq}
 */
proto.rpcpb.ClaimReq.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString())
        msg.setAddr(value)
        break
      case 2:
        var value = /** @type {number} */ (reader.readUint64())
        msg.setAmount(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpcpb.ClaimReq.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.rpcpb.ClaimReq.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpcpb.ClaimReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpcpb.ClaimReq.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getAddr()
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    )
  }
  f = message.getAmount()
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    )
  }
}


/**
 * optional string addr = 1;
 * @return {string}
 */
proto.rpcpb.ClaimReq.prototype.getAddr = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
}


/** @param {string} value */
proto.rpcpb.ClaimReq.prototype.setAddr = function (value) {
  jspb.Message.setProto3StringField(this, 1, value)
}


/**
 * optional uint64 amount = 2;
 * @return {number}
 */
proto.rpcpb.ClaimReq.prototype.getAmount = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0))
}


/** @param {number} value */
proto.rpcpb.ClaimReq.prototype.setAmount = function (value) {
  jspb.Message.setProto3IntField(this, 2, value)
}





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.rpcpb.ClaimResp.prototype.toObject = function (opt_includeInstance) {
    return proto.rpcpb.ClaimResp.toObject(opt_includeInstance, this)
  }


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.rpcpb.ClaimResp} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.rpcpb.ClaimResp.toObject = function (includeInstance, msg) {
    var f, obj = {
      code: jspb.Message.getFieldWithDefault(msg, 1, 0),
      message: jspb.Message.getFieldWithDefault(msg, 2, ''),
      hash: jspb.Message.getFieldWithDefault(msg, 3, '')
    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpcpb.ClaimResp}
 */
proto.rpcpb.ClaimResp.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.rpcpb.ClaimResp
  return proto.rpcpb.ClaimResp.deserializeBinaryFromReader(msg, reader)
}


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpcpb.ClaimResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpcpb.ClaimResp}
 */
proto.rpcpb.ClaimResp.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readInt32())
        msg.setCode(value)
        break
      case 2:
        var value = /** @type {string} */ (reader.readString())
        msg.setMessage(value)
        break
      case 3:
        var value = /** @type {string} */ (reader.readString())
        msg.setHash(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpcpb.ClaimResp.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.rpcpb.ClaimResp.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpcpb.ClaimResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpcpb.ClaimResp.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getCode()
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    )
  }
  f = message.getMessage()
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    )
  }
  f = message.getHash()
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    )
  }
}


/**
 * optional int32 code = 1;
 * @return {number}
 */
proto.rpcpb.ClaimResp.prototype.getCode = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0))
}


/** @param {number} value */
proto.rpcpb.ClaimResp.prototype.setCode = function (value) {
  jspb.Message.setProto3IntField(this, 1, value)
}


/**
 * optional string message = 2;
 * @return {string}
 */
proto.rpcpb.ClaimResp.prototype.getMessage = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''))
}


/** @param {string} value */
proto.rpcpb.ClaimResp.prototype.setMessage = function (value) {
  jspb.Message.setProto3StringField(this, 2, value)
}


/**
 * optional string hash = 3;
 * @return {string}
 */
proto.rpcpb.ClaimResp.prototype.getHash = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''))
}


/** @param {string} value */
proto.rpcpb.ClaimResp.prototype.setHash = function (value) {
  jspb.Message.setProto3StringField(this, 3, value)
}


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.corepb.Log = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.corepb.Log.repeatedFields_, null)
}
goog.inherits(proto.corepb.Log, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.corepb.Log.displayName = 'proto.corepb.Log'
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.corepb.Log.repeatedFields_ = [2]



if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.corepb.Log.prototype.toObject = function (opt_includeInstance) {
    return proto.corepb.Log.toObject(opt_includeInstance, this)
  }


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.corepb.Log} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.corepb.Log.toObject = function (includeInstance, msg) {
    var f, obj = {
      address: msg.getAddress_asB64(),
      topicsList: msg.getTopicsList_asB64(),
      data: msg.getData_asB64(),
      blockNumber: jspb.Message.getFieldWithDefault(msg, 4, 0),
      txHash: msg.getTxHash_asB64(),
      txIndex: jspb.Message.getFieldWithDefault(msg, 6, 0),
      blockHash: msg.getBlockHash_asB64(),
      index: jspb.Message.getFieldWithDefault(msg, 8, 0),
      removed: jspb.Message.getFieldWithDefault(msg, 9, false)
    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.corepb.Log}
 */
proto.corepb.Log.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.corepb.Log
  return proto.corepb.Log.deserializeBinaryFromReader(msg, reader)
}


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.corepb.Log} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.corepb.Log}
 */
proto.corepb.Log.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {!Uint8Array} */ (reader.readBytes())
        msg.setAddress(value)
        break
      case 2:
        var value = /** @type {!Uint8Array} */ (reader.readBytes())
        msg.addTopics(value)
        break
      case 3:
        var value = /** @type {!Uint8Array} */ (reader.readBytes())
        msg.setData(value)
        break
      case 4:
        var value = /** @type {number} */ (reader.readUint64())
        msg.setBlockNumber(value)
        break
      case 5:
        var value = /** @type {!Uint8Array} */ (reader.readBytes())
        msg.setTxHash(value)
        break
      case 6:
        var value = /** @type {number} */ (reader.readUint32())
        msg.setTxIndex(value)
        break
      case 7:
        var value = /** @type {!Uint8Array} */ (reader.readBytes())
        msg.setBlockHash(value)
        break
      case 8:
        var value = /** @type {number} */ (reader.readUint32())
        msg.setIndex(value)
        break
      case 9:
        var value = /** @type {boolean} */ (reader.readBool())
        msg.setRemoved(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.corepb.Log.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.corepb.Log.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.corepb.Log} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.corepb.Log.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getAddress_asU8()
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    )
  }
  f = message.getTopicsList_asU8()
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      2,
      f
    )
  }
  f = message.getData_asU8()
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    )
  }
  f = message.getBlockNumber()
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    )
  }
  f = message.getTxHash_asU8()
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    )
  }
  f = message.getTxIndex()
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    )
  }
  f = message.getBlockHash_asU8()
  if (f.length > 0) {
    writer.writeBytes(
      7,
      f
    )
  }
  f = message.getIndex()
  if (f !== 0) {
    writer.writeUint32(
      8,
      f
    )
  }
  f = message.getRemoved()
  if (f) {
    writer.writeBool(
      9,
      f
    )
  }
}


/**
 * optional bytes address = 1;
 * @return {!(string|Uint8Array)}
 */
proto.corepb.Log.prototype.getAddress = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
}


/**
 * optional bytes address = 1;
 * This is a type-conversion wrapper around `getAddress()`
 * @return {string}
 */
proto.corepb.Log.prototype.getAddress_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
    this.getAddress()))
}


/**
 * optional bytes address = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAddress()`
 * @return {!Uint8Array}
 */
proto.corepb.Log.prototype.getAddress_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
    this.getAddress()))
}


/** @param {!(string|Uint8Array)} value */
proto.corepb.Log.prototype.setAddress = function (value) {
  jspb.Message.setProto3BytesField(this, 1, value)
}


/**
 * repeated bytes topics = 2;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.corepb.Log.prototype.getTopicsList = function () {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 2))
}


/**
 * repeated bytes topics = 2;
 * This is a type-conversion wrapper around `getTopicsList()`
 * @return {!Array<string>}
 */
proto.corepb.Log.prototype.getTopicsList_asB64 = function () {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
    this.getTopicsList()))
}


/**
 * repeated bytes topics = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTopicsList()`
 * @return {!Array<!Uint8Array>}
 */
proto.corepb.Log.prototype.getTopicsList_asU8 = function () {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
    this.getTopicsList()))
}


/** @param {!(Array<!Uint8Array>|Array<string>)} value */
proto.corepb.Log.prototype.setTopicsList = function (value) {
  jspb.Message.setField(this, 2, value || [])
}


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 */
proto.corepb.Log.prototype.addTopics = function (value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index)
}


/**
 * Clears the list making it empty but non-null.
 */
proto.corepb.Log.prototype.clearTopicsList = function () {
  this.setTopicsList([])
}


/**
 * optional bytes data = 3;
 * @return {!(string|Uint8Array)}
 */
proto.corepb.Log.prototype.getData = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ''))
}


/**
 * optional bytes data = 3;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.corepb.Log.prototype.getData_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
    this.getData()))
}


/**
 * optional bytes data = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.corepb.Log.prototype.getData_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
    this.getData()))
}


/** @param {!(string|Uint8Array)} value */
proto.corepb.Log.prototype.setData = function (value) {
  jspb.Message.setProto3BytesField(this, 3, value)
}


/**
 * optional uint64 block_number = 4;
 * @return {number}
 */
proto.corepb.Log.prototype.getBlockNumber = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0))
}


/** @param {number} value */
proto.corepb.Log.prototype.setBlockNumber = function (value) {
  jspb.Message.setProto3IntField(this, 4, value)
}


/**
 * optional bytes tx_hash = 5;
 * @return {!(string|Uint8Array)}
 */
proto.corepb.Log.prototype.getTxHash = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ''))
}


/**
 * optional bytes tx_hash = 5;
 * This is a type-conversion wrapper around `getTxHash()`
 * @return {string}
 */
proto.corepb.Log.prototype.getTxHash_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
    this.getTxHash()))
}


/**
 * optional bytes tx_hash = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTxHash()`
 * @return {!Uint8Array}
 */
proto.corepb.Log.prototype.getTxHash_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
    this.getTxHash()))
}


/** @param {!(string|Uint8Array)} value */
proto.corepb.Log.prototype.setTxHash = function (value) {
  jspb.Message.setProto3BytesField(this, 5, value)
}


/**
 * optional uint32 tx_index = 6;
 * @return {number}
 */
proto.corepb.Log.prototype.getTxIndex = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0))
}


/** @param {number} value */
proto.corepb.Log.prototype.setTxIndex = function (value) {
  jspb.Message.setProto3IntField(this, 6, value)
}


/**
 * optional bytes block_hash = 7;
 * @return {!(string|Uint8Array)}
 */
proto.corepb.Log.prototype.getBlockHash = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 7, ''))
}


/**
 * optional bytes block_hash = 7;
 * This is a type-conversion wrapper around `getBlockHash()`
 * @return {string}
 */
proto.corepb.Log.prototype.getBlockHash_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
    this.getBlockHash()))
}


/**
 * optional bytes block_hash = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBlockHash()`
 * @return {!Uint8Array}
 */
proto.corepb.Log.prototype.getBlockHash_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
    this.getBlockHash()))
}


/** @param {!(string|Uint8Array)} value */
proto.corepb.Log.prototype.setBlockHash = function (value) {
  jspb.Message.setProto3BytesField(this, 7, value)
}


/**
 * optional uint32 index = 8;
 * @return {number}
 */
proto.corepb.Log.prototype.getIndex = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0))
}


/** @param {number} value */
proto.corepb.Log.prototype.setIndex = function (value) {
  jspb.Message.setProto3IntField(this, 8, value)
}


/**
 * optional bool removed = 9;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.corepb.Log.prototype.getRemoved = function () {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 9, false))
}


/** @param {boolean} value */
proto.corepb.Log.prototype.setRemoved = function (value) {
  jspb.Message.setProto3BooleanField(this, 9, value)
}


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.corepb.Receipt = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.corepb.Receipt, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.corepb.Receipt.displayName = 'proto.corepb.Receipt'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.corepb.Receipts = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.corepb.Receipts.repeatedFields_, null)
}
goog.inherits(proto.corepb.Receipts, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.corepb.Receipts.displayName = 'proto.corepb.Receipts'
}



if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.corepb.Receipt.prototype.toObject = function (opt_includeInstance) {
    return proto.corepb.Receipt.toObject(opt_includeInstance, this)
  }


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.corepb.Receipt} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.corepb.Receipt.toObject = function (includeInstance, msg) {
    var f, obj = {
      txHash: msg.getTxHash_asB64(),
      txIndex: jspb.Message.getFieldWithDefault(msg, 2, 0),
      failed: jspb.Message.getFieldWithDefault(msg, 3, false),
      gasUsed: jspb.Message.getFieldWithDefault(msg, 4, 0)
    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.corepb.Receipt}
 */
proto.corepb.Receipt.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.corepb.Receipt
  return proto.corepb.Receipt.deserializeBinaryFromReader(msg, reader)
}


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.corepb.Receipt} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.corepb.Receipt}
 */
proto.corepb.Receipt.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {!Uint8Array} */ (reader.readBytes())
        msg.setTxHash(value)
        break
      case 2:
        var value = /** @type {number} */ (reader.readUint32())
        msg.setTxIndex(value)
        break
      case 3:
        var value = /** @type {boolean} */ (reader.readBool())
        msg.setFailed(value)
        break
      case 4:
        var value = /** @type {number} */ (reader.readUint64())
        msg.setGasUsed(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.corepb.Receipt.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.corepb.Receipt.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.corepb.Receipt} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.corepb.Receipt.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getTxHash_asU8()
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    )
  }
  f = message.getTxIndex()
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    )
  }
  f = message.getFailed()
  if (f) {
    writer.writeBool(
      3,
      f
    )
  }
  f = message.getGasUsed()
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    )
  }
}


/**
 * optional bytes tx_hash = 1;
 * @return {!(string|Uint8Array)}
 */
proto.corepb.Receipt.prototype.getTxHash = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
}


/**
 * optional bytes tx_hash = 1;
 * This is a type-conversion wrapper around `getTxHash()`
 * @return {string}
 */
proto.corepb.Receipt.prototype.getTxHash_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
    this.getTxHash()))
}


/**
 * optional bytes tx_hash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTxHash()`
 * @return {!Uint8Array}
 */
proto.corepb.Receipt.prototype.getTxHash_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
    this.getTxHash()))
}


/** @param {!(string|Uint8Array)} value */
proto.corepb.Receipt.prototype.setTxHash = function (value) {
  jspb.Message.setProto3BytesField(this, 1, value)
}


/**
 * optional uint32 tx_index = 2;
 * @return {number}
 */
proto.corepb.Receipt.prototype.getTxIndex = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0))
}


/** @param {number} value */
proto.corepb.Receipt.prototype.setTxIndex = function (value) {
  jspb.Message.setProto3IntField(this, 2, value)
}


/**
 * optional bool failed = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.corepb.Receipt.prototype.getFailed = function () {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false))
}


/** @param {boolean} value */
proto.corepb.Receipt.prototype.setFailed = function (value) {
  jspb.Message.setProto3BooleanField(this, 3, value)
}


/**
 * optional uint64 gas_used = 4;
 * @return {number}
 */
proto.corepb.Receipt.prototype.getGasUsed = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0))
}


/** @param {number} value */
proto.corepb.Receipt.prototype.setGasUsed = function (value) {
  jspb.Message.setProto3IntField(this, 4, value)
}



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.corepb.Receipts.repeatedFields_ = [1]



if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.corepb.Receipts.prototype.toObject = function (opt_includeInstance) {
    return proto.corepb.Receipts.toObject(opt_includeInstance, this)
  }


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.corepb.Receipts} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.corepb.Receipts.toObject = function (includeInstance, msg) {
    var f, obj = {
      receiptsList: jspb.Message.toObjectList(msg.getReceiptsList(),
        proto.corepb.Receipt.toObject, includeInstance)
    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.corepb.Receipts}
 */
proto.corepb.Receipts.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.corepb.Receipts
  return proto.corepb.Receipts.deserializeBinaryFromReader(msg, reader)
}


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.corepb.Receipts} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.corepb.Receipts}
 */
proto.corepb.Receipts.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = new proto.corepb.Receipt
        reader.readMessage(value, proto.corepb.Receipt.deserializeBinaryFromReader)
        msg.addReceipts(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.corepb.Receipts.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.corepb.Receipts.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.corepb.Receipts} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.corepb.Receipts.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getReceiptsList()
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.corepb.Receipt.serializeBinaryToWriter
    )
  }
}


/**
 * repeated Receipt receipts = 1;
 * @return {!Array<!proto.corepb.Receipt>}
 */
proto.corepb.Receipts.prototype.getReceiptsList = function () {
  return /** @type{!Array<!proto.corepb.Receipt>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.corepb.Receipt, 1))
}


/** @param {!Array<!proto.corepb.Receipt>} value */
proto.corepb.Receipts.prototype.setReceiptsList = function (value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value)
}


/**
 * @param {!proto.corepb.Receipt=} opt_value
 * @param {number=} opt_index
 * @return {!proto.corepb.Receipt}
 */
proto.corepb.Receipts.prototype.addReceipts = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.corepb.Receipt, opt_index)
}


/**
 * Clears the list making it empty but non-null.
 */
proto.corepb.Receipts.prototype.clearReceiptsList = function () {
  this.setReceiptsList([])
}


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpcpb.SendRawTransactionReq = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.rpcpb.SendRawTransactionReq, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpcpb.SendRawTransactionReq.displayName = 'proto.rpcpb.SendRawTransactionReq'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpcpb.GetBalanceReq = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rpcpb.GetBalanceReq.repeatedFields_, null)
}
goog.inherits(proto.rpcpb.GetBalanceReq, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpcpb.GetBalanceReq.displayName = 'proto.rpcpb.GetBalanceReq'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpcpb.GetBalanceResp = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rpcpb.GetBalanceResp.repeatedFields_, null)
}
goog.inherits(proto.rpcpb.GetBalanceResp, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpcpb.GetBalanceResp.displayName = 'proto.rpcpb.GetBalanceResp'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpcpb.GetTokenBalanceReq = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rpcpb.GetTokenBalanceReq.repeatedFields_, null)
}
goog.inherits(proto.rpcpb.GetTokenBalanceReq, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpcpb.GetTokenBalanceReq.displayName = 'proto.rpcpb.GetTokenBalanceReq'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpcpb.FetchUtxosReq = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.rpcpb.FetchUtxosReq, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpcpb.FetchUtxosReq.displayName = 'proto.rpcpb.FetchUtxosReq'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpcpb.FetchUtxosResp = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rpcpb.FetchUtxosResp.repeatedFields_, null)
}
goog.inherits(proto.rpcpb.FetchUtxosResp, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpcpb.FetchUtxosResp.displayName = 'proto.rpcpb.FetchUtxosResp'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpcpb.GetRawTransactionRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.rpcpb.GetRawTransactionRequest, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpcpb.GetRawTransactionRequest.displayName = 'proto.rpcpb.GetRawTransactionRequest'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpcpb.GetRawTransactionResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.rpcpb.GetRawTransactionResponse, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpcpb.GetRawTransactionResponse.displayName = 'proto.rpcpb.GetRawTransactionResponse'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpcpb.SendTransactionReq = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.rpcpb.SendTransactionReq, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpcpb.SendTransactionReq.displayName = 'proto.rpcpb.SendTransactionReq'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpcpb.SendTransactionResp = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.rpcpb.SendTransactionResp, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpcpb.SendTransactionResp.displayName = 'proto.rpcpb.SendTransactionResp'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpcpb.GetFeePriceRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.rpcpb.GetFeePriceRequest, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpcpb.GetFeePriceRequest.displayName = 'proto.rpcpb.GetFeePriceRequest'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpcpb.GetFeePriceResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.rpcpb.GetFeePriceResponse, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpcpb.GetFeePriceResponse.displayName = 'proto.rpcpb.GetFeePriceResponse'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpcpb.MakeTxReq = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rpcpb.MakeTxReq.repeatedFields_, null)
}
goog.inherits(proto.rpcpb.MakeTxReq, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpcpb.MakeTxReq.displayName = 'proto.rpcpb.MakeTxReq'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpcpb.MakeTxResp = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rpcpb.MakeTxResp.repeatedFields_, null)
}
goog.inherits(proto.rpcpb.MakeTxResp, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpcpb.MakeTxResp.displayName = 'proto.rpcpb.MakeTxResp'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpcpb.MakeSplitAddrTxReq = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rpcpb.MakeSplitAddrTxReq.repeatedFields_, null)
}
goog.inherits(proto.rpcpb.MakeSplitAddrTxReq, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpcpb.MakeSplitAddrTxReq.displayName = 'proto.rpcpb.MakeSplitAddrTxReq'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpcpb.MakeSplitAddrTxResp = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rpcpb.MakeSplitAddrTxResp.repeatedFields_, null)
}
goog.inherits(proto.rpcpb.MakeSplitAddrTxResp, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpcpb.MakeSplitAddrTxResp.displayName = 'proto.rpcpb.MakeSplitAddrTxResp'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpcpb.MakeTokenIssueTxReq = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.rpcpb.MakeTokenIssueTxReq, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpcpb.MakeTokenIssueTxReq.displayName = 'proto.rpcpb.MakeTokenIssueTxReq'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpcpb.MakeTokenIssueTxResp = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rpcpb.MakeTokenIssueTxResp.repeatedFields_, null)
}
goog.inherits(proto.rpcpb.MakeTokenIssueTxResp, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpcpb.MakeTokenIssueTxResp.displayName = 'proto.rpcpb.MakeTokenIssueTxResp'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpcpb.MakeTokenTransferTxReq = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rpcpb.MakeTokenTransferTxReq.repeatedFields_, null)
}
goog.inherits(proto.rpcpb.MakeTokenTransferTxReq, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpcpb.MakeTokenTransferTxReq.displayName = 'proto.rpcpb.MakeTokenTransferTxReq'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpcpb.TokenTag = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.rpcpb.TokenTag, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpcpb.TokenTag.displayName = 'proto.rpcpb.TokenTag'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpcpb.MakeContractTxReq = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.rpcpb.MakeContractTxReq, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpcpb.MakeContractTxReq.displayName = 'proto.rpcpb.MakeContractTxReq'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpcpb.MakeContractTxResp = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rpcpb.MakeContractTxResp.repeatedFields_, null)
}
goog.inherits(proto.rpcpb.MakeContractTxResp, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpcpb.MakeContractTxResp.displayName = 'proto.rpcpb.MakeContractTxResp'
}



if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.rpcpb.SendRawTransactionReq.prototype.toObject = function (opt_includeInstance) {
    return proto.rpcpb.SendRawTransactionReq.toObject(opt_includeInstance, this)
  }


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.rpcpb.SendRawTransactionReq} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.rpcpb.SendRawTransactionReq.toObject = function (includeInstance, msg) {
    var f, obj = {
      tx: jspb.Message.getFieldWithDefault(msg, 1, '')
    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpcpb.SendRawTransactionReq}
 */
proto.rpcpb.SendRawTransactionReq.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.rpcpb.SendRawTransactionReq
  return proto.rpcpb.SendRawTransactionReq.deserializeBinaryFromReader(msg, reader)
}


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpcpb.SendRawTransactionReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpcpb.SendRawTransactionReq}
 */
proto.rpcpb.SendRawTransactionReq.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString())
        msg.setTx(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpcpb.SendRawTransactionReq.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.rpcpb.SendRawTransactionReq.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpcpb.SendRawTransactionReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpcpb.SendRawTransactionReq.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getTx()
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    )
  }
}


/**
 * optional string tx = 1;
 * @return {string}
 */
proto.rpcpb.SendRawTransactionReq.prototype.getTx = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
}


/** @param {string} value */
proto.rpcpb.SendRawTransactionReq.prototype.setTx = function (value) {
  jspb.Message.setProto3StringField(this, 1, value)
}



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rpcpb.GetBalanceReq.repeatedFields_ = [1]



if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.rpcpb.GetBalanceReq.prototype.toObject = function (opt_includeInstance) {
    return proto.rpcpb.GetBalanceReq.toObject(opt_includeInstance, this)
  }


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.rpcpb.GetBalanceReq} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.rpcpb.GetBalanceReq.toObject = function (includeInstance, msg) {
    var f, obj = {
      addrsList: jspb.Message.getRepeatedField(msg, 1)
    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpcpb.GetBalanceReq}
 */
proto.rpcpb.GetBalanceReq.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.rpcpb.GetBalanceReq
  return proto.rpcpb.GetBalanceReq.deserializeBinaryFromReader(msg, reader)
}


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpcpb.GetBalanceReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpcpb.GetBalanceReq}
 */
proto.rpcpb.GetBalanceReq.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString())
        msg.addAddrs(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpcpb.GetBalanceReq.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.rpcpb.GetBalanceReq.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpcpb.GetBalanceReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpcpb.GetBalanceReq.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getAddrsList()
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    )
  }
}


/**
 * repeated string addrs = 1;
 * @return {!Array<string>}
 */
proto.rpcpb.GetBalanceReq.prototype.getAddrsList = function () {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1))
}


/** @param {!Array<string>} value */
proto.rpcpb.GetBalanceReq.prototype.setAddrsList = function (value) {
  jspb.Message.setField(this, 1, value || [])
}


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.rpcpb.GetBalanceReq.prototype.addAddrs = function (value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index)
}


/**
 * Clears the list making it empty but non-null.
 */
proto.rpcpb.GetBalanceReq.prototype.clearAddrsList = function () {
  this.setAddrsList([])
}



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rpcpb.GetBalanceResp.repeatedFields_ = [3]



if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.rpcpb.GetBalanceResp.prototype.toObject = function (opt_includeInstance) {
    return proto.rpcpb.GetBalanceResp.toObject(opt_includeInstance, this)
  }


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.rpcpb.GetBalanceResp} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.rpcpb.GetBalanceResp.toObject = function (includeInstance, msg) {
    var f, obj = {
      code: jspb.Message.getFieldWithDefault(msg, 1, 0),
      message: jspb.Message.getFieldWithDefault(msg, 2, ''),
      balancesList: jspb.Message.getRepeatedField(msg, 3)
    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpcpb.GetBalanceResp}
 */
proto.rpcpb.GetBalanceResp.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.rpcpb.GetBalanceResp
  return proto.rpcpb.GetBalanceResp.deserializeBinaryFromReader(msg, reader)
}


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpcpb.GetBalanceResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpcpb.GetBalanceResp}
 */
proto.rpcpb.GetBalanceResp.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readInt32())
        msg.setCode(value)
        break
      case 2:
        var value = /** @type {string} */ (reader.readString())
        msg.setMessage(value)
        break
      case 3:
        var value = /** @type {!Array<number>} */ (reader.readPackedUint64())
        msg.setBalancesList(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpcpb.GetBalanceResp.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.rpcpb.GetBalanceResp.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpcpb.GetBalanceResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpcpb.GetBalanceResp.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getCode()
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    )
  }
  f = message.getMessage()
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    )
  }
  f = message.getBalancesList()
  if (f.length > 0) {
    writer.writePackedUint64(
      3,
      f
    )
  }
}


/**
 * optional int32 code = 1;
 * @return {number}
 */
proto.rpcpb.GetBalanceResp.prototype.getCode = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0))
}


/** @param {number} value */
proto.rpcpb.GetBalanceResp.prototype.setCode = function (value) {
  jspb.Message.setProto3IntField(this, 1, value)
}


/**
 * optional string message = 2;
 * @return {string}
 */
proto.rpcpb.GetBalanceResp.prototype.getMessage = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''))
}


/** @param {string} value */
proto.rpcpb.GetBalanceResp.prototype.setMessage = function (value) {
  jspb.Message.setProto3StringField(this, 2, value)
}


/**
 * repeated uint64 balances = 3;
 * @return {!Array<number>}
 */
proto.rpcpb.GetBalanceResp.prototype.getBalancesList = function () {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 3))
}


/** @param {!Array<number>} value */
proto.rpcpb.GetBalanceResp.prototype.setBalancesList = function (value) {
  jspb.Message.setField(this, 3, value || [])
}


/**
 * @param {number} value
 * @param {number=} opt_index
 */
proto.rpcpb.GetBalanceResp.prototype.addBalances = function (value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index)
}


/**
 * Clears the list making it empty but non-null.
 */
proto.rpcpb.GetBalanceResp.prototype.clearBalancesList = function () {
  this.setBalancesList([])
}



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rpcpb.GetTokenBalanceReq.repeatedFields_ = [1]



if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.rpcpb.GetTokenBalanceReq.prototype.toObject = function (opt_includeInstance) {
    return proto.rpcpb.GetTokenBalanceReq.toObject(opt_includeInstance, this)
  }


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.rpcpb.GetTokenBalanceReq} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.rpcpb.GetTokenBalanceReq.toObject = function (includeInstance, msg) {
    var f, obj = {
      addrsList: jspb.Message.getRepeatedField(msg, 1),
      tokenHash: jspb.Message.getFieldWithDefault(msg, 2, ''),
      tokenIndex: jspb.Message.getFieldWithDefault(msg, 3, 0)
    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpcpb.GetTokenBalanceReq}
 */
proto.rpcpb.GetTokenBalanceReq.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.rpcpb.GetTokenBalanceReq
  return proto.rpcpb.GetTokenBalanceReq.deserializeBinaryFromReader(msg, reader)
}


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpcpb.GetTokenBalanceReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpcpb.GetTokenBalanceReq}
 */
proto.rpcpb.GetTokenBalanceReq.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString())
        msg.addAddrs(value)
        break
      case 2:
        var value = /** @type {string} */ (reader.readString())
        msg.setTokenHash(value)
        break
      case 3:
        var value = /** @type {number} */ (reader.readUint32())
        msg.setTokenIndex(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpcpb.GetTokenBalanceReq.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.rpcpb.GetTokenBalanceReq.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpcpb.GetTokenBalanceReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpcpb.GetTokenBalanceReq.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getAddrsList()
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    )
  }
  f = message.getTokenHash()
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    )
  }
  f = message.getTokenIndex()
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    )
  }
}


/**
 * repeated string addrs = 1;
 * @return {!Array<string>}
 */
proto.rpcpb.GetTokenBalanceReq.prototype.getAddrsList = function () {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1))
}


/** @param {!Array<string>} value */
proto.rpcpb.GetTokenBalanceReq.prototype.setAddrsList = function (value) {
  jspb.Message.setField(this, 1, value || [])
}


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.rpcpb.GetTokenBalanceReq.prototype.addAddrs = function (value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index)
}


/**
 * Clears the list making it empty but non-null.
 */
proto.rpcpb.GetTokenBalanceReq.prototype.clearAddrsList = function () {
  this.setAddrsList([])
}


/**
 * optional string token_hash = 2;
 * @return {string}
 */
proto.rpcpb.GetTokenBalanceReq.prototype.getTokenHash = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''))
}


/** @param {string} value */
proto.rpcpb.GetTokenBalanceReq.prototype.setTokenHash = function (value) {
  jspb.Message.setProto3StringField(this, 2, value)
}


/**
 * optional uint32 token_index = 3;
 * @return {number}
 */
proto.rpcpb.GetTokenBalanceReq.prototype.getTokenIndex = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0))
}


/** @param {number} value */
proto.rpcpb.GetTokenBalanceReq.prototype.setTokenIndex = function (value) {
  jspb.Message.setProto3IntField(this, 3, value)
}





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.rpcpb.FetchUtxosReq.prototype.toObject = function (opt_includeInstance) {
    return proto.rpcpb.FetchUtxosReq.toObject(opt_includeInstance, this)
  }


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.rpcpb.FetchUtxosReq} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.rpcpb.FetchUtxosReq.toObject = function (includeInstance, msg) {
    var f, obj = {
      addr: jspb.Message.getFieldWithDefault(msg, 1, ''),
      amount: jspb.Message.getFieldWithDefault(msg, 2, 0),
      tokenHash: jspb.Message.getFieldWithDefault(msg, 3, ''),
      tokenIndex: jspb.Message.getFieldWithDefault(msg, 4, 0)
    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpcpb.FetchUtxosReq}
 */
proto.rpcpb.FetchUtxosReq.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.rpcpb.FetchUtxosReq
  return proto.rpcpb.FetchUtxosReq.deserializeBinaryFromReader(msg, reader)
}


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpcpb.FetchUtxosReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpcpb.FetchUtxosReq}
 */
proto.rpcpb.FetchUtxosReq.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString())
        msg.setAddr(value)
        break
      case 2:
        var value = /** @type {number} */ (reader.readUint64())
        msg.setAmount(value)
        break
      case 3:
        var value = /** @type {string} */ (reader.readString())
        msg.setTokenHash(value)
        break
      case 4:
        var value = /** @type {number} */ (reader.readUint32())
        msg.setTokenIndex(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpcpb.FetchUtxosReq.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.rpcpb.FetchUtxosReq.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpcpb.FetchUtxosReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpcpb.FetchUtxosReq.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getAddr()
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    )
  }
  f = message.getAmount()
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    )
  }
  f = message.getTokenHash()
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    )
  }
  f = message.getTokenIndex()
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    )
  }
}


/**
 * optional string addr = 1;
 * @return {string}
 */
proto.rpcpb.FetchUtxosReq.prototype.getAddr = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
}


/** @param {string} value */
proto.rpcpb.FetchUtxosReq.prototype.setAddr = function (value) {
  jspb.Message.setProto3StringField(this, 1, value)
}


/**
 * optional uint64 amount = 2;
 * @return {number}
 */
proto.rpcpb.FetchUtxosReq.prototype.getAmount = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0))
}


/** @param {number} value */
proto.rpcpb.FetchUtxosReq.prototype.setAmount = function (value) {
  jspb.Message.setProto3IntField(this, 2, value)
}


/**
 * optional string token_hash = 3;
 * @return {string}
 */
proto.rpcpb.FetchUtxosReq.prototype.getTokenHash = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''))
}


/** @param {string} value */
proto.rpcpb.FetchUtxosReq.prototype.setTokenHash = function (value) {
  jspb.Message.setProto3StringField(this, 3, value)
}


/**
 * optional uint32 token_index = 4;
 * @return {number}
 */
proto.rpcpb.FetchUtxosReq.prototype.getTokenIndex = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0))
}


/** @param {number} value */
proto.rpcpb.FetchUtxosReq.prototype.setTokenIndex = function (value) {
  jspb.Message.setProto3IntField(this, 4, value)
}



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rpcpb.FetchUtxosResp.repeatedFields_ = [3]



if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.rpcpb.FetchUtxosResp.prototype.toObject = function (opt_includeInstance) {
    return proto.rpcpb.FetchUtxosResp.toObject(opt_includeInstance, this)
  }


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.rpcpb.FetchUtxosResp} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.rpcpb.FetchUtxosResp.toObject = function (includeInstance, msg) {
    var f, obj = {
      code: jspb.Message.getFieldWithDefault(msg, 1, 0),
      message: jspb.Message.getFieldWithDefault(msg, 2, ''),
      utxosList: jspb.Message.toObjectList(msg.getUtxosList(),
        proto.rpcpb.Utxo.toObject, includeInstance)
    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpcpb.FetchUtxosResp}
 */
proto.rpcpb.FetchUtxosResp.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.rpcpb.FetchUtxosResp
  return proto.rpcpb.FetchUtxosResp.deserializeBinaryFromReader(msg, reader)
}


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpcpb.FetchUtxosResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpcpb.FetchUtxosResp}
 */
proto.rpcpb.FetchUtxosResp.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readInt32())
        msg.setCode(value)
        break
      case 2:
        var value = /** @type {string} */ (reader.readString())
        msg.setMessage(value)
        break
      case 3:
        var value = new proto.rpcpb.Utxo
        reader.readMessage(value, proto.rpcpb.Utxo.deserializeBinaryFromReader)
        msg.addUtxos(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpcpb.FetchUtxosResp.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.rpcpb.FetchUtxosResp.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpcpb.FetchUtxosResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpcpb.FetchUtxosResp.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getCode()
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    )
  }
  f = message.getMessage()
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    )
  }
  f = message.getUtxosList()
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.rpcpb.Utxo.serializeBinaryToWriter
    )
  }
}


/**
 * optional int32 code = 1;
 * @return {number}
 */
proto.rpcpb.FetchUtxosResp.prototype.getCode = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0))
}


/** @param {number} value */
proto.rpcpb.FetchUtxosResp.prototype.setCode = function (value) {
  jspb.Message.setProto3IntField(this, 1, value)
}


/**
 * optional string message = 2;
 * @return {string}
 */
proto.rpcpb.FetchUtxosResp.prototype.getMessage = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''))
}


/** @param {string} value */
proto.rpcpb.FetchUtxosResp.prototype.setMessage = function (value) {
  jspb.Message.setProto3StringField(this, 2, value)
}


/**
 * repeated Utxo utxos = 3;
 * @return {!Array<!proto.rpcpb.Utxo>}
 */
proto.rpcpb.FetchUtxosResp.prototype.getUtxosList = function () {
  return /** @type{!Array<!proto.rpcpb.Utxo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rpcpb.Utxo, 3))
}


/** @param {!Array<!proto.rpcpb.Utxo>} value */
proto.rpcpb.FetchUtxosResp.prototype.setUtxosList = function (value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value)
}


/**
 * @param {!proto.rpcpb.Utxo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.rpcpb.Utxo}
 */
proto.rpcpb.FetchUtxosResp.prototype.addUtxos = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.rpcpb.Utxo, opt_index)
}


/**
 * Clears the list making it empty but non-null.
 */
proto.rpcpb.FetchUtxosResp.prototype.clearUtxosList = function () {
  this.setUtxosList([])
}





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.rpcpb.GetRawTransactionRequest.prototype.toObject = function (opt_includeInstance) {
    return proto.rpcpb.GetRawTransactionRequest.toObject(opt_includeInstance, this)
  }


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.rpcpb.GetRawTransactionRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.rpcpb.GetRawTransactionRequest.toObject = function (includeInstance, msg) {
    var f, obj = {
      hash: msg.getHash_asB64()
    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpcpb.GetRawTransactionRequest}
 */
proto.rpcpb.GetRawTransactionRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.rpcpb.GetRawTransactionRequest
  return proto.rpcpb.GetRawTransactionRequest.deserializeBinaryFromReader(msg, reader)
}


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpcpb.GetRawTransactionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpcpb.GetRawTransactionRequest}
 */
proto.rpcpb.GetRawTransactionRequest.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {!Uint8Array} */ (reader.readBytes())
        msg.setHash(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpcpb.GetRawTransactionRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.rpcpb.GetRawTransactionRequest.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpcpb.GetRawTransactionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpcpb.GetRawTransactionRequest.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getHash_asU8()
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    )
  }
}


/**
 * optional bytes hash = 1;
 * @return {!(string|Uint8Array)}
 */
proto.rpcpb.GetRawTransactionRequest.prototype.getHash = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
}


/**
 * optional bytes hash = 1;
 * This is a type-conversion wrapper around `getHash()`
 * @return {string}
 */
proto.rpcpb.GetRawTransactionRequest.prototype.getHash_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
    this.getHash()))
}


/**
 * optional bytes hash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHash()`
 * @return {!Uint8Array}
 */
proto.rpcpb.GetRawTransactionRequest.prototype.getHash_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
    this.getHash()))
}


/** @param {!(string|Uint8Array)} value */
proto.rpcpb.GetRawTransactionRequest.prototype.setHash = function (value) {
  jspb.Message.setProto3BytesField(this, 1, value)
}





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.rpcpb.GetRawTransactionResponse.prototype.toObject = function (opt_includeInstance) {
    return proto.rpcpb.GetRawTransactionResponse.toObject(opt_includeInstance, this)
  }


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.rpcpb.GetRawTransactionResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.rpcpb.GetRawTransactionResponse.toObject = function (includeInstance, msg) {
    var f, obj = {
      tx: (f = msg.getTx()) && proto.corepb.Transaction.toObject(includeInstance, f)
    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpcpb.GetRawTransactionResponse}
 */
proto.rpcpb.GetRawTransactionResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.rpcpb.GetRawTransactionResponse
  return proto.rpcpb.GetRawTransactionResponse.deserializeBinaryFromReader(msg, reader)
}


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpcpb.GetRawTransactionResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpcpb.GetRawTransactionResponse}
 */
proto.rpcpb.GetRawTransactionResponse.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = new proto.corepb.Transaction
        reader.readMessage(value, proto.corepb.Transaction.deserializeBinaryFromReader)
        msg.setTx(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpcpb.GetRawTransactionResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.rpcpb.GetRawTransactionResponse.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpcpb.GetRawTransactionResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpcpb.GetRawTransactionResponse.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getTx()
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.corepb.Transaction.serializeBinaryToWriter
    )
  }
}


/**
 * optional corepb.Transaction tx = 1;
 * @return {?proto.corepb.Transaction}
 */
proto.rpcpb.GetRawTransactionResponse.prototype.getTx = function () {
  return /** @type{?proto.corepb.Transaction} */ (
    jspb.Message.getWrapperField(this, proto.corepb.Transaction, 1))
}


/** @param {?proto.corepb.Transaction|undefined} value */
proto.rpcpb.GetRawTransactionResponse.prototype.setTx = function (value) {
  jspb.Message.setWrapperField(this, 1, value)
}


/**
 * Clears the message field making it undefined.
 */
proto.rpcpb.GetRawTransactionResponse.prototype.clearTx = function () {
  this.setTx(undefined)
}


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rpcpb.GetRawTransactionResponse.prototype.hasTx = function () {
  return jspb.Message.getField(this, 1) != null
}





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.rpcpb.SendTransactionReq.prototype.toObject = function (opt_includeInstance) {
    return proto.rpcpb.SendTransactionReq.toObject(opt_includeInstance, this)
  }


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.rpcpb.SendTransactionReq} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.rpcpb.SendTransactionReq.toObject = function (includeInstance, msg) {
    var f, obj = {
      tx: (f = msg.getTx()) && proto.corepb.Transaction.toObject(includeInstance, f)
    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpcpb.SendTransactionReq}
 */
proto.rpcpb.SendTransactionReq.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.rpcpb.SendTransactionReq
  return proto.rpcpb.SendTransactionReq.deserializeBinaryFromReader(msg, reader)
}


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpcpb.SendTransactionReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpcpb.SendTransactionReq}
 */
proto.rpcpb.SendTransactionReq.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = new proto.corepb.Transaction
        reader.readMessage(value, proto.corepb.Transaction.deserializeBinaryFromReader)
        msg.setTx(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpcpb.SendTransactionReq.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.rpcpb.SendTransactionReq.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpcpb.SendTransactionReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpcpb.SendTransactionReq.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getTx()
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.corepb.Transaction.serializeBinaryToWriter
    )
  }
}


/**
 * optional corepb.Transaction tx = 1;
 * @return {?proto.corepb.Transaction}
 */
proto.rpcpb.SendTransactionReq.prototype.getTx = function () {
  return /** @type{?proto.corepb.Transaction} */ (
    jspb.Message.getWrapperField(this, proto.corepb.Transaction, 1))
}


/** @param {?proto.corepb.Transaction|undefined} value */
proto.rpcpb.SendTransactionReq.prototype.setTx = function (value) {
  jspb.Message.setWrapperField(this, 1, value)
}


/**
 * Clears the message field making it undefined.
 */
proto.rpcpb.SendTransactionReq.prototype.clearTx = function () {
  this.setTx(undefined)
}


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rpcpb.SendTransactionReq.prototype.hasTx = function () {
  return jspb.Message.getField(this, 1) != null
}





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.rpcpb.SendTransactionResp.prototype.toObject = function (opt_includeInstance) {
    return proto.rpcpb.SendTransactionResp.toObject(opt_includeInstance, this)
  }


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.rpcpb.SendTransactionResp} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.rpcpb.SendTransactionResp.toObject = function (includeInstance, msg) {
    var f, obj = {
      code: jspb.Message.getFieldWithDefault(msg, 1, 0),
      message: jspb.Message.getFieldWithDefault(msg, 2, ''),
      hash: jspb.Message.getFieldWithDefault(msg, 3, '')
    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpcpb.SendTransactionResp}
 */
proto.rpcpb.SendTransactionResp.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.rpcpb.SendTransactionResp
  return proto.rpcpb.SendTransactionResp.deserializeBinaryFromReader(msg, reader)
}


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpcpb.SendTransactionResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpcpb.SendTransactionResp}
 */
proto.rpcpb.SendTransactionResp.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readInt32())
        msg.setCode(value)
        break
      case 2:
        var value = /** @type {string} */ (reader.readString())
        msg.setMessage(value)
        break
      case 3:
        var value = /** @type {string} */ (reader.readString())
        msg.setHash(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpcpb.SendTransactionResp.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.rpcpb.SendTransactionResp.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpcpb.SendTransactionResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpcpb.SendTransactionResp.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getCode()
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    )
  }
  f = message.getMessage()
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    )
  }
  f = message.getHash()
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    )
  }
}


/**
 * optional int32 code = 1;
 * @return {number}
 */
proto.rpcpb.SendTransactionResp.prototype.getCode = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0))
}


/** @param {number} value */
proto.rpcpb.SendTransactionResp.prototype.setCode = function (value) {
  jspb.Message.setProto3IntField(this, 1, value)
}


/**
 * optional string message = 2;
 * @return {string}
 */
proto.rpcpb.SendTransactionResp.prototype.getMessage = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''))
}


/** @param {string} value */
proto.rpcpb.SendTransactionResp.prototype.setMessage = function (value) {
  jspb.Message.setProto3StringField(this, 2, value)
}


/**
 * optional string hash = 3;
 * @return {string}
 */
proto.rpcpb.SendTransactionResp.prototype.getHash = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''))
}


/** @param {string} value */
proto.rpcpb.SendTransactionResp.prototype.setHash = function (value) {
  jspb.Message.setProto3StringField(this, 3, value)
}





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.rpcpb.GetFeePriceRequest.prototype.toObject = function (opt_includeInstance) {
    return proto.rpcpb.GetFeePriceRequest.toObject(opt_includeInstance, this)
  }


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.rpcpb.GetFeePriceRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.rpcpb.GetFeePriceRequest.toObject = function (includeInstance, msg) {
    var f, obj = {

    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpcpb.GetFeePriceRequest}
 */
proto.rpcpb.GetFeePriceRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.rpcpb.GetFeePriceRequest
  return proto.rpcpb.GetFeePriceRequest.deserializeBinaryFromReader(msg, reader)
}


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpcpb.GetFeePriceRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpcpb.GetFeePriceRequest}
 */
proto.rpcpb.GetFeePriceRequest.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      default:
        reader.skipField()
        break
    }
  }
  return msg
}


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpcpb.GetFeePriceRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.rpcpb.GetFeePriceRequest.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpcpb.GetFeePriceRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpcpb.GetFeePriceRequest.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
}





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.rpcpb.GetFeePriceResponse.prototype.toObject = function (opt_includeInstance) {
    return proto.rpcpb.GetFeePriceResponse.toObject(opt_includeInstance, this)
  }


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.rpcpb.GetFeePriceResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.rpcpb.GetFeePriceResponse.toObject = function (includeInstance, msg) {
    var f, obj = {
      boxPerByte: jspb.Message.getFieldWithDefault(msg, 1, 0)
    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpcpb.GetFeePriceResponse}
 */
proto.rpcpb.GetFeePriceResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.rpcpb.GetFeePriceResponse
  return proto.rpcpb.GetFeePriceResponse.deserializeBinaryFromReader(msg, reader)
}


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpcpb.GetFeePriceResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpcpb.GetFeePriceResponse}
 */
proto.rpcpb.GetFeePriceResponse.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readUint64())
        msg.setBoxPerByte(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpcpb.GetFeePriceResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.rpcpb.GetFeePriceResponse.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpcpb.GetFeePriceResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpcpb.GetFeePriceResponse.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getBoxPerByte()
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    )
  }
}


/**
 * optional uint64 box_per_byte = 1;
 * @return {number}
 */
proto.rpcpb.GetFeePriceResponse.prototype.getBoxPerByte = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0))
}


/** @param {number} value */
proto.rpcpb.GetFeePriceResponse.prototype.setBoxPerByte = function (value) {
  jspb.Message.setProto3IntField(this, 1, value)
}



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rpcpb.MakeTxReq.repeatedFields_ = [2, 3]



if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.rpcpb.MakeTxReq.prototype.toObject = function (opt_includeInstance) {
    return proto.rpcpb.MakeTxReq.toObject(opt_includeInstance, this)
  }


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.rpcpb.MakeTxReq} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.rpcpb.MakeTxReq.toObject = function (includeInstance, msg) {
    var f, obj = {
      from: jspb.Message.getFieldWithDefault(msg, 1, ''),
      toList: jspb.Message.getRepeatedField(msg, 2),
      amountsList: jspb.Message.getRepeatedField(msg, 3),
      gasPrice: jspb.Message.getFieldWithDefault(msg, 4, 0)
    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpcpb.MakeTxReq}
 */
proto.rpcpb.MakeTxReq.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.rpcpb.MakeTxReq
  return proto.rpcpb.MakeTxReq.deserializeBinaryFromReader(msg, reader)
}


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpcpb.MakeTxReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpcpb.MakeTxReq}
 */
proto.rpcpb.MakeTxReq.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString())
        msg.setFrom(value)
        break
      case 2:
        var value = /** @type {string} */ (reader.readString())
        msg.addTo(value)
        break
      case 3:
        var value = /** @type {!Array<number>} */ (reader.readPackedUint64())
        msg.setAmountsList(value)
        break
      case 4:
        var value = /** @type {number} */ (reader.readUint64())
        msg.setGasPrice(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpcpb.MakeTxReq.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.rpcpb.MakeTxReq.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpcpb.MakeTxReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpcpb.MakeTxReq.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getFrom()
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    )
  }
  f = message.getToList()
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    )
  }
  f = message.getAmountsList()
  if (f.length > 0) {
    writer.writePackedUint64(
      3,
      f
    )
  }
  f = message.getGasPrice()
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    )
  }
}


/**
 * optional string from = 1;
 * @return {string}
 */
proto.rpcpb.MakeTxReq.prototype.getFrom = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
}


/** @param {string} value */
proto.rpcpb.MakeTxReq.prototype.setFrom = function (value) {
  jspb.Message.setProto3StringField(this, 1, value)
}


/**
 * repeated string to = 2;
 * @return {!Array<string>}
 */
proto.rpcpb.MakeTxReq.prototype.getToList = function () {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2))
}


/** @param {!Array<string>} value */
proto.rpcpb.MakeTxReq.prototype.setToList = function (value) {
  jspb.Message.setField(this, 2, value || [])
}


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.rpcpb.MakeTxReq.prototype.addTo = function (value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index)
}


/**
 * Clears the list making it empty but non-null.
 */
proto.rpcpb.MakeTxReq.prototype.clearToList = function () {
  this.setToList([])
}


/**
 * repeated uint64 amounts = 3;
 * @return {!Array<number>}
 */
proto.rpcpb.MakeTxReq.prototype.getAmountsList = function () {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 3))
}


/** @param {!Array<number>} value */
proto.rpcpb.MakeTxReq.prototype.setAmountsList = function (value) {
  jspb.Message.setField(this, 3, value || [])
}


/**
 * @param {number} value
 * @param {number=} opt_index
 */
proto.rpcpb.MakeTxReq.prototype.addAmounts = function (value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index)
}


/**
 * Clears the list making it empty but non-null.
 */
proto.rpcpb.MakeTxReq.prototype.clearAmountsList = function () {
  this.setAmountsList([])
}


/**
 * optional uint64 gas_price = 4;
 * @return {number}
 */
proto.rpcpb.MakeTxReq.prototype.getGasPrice = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0))
}


/** @param {number} value */
proto.rpcpb.MakeTxReq.prototype.setGasPrice = function (value) {
  jspb.Message.setProto3IntField(this, 4, value)
}



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rpcpb.MakeTxResp.repeatedFields_ = [4]



if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.rpcpb.MakeTxResp.prototype.toObject = function (opt_includeInstance) {
    return proto.rpcpb.MakeTxResp.toObject(opt_includeInstance, this)
  }


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.rpcpb.MakeTxResp} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.rpcpb.MakeTxResp.toObject = function (includeInstance, msg) {
    var f, obj = {
      code: jspb.Message.getFieldWithDefault(msg, 1, 0),
      message: jspb.Message.getFieldWithDefault(msg, 2, ''),
      tx: (f = msg.getTx()) && proto.corepb.Transaction.toObject(includeInstance, f),
      rawmsgsList: msg.getRawmsgsList_asB64()
    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpcpb.MakeTxResp}
 */
proto.rpcpb.MakeTxResp.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.rpcpb.MakeTxResp
  return proto.rpcpb.MakeTxResp.deserializeBinaryFromReader(msg, reader)
}


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpcpb.MakeTxResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpcpb.MakeTxResp}
 */
proto.rpcpb.MakeTxResp.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readInt32())
        msg.setCode(value)
        break
      case 2:
        var value = /** @type {string} */ (reader.readString())
        msg.setMessage(value)
        break
      case 3:
        var value = new proto.corepb.Transaction
        reader.readMessage(value, proto.corepb.Transaction.deserializeBinaryFromReader)
        msg.setTx(value)
        break
      case 4:
        var value = /** @type {!Uint8Array} */ (reader.readBytes())
        msg.addRawmsgs(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpcpb.MakeTxResp.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.rpcpb.MakeTxResp.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpcpb.MakeTxResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpcpb.MakeTxResp.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getCode()
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    )
  }
  f = message.getMessage()
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    )
  }
  f = message.getTx()
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.corepb.Transaction.serializeBinaryToWriter
    )
  }
  f = message.getRawmsgsList_asU8()
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      4,
      f
    )
  }
}


/**
 * optional int32 code = 1;
 * @return {number}
 */
proto.rpcpb.MakeTxResp.prototype.getCode = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0))
}


/** @param {number} value */
proto.rpcpb.MakeTxResp.prototype.setCode = function (value) {
  jspb.Message.setProto3IntField(this, 1, value)
}


/**
 * optional string message = 2;
 * @return {string}
 */
proto.rpcpb.MakeTxResp.prototype.getMessage = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''))
}


/** @param {string} value */
proto.rpcpb.MakeTxResp.prototype.setMessage = function (value) {
  jspb.Message.setProto3StringField(this, 2, value)
}


/**
 * optional corepb.Transaction tx = 3;
 * @return {?proto.corepb.Transaction}
 */
proto.rpcpb.MakeTxResp.prototype.getTx = function () {
  return /** @type{?proto.corepb.Transaction} */ (
    jspb.Message.getWrapperField(this, proto.corepb.Transaction, 3))
}


/** @param {?proto.corepb.Transaction|undefined} value */
proto.rpcpb.MakeTxResp.prototype.setTx = function (value) {
  jspb.Message.setWrapperField(this, 3, value)
}


/**
 * Clears the message field making it undefined.
 */
proto.rpcpb.MakeTxResp.prototype.clearTx = function () {
  this.setTx(undefined)
}


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rpcpb.MakeTxResp.prototype.hasTx = function () {
  return jspb.Message.getField(this, 3) != null
}


/**
 * repeated bytes rawMsgs = 4;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.rpcpb.MakeTxResp.prototype.getRawmsgsList = function () {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 4))
}


/**
 * repeated bytes rawMsgs = 4;
 * This is a type-conversion wrapper around `getRawmsgsList()`
 * @return {!Array<string>}
 */
proto.rpcpb.MakeTxResp.prototype.getRawmsgsList_asB64 = function () {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
    this.getRawmsgsList()))
}


/**
 * repeated bytes rawMsgs = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRawmsgsList()`
 * @return {!Array<!Uint8Array>}
 */
proto.rpcpb.MakeTxResp.prototype.getRawmsgsList_asU8 = function () {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
    this.getRawmsgsList()))
}


/** @param {!(Array<!Uint8Array>|Array<string>)} value */
proto.rpcpb.MakeTxResp.prototype.setRawmsgsList = function (value) {
  jspb.Message.setField(this, 4, value || [])
}


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 */
proto.rpcpb.MakeTxResp.prototype.addRawmsgs = function (value, opt_index) {
  jspb.Message.addToRepeatedField(this, 4, value, opt_index)
}


/**
 * Clears the list making it empty but non-null.
 */
proto.rpcpb.MakeTxResp.prototype.clearRawmsgsList = function () {
  this.setRawmsgsList([])
}



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rpcpb.MakeSplitAddrTxReq.repeatedFields_ = [2, 3]



if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.rpcpb.MakeSplitAddrTxReq.prototype.toObject = function (opt_includeInstance) {
    return proto.rpcpb.MakeSplitAddrTxReq.toObject(opt_includeInstance, this)
  }


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.rpcpb.MakeSplitAddrTxReq} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.rpcpb.MakeSplitAddrTxReq.toObject = function (includeInstance, msg) {
    var f, obj = {
      from: jspb.Message.getFieldWithDefault(msg, 1, ''),
      addrsList: jspb.Message.getRepeatedField(msg, 2),
      weightsList: jspb.Message.getRepeatedField(msg, 3),
      gasPrice: jspb.Message.getFieldWithDefault(msg, 4, 0)
    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpcpb.MakeSplitAddrTxReq}
 */
proto.rpcpb.MakeSplitAddrTxReq.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.rpcpb.MakeSplitAddrTxReq
  return proto.rpcpb.MakeSplitAddrTxReq.deserializeBinaryFromReader(msg, reader)
}


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpcpb.MakeSplitAddrTxReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpcpb.MakeSplitAddrTxReq}
 */
proto.rpcpb.MakeSplitAddrTxReq.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString())
        msg.setFrom(value)
        break
      case 2:
        var value = /** @type {string} */ (reader.readString())
        msg.addAddrs(value)
        break
      case 3:
        var value = /** @type {!Array<number>} */ (reader.readPackedUint64())
        msg.setWeightsList(value)
        break
      case 4:
        var value = /** @type {number} */ (reader.readUint64())
        msg.setGasPrice(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpcpb.MakeSplitAddrTxReq.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.rpcpb.MakeSplitAddrTxReq.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpcpb.MakeSplitAddrTxReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpcpb.MakeSplitAddrTxReq.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getFrom()
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    )
  }
  f = message.getAddrsList()
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    )
  }
  f = message.getWeightsList()
  if (f.length > 0) {
    writer.writePackedUint64(
      3,
      f
    )
  }
  f = message.getGasPrice()
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    )
  }
}


/**
 * optional string from = 1;
 * @return {string}
 */
proto.rpcpb.MakeSplitAddrTxReq.prototype.getFrom = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
}


/** @param {string} value */
proto.rpcpb.MakeSplitAddrTxReq.prototype.setFrom = function (value) {
  jspb.Message.setProto3StringField(this, 1, value)
}


/**
 * repeated string addrs = 2;
 * @return {!Array<string>}
 */
proto.rpcpb.MakeSplitAddrTxReq.prototype.getAddrsList = function () {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2))
}


/** @param {!Array<string>} value */
proto.rpcpb.MakeSplitAddrTxReq.prototype.setAddrsList = function (value) {
  jspb.Message.setField(this, 2, value || [])
}


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.rpcpb.MakeSplitAddrTxReq.prototype.addAddrs = function (value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index)
}


/**
 * Clears the list making it empty but non-null.
 */
proto.rpcpb.MakeSplitAddrTxReq.prototype.clearAddrsList = function () {
  this.setAddrsList([])
}


/**
 * repeated uint64 weights = 3;
 * @return {!Array<number>}
 */
proto.rpcpb.MakeSplitAddrTxReq.prototype.getWeightsList = function () {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 3))
}


/** @param {!Array<number>} value */
proto.rpcpb.MakeSplitAddrTxReq.prototype.setWeightsList = function (value) {
  jspb.Message.setField(this, 3, value || [])
}


/**
 * @param {number} value
 * @param {number=} opt_index
 */
proto.rpcpb.MakeSplitAddrTxReq.prototype.addWeights = function (value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index)
}


/**
 * Clears the list making it empty but non-null.
 */
proto.rpcpb.MakeSplitAddrTxReq.prototype.clearWeightsList = function () {
  this.setWeightsList([])
}


/**
 * optional uint64 gas_price = 4;
 * @return {number}
 */
proto.rpcpb.MakeSplitAddrTxReq.prototype.getGasPrice = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0))
}


/** @param {number} value */
proto.rpcpb.MakeSplitAddrTxReq.prototype.setGasPrice = function (value) {
  jspb.Message.setProto3IntField(this, 4, value)
}



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rpcpb.MakeSplitAddrTxResp.repeatedFields_ = [5]



if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.rpcpb.MakeSplitAddrTxResp.prototype.toObject = function (opt_includeInstance) {
    return proto.rpcpb.MakeSplitAddrTxResp.toObject(opt_includeInstance, this)
  }


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.rpcpb.MakeSplitAddrTxResp} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.rpcpb.MakeSplitAddrTxResp.toObject = function (includeInstance, msg) {
    var f, obj = {
      code: jspb.Message.getFieldWithDefault(msg, 1, 0),
      message: jspb.Message.getFieldWithDefault(msg, 2, ''),
      splitaddr: jspb.Message.getFieldWithDefault(msg, 3, ''),
      tx: (f = msg.getTx()) && proto.corepb.Transaction.toObject(includeInstance, f),
      rawmsgsList: msg.getRawmsgsList_asB64()
    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpcpb.MakeSplitAddrTxResp}
 */
proto.rpcpb.MakeSplitAddrTxResp.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.rpcpb.MakeSplitAddrTxResp
  return proto.rpcpb.MakeSplitAddrTxResp.deserializeBinaryFromReader(msg, reader)
}


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpcpb.MakeSplitAddrTxResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpcpb.MakeSplitAddrTxResp}
 */
proto.rpcpb.MakeSplitAddrTxResp.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readInt32())
        msg.setCode(value)
        break
      case 2:
        var value = /** @type {string} */ (reader.readString())
        msg.setMessage(value)
        break
      case 3:
        var value = /** @type {string} */ (reader.readString())
        msg.setSplitaddr(value)
        break
      case 4:
        var value = new proto.corepb.Transaction
        reader.readMessage(value, proto.corepb.Transaction.deserializeBinaryFromReader)
        msg.setTx(value)
        break
      case 5:
        var value = /** @type {!Uint8Array} */ (reader.readBytes())
        msg.addRawmsgs(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpcpb.MakeSplitAddrTxResp.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.rpcpb.MakeSplitAddrTxResp.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpcpb.MakeSplitAddrTxResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpcpb.MakeSplitAddrTxResp.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getCode()
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    )
  }
  f = message.getMessage()
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    )
  }
  f = message.getSplitaddr()
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    )
  }
  f = message.getTx()
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.corepb.Transaction.serializeBinaryToWriter
    )
  }
  f = message.getRawmsgsList_asU8()
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      5,
      f
    )
  }
}


/**
 * optional int32 code = 1;
 * @return {number}
 */
proto.rpcpb.MakeSplitAddrTxResp.prototype.getCode = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0))
}


/** @param {number} value */
proto.rpcpb.MakeSplitAddrTxResp.prototype.setCode = function (value) {
  jspb.Message.setProto3IntField(this, 1, value)
}


/**
 * optional string message = 2;
 * @return {string}
 */
proto.rpcpb.MakeSplitAddrTxResp.prototype.getMessage = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''))
}


/** @param {string} value */
proto.rpcpb.MakeSplitAddrTxResp.prototype.setMessage = function (value) {
  jspb.Message.setProto3StringField(this, 2, value)
}


/**
 * optional string splitAddr = 3;
 * @return {string}
 */
proto.rpcpb.MakeSplitAddrTxResp.prototype.getSplitaddr = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''))
}


/** @param {string} value */
proto.rpcpb.MakeSplitAddrTxResp.prototype.setSplitaddr = function (value) {
  jspb.Message.setProto3StringField(this, 3, value)
}


/**
 * optional corepb.Transaction tx = 4;
 * @return {?proto.corepb.Transaction}
 */
proto.rpcpb.MakeSplitAddrTxResp.prototype.getTx = function () {
  return /** @type{?proto.corepb.Transaction} */ (
    jspb.Message.getWrapperField(this, proto.corepb.Transaction, 4))
}


/** @param {?proto.corepb.Transaction|undefined} value */
proto.rpcpb.MakeSplitAddrTxResp.prototype.setTx = function (value) {
  jspb.Message.setWrapperField(this, 4, value)
}


/**
 * Clears the message field making it undefined.
 */
proto.rpcpb.MakeSplitAddrTxResp.prototype.clearTx = function () {
  this.setTx(undefined)
}


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rpcpb.MakeSplitAddrTxResp.prototype.hasTx = function () {
  return jspb.Message.getField(this, 4) != null
}


/**
 * repeated bytes rawMsgs = 5;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.rpcpb.MakeSplitAddrTxResp.prototype.getRawmsgsList = function () {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 5))
}


/**
 * repeated bytes rawMsgs = 5;
 * This is a type-conversion wrapper around `getRawmsgsList()`
 * @return {!Array<string>}
 */
proto.rpcpb.MakeSplitAddrTxResp.prototype.getRawmsgsList_asB64 = function () {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
    this.getRawmsgsList()))
}


/**
 * repeated bytes rawMsgs = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRawmsgsList()`
 * @return {!Array<!Uint8Array>}
 */
proto.rpcpb.MakeSplitAddrTxResp.prototype.getRawmsgsList_asU8 = function () {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
    this.getRawmsgsList()))
}


/** @param {!(Array<!Uint8Array>|Array<string>)} value */
proto.rpcpb.MakeSplitAddrTxResp.prototype.setRawmsgsList = function (value) {
  jspb.Message.setField(this, 5, value || [])
}


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 */
proto.rpcpb.MakeSplitAddrTxResp.prototype.addRawmsgs = function (value, opt_index) {
  jspb.Message.addToRepeatedField(this, 5, value, opt_index)
}


/**
 * Clears the list making it empty but non-null.
 */
proto.rpcpb.MakeSplitAddrTxResp.prototype.clearRawmsgsList = function () {
  this.setRawmsgsList([])
}





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.rpcpb.MakeTokenIssueTxReq.prototype.toObject = function (opt_includeInstance) {
    return proto.rpcpb.MakeTokenIssueTxReq.toObject(opt_includeInstance, this)
  }


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.rpcpb.MakeTokenIssueTxReq} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.rpcpb.MakeTokenIssueTxReq.toObject = function (includeInstance, msg) {
    var f, obj = {
      issuer: jspb.Message.getFieldWithDefault(msg, 1, ''),
      owner: jspb.Message.getFieldWithDefault(msg, 2, ''),
      tag: (f = msg.getTag()) && proto.rpcpb.TokenTag.toObject(includeInstance, f),
      gasPrice: jspb.Message.getFieldWithDefault(msg, 4, 0)
    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpcpb.MakeTokenIssueTxReq}
 */
proto.rpcpb.MakeTokenIssueTxReq.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.rpcpb.MakeTokenIssueTxReq
  return proto.rpcpb.MakeTokenIssueTxReq.deserializeBinaryFromReader(msg, reader)
}


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpcpb.MakeTokenIssueTxReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpcpb.MakeTokenIssueTxReq}
 */
proto.rpcpb.MakeTokenIssueTxReq.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString())
        msg.setIssuer(value)
        break
      case 2:
        var value = /** @type {string} */ (reader.readString())
        msg.setOwner(value)
        break
      case 3:
        var value = new proto.rpcpb.TokenTag
        reader.readMessage(value, proto.rpcpb.TokenTag.deserializeBinaryFromReader)
        msg.setTag(value)
        break
      case 4:
        var value = /** @type {number} */ (reader.readUint64())
        msg.setGasPrice(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpcpb.MakeTokenIssueTxReq.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.rpcpb.MakeTokenIssueTxReq.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpcpb.MakeTokenIssueTxReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpcpb.MakeTokenIssueTxReq.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getIssuer()
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    )
  }
  f = message.getOwner()
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    )
  }
  f = message.getTag()
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.rpcpb.TokenTag.serializeBinaryToWriter
    )
  }
  f = message.getGasPrice()
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    )
  }
}


/**
 * optional string issuer = 1;
 * @return {string}
 */
proto.rpcpb.MakeTokenIssueTxReq.prototype.getIssuer = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
}


/** @param {string} value */
proto.rpcpb.MakeTokenIssueTxReq.prototype.setIssuer = function (value) {
  jspb.Message.setProto3StringField(this, 1, value)
}


/**
 * optional string owner = 2;
 * @return {string}
 */
proto.rpcpb.MakeTokenIssueTxReq.prototype.getOwner = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''))
}


/** @param {string} value */
proto.rpcpb.MakeTokenIssueTxReq.prototype.setOwner = function (value) {
  jspb.Message.setProto3StringField(this, 2, value)
}


/**
 * optional TokenTag tag = 3;
 * @return {?proto.rpcpb.TokenTag}
 */
proto.rpcpb.MakeTokenIssueTxReq.prototype.getTag = function () {
  return /** @type{?proto.rpcpb.TokenTag} */ (
    jspb.Message.getWrapperField(this, proto.rpcpb.TokenTag, 3))
}


/** @param {?proto.rpcpb.TokenTag|undefined} value */
proto.rpcpb.MakeTokenIssueTxReq.prototype.setTag = function (value) {
  jspb.Message.setWrapperField(this, 3, value)
}


/**
 * Clears the message field making it undefined.
 */
proto.rpcpb.MakeTokenIssueTxReq.prototype.clearTag = function () {
  this.setTag(undefined)
}


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rpcpb.MakeTokenIssueTxReq.prototype.hasTag = function () {
  return jspb.Message.getField(this, 3) != null
}


/**
 * optional uint64 gas_price = 4;
 * @return {number}
 */
proto.rpcpb.MakeTokenIssueTxReq.prototype.getGasPrice = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0))
}


/** @param {number} value */
proto.rpcpb.MakeTokenIssueTxReq.prototype.setGasPrice = function (value) {
  jspb.Message.setProto3IntField(this, 4, value)
}



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rpcpb.MakeTokenIssueTxResp.repeatedFields_ = [5]



if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.rpcpb.MakeTokenIssueTxResp.prototype.toObject = function (opt_includeInstance) {
    return proto.rpcpb.MakeTokenIssueTxResp.toObject(opt_includeInstance, this)
  }


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.rpcpb.MakeTokenIssueTxResp} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.rpcpb.MakeTokenIssueTxResp.toObject = function (includeInstance, msg) {
    var f, obj = {
      code: jspb.Message.getFieldWithDefault(msg, 1, 0),
      message: jspb.Message.getFieldWithDefault(msg, 2, ''),
      issueOutIndex: jspb.Message.getFieldWithDefault(msg, 3, 0),
      tx: (f = msg.getTx()) && proto.corepb.Transaction.toObject(includeInstance, f),
      rawmsgsList: msg.getRawmsgsList_asB64()
    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpcpb.MakeTokenIssueTxResp}
 */
proto.rpcpb.MakeTokenIssueTxResp.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.rpcpb.MakeTokenIssueTxResp
  return proto.rpcpb.MakeTokenIssueTxResp.deserializeBinaryFromReader(msg, reader)
}


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpcpb.MakeTokenIssueTxResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpcpb.MakeTokenIssueTxResp}
 */
proto.rpcpb.MakeTokenIssueTxResp.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readInt32())
        msg.setCode(value)
        break
      case 2:
        var value = /** @type {string} */ (reader.readString())
        msg.setMessage(value)
        break
      case 3:
        var value = /** @type {number} */ (reader.readUint32())
        msg.setIssueOutIndex(value)
        break
      case 4:
        var value = new proto.corepb.Transaction
        reader.readMessage(value, proto.corepb.Transaction.deserializeBinaryFromReader)
        msg.setTx(value)
        break
      case 5:
        var value = /** @type {!Uint8Array} */ (reader.readBytes())
        msg.addRawmsgs(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpcpb.MakeTokenIssueTxResp.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.rpcpb.MakeTokenIssueTxResp.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpcpb.MakeTokenIssueTxResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpcpb.MakeTokenIssueTxResp.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getCode()
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    )
  }
  f = message.getMessage()
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    )
  }
  f = message.getIssueOutIndex()
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    )
  }
  f = message.getTx()
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.corepb.Transaction.serializeBinaryToWriter
    )
  }
  f = message.getRawmsgsList_asU8()
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      5,
      f
    )
  }
}


/**
 * optional int32 code = 1;
 * @return {number}
 */
proto.rpcpb.MakeTokenIssueTxResp.prototype.getCode = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0))
}


/** @param {number} value */
proto.rpcpb.MakeTokenIssueTxResp.prototype.setCode = function (value) {
  jspb.Message.setProto3IntField(this, 1, value)
}


/**
 * optional string message = 2;
 * @return {string}
 */
proto.rpcpb.MakeTokenIssueTxResp.prototype.getMessage = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''))
}


/** @param {string} value */
proto.rpcpb.MakeTokenIssueTxResp.prototype.setMessage = function (value) {
  jspb.Message.setProto3StringField(this, 2, value)
}


/**
 * optional uint32 issue_out_index = 3;
 * @return {number}
 */
proto.rpcpb.MakeTokenIssueTxResp.prototype.getIssueOutIndex = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0))
}


/** @param {number} value */
proto.rpcpb.MakeTokenIssueTxResp.prototype.setIssueOutIndex = function (value) {
  jspb.Message.setProto3IntField(this, 3, value)
}


/**
 * optional corepb.Transaction tx = 4;
 * @return {?proto.corepb.Transaction}
 */
proto.rpcpb.MakeTokenIssueTxResp.prototype.getTx = function () {
  return /** @type{?proto.corepb.Transaction} */ (
    jspb.Message.getWrapperField(this, proto.corepb.Transaction, 4))
}


/** @param {?proto.corepb.Transaction|undefined} value */
proto.rpcpb.MakeTokenIssueTxResp.prototype.setTx = function (value) {
  jspb.Message.setWrapperField(this, 4, value)
}


/**
 * Clears the message field making it undefined.
 */
proto.rpcpb.MakeTokenIssueTxResp.prototype.clearTx = function () {
  this.setTx(undefined)
}


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rpcpb.MakeTokenIssueTxResp.prototype.hasTx = function () {
  return jspb.Message.getField(this, 4) != null
}


/**
 * repeated bytes rawMsgs = 5;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.rpcpb.MakeTokenIssueTxResp.prototype.getRawmsgsList = function () {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 5))
}


/**
 * repeated bytes rawMsgs = 5;
 * This is a type-conversion wrapper around `getRawmsgsList()`
 * @return {!Array<string>}
 */
proto.rpcpb.MakeTokenIssueTxResp.prototype.getRawmsgsList_asB64 = function () {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
    this.getRawmsgsList()))
}


/**
 * repeated bytes rawMsgs = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRawmsgsList()`
 * @return {!Array<!Uint8Array>}
 */
proto.rpcpb.MakeTokenIssueTxResp.prototype.getRawmsgsList_asU8 = function () {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
    this.getRawmsgsList()))
}


/** @param {!(Array<!Uint8Array>|Array<string>)} value */
proto.rpcpb.MakeTokenIssueTxResp.prototype.setRawmsgsList = function (value) {
  jspb.Message.setField(this, 5, value || [])
}


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 */
proto.rpcpb.MakeTokenIssueTxResp.prototype.addRawmsgs = function (value, opt_index) {
  jspb.Message.addToRepeatedField(this, 5, value, opt_index)
}


/**
 * Clears the list making it empty but non-null.
 */
proto.rpcpb.MakeTokenIssueTxResp.prototype.clearRawmsgsList = function () {
  this.setRawmsgsList([])
}



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rpcpb.MakeTokenTransferTxReq.repeatedFields_ = [2, 3]



if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.rpcpb.MakeTokenTransferTxReq.prototype.toObject = function (opt_includeInstance) {
    return proto.rpcpb.MakeTokenTransferTxReq.toObject(opt_includeInstance, this)
  }


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.rpcpb.MakeTokenTransferTxReq} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.rpcpb.MakeTokenTransferTxReq.toObject = function (includeInstance, msg) {
    var f, obj = {
      from: jspb.Message.getFieldWithDefault(msg, 1, ''),
      toList: jspb.Message.getRepeatedField(msg, 2),
      amountsList: jspb.Message.getRepeatedField(msg, 3),
      tokenHash: jspb.Message.getFieldWithDefault(msg, 4, ''),
      tokenIndex: jspb.Message.getFieldWithDefault(msg, 5, 0),
      gasPrice: jspb.Message.getFieldWithDefault(msg, 6, 0)
    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpcpb.MakeTokenTransferTxReq}
 */
proto.rpcpb.MakeTokenTransferTxReq.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.rpcpb.MakeTokenTransferTxReq
  return proto.rpcpb.MakeTokenTransferTxReq.deserializeBinaryFromReader(msg, reader)
}


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpcpb.MakeTokenTransferTxReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpcpb.MakeTokenTransferTxReq}
 */
proto.rpcpb.MakeTokenTransferTxReq.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString())
        msg.setFrom(value)
        break
      case 2:
        var value = /** @type {string} */ (reader.readString())
        msg.addTo(value)
        break
      case 3:
        var value = /** @type {!Array<number>} */ (reader.readPackedUint64())
        msg.setAmountsList(value)
        break
      case 4:
        var value = /** @type {string} */ (reader.readString())
        msg.setTokenHash(value)
        break
      case 5:
        var value = /** @type {number} */ (reader.readUint32())
        msg.setTokenIndex(value)
        break
      case 6:
        var value = /** @type {number} */ (reader.readUint64())
        msg.setGasPrice(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpcpb.MakeTokenTransferTxReq.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.rpcpb.MakeTokenTransferTxReq.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpcpb.MakeTokenTransferTxReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpcpb.MakeTokenTransferTxReq.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getFrom()
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    )
  }
  f = message.getToList()
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    )
  }
  f = message.getAmountsList()
  if (f.length > 0) {
    writer.writePackedUint64(
      3,
      f
    )
  }
  f = message.getTokenHash()
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    )
  }
  f = message.getTokenIndex()
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    )
  }
  f = message.getGasPrice()
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    )
  }
}


/**
 * optional string from = 1;
 * @return {string}
 */
proto.rpcpb.MakeTokenTransferTxReq.prototype.getFrom = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
}


/** @param {string} value */
proto.rpcpb.MakeTokenTransferTxReq.prototype.setFrom = function (value) {
  jspb.Message.setProto3StringField(this, 1, value)
}


/**
 * repeated string to = 2;
 * @return {!Array<string>}
 */
proto.rpcpb.MakeTokenTransferTxReq.prototype.getToList = function () {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2))
}


/** @param {!Array<string>} value */
proto.rpcpb.MakeTokenTransferTxReq.prototype.setToList = function (value) {
  jspb.Message.setField(this, 2, value || [])
}


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.rpcpb.MakeTokenTransferTxReq.prototype.addTo = function (value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index)
}


/**
 * Clears the list making it empty but non-null.
 */
proto.rpcpb.MakeTokenTransferTxReq.prototype.clearToList = function () {
  this.setToList([])
}


/**
 * repeated uint64 amounts = 3;
 * @return {!Array<number>}
 */
proto.rpcpb.MakeTokenTransferTxReq.prototype.getAmountsList = function () {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 3))
}


/** @param {!Array<number>} value */
proto.rpcpb.MakeTokenTransferTxReq.prototype.setAmountsList = function (value) {
  jspb.Message.setField(this, 3, value || [])
}


/**
 * @param {number} value
 * @param {number=} opt_index
 */
proto.rpcpb.MakeTokenTransferTxReq.prototype.addAmounts = function (value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index)
}


/**
 * Clears the list making it empty but non-null.
 */
proto.rpcpb.MakeTokenTransferTxReq.prototype.clearAmountsList = function () {
  this.setAmountsList([])
}


/**
 * optional string token_hash = 4;
 * @return {string}
 */
proto.rpcpb.MakeTokenTransferTxReq.prototype.getTokenHash = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ''))
}


/** @param {string} value */
proto.rpcpb.MakeTokenTransferTxReq.prototype.setTokenHash = function (value) {
  jspb.Message.setProto3StringField(this, 4, value)
}


/**
 * optional uint32 token_index = 5;
 * @return {number}
 */
proto.rpcpb.MakeTokenTransferTxReq.prototype.getTokenIndex = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0))
}


/** @param {number} value */
proto.rpcpb.MakeTokenTransferTxReq.prototype.setTokenIndex = function (value) {
  jspb.Message.setProto3IntField(this, 5, value)
}


/**
 * optional uint64 gas_price = 6;
 * @return {number}
 */
proto.rpcpb.MakeTokenTransferTxReq.prototype.getGasPrice = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0))
}


/** @param {number} value */
proto.rpcpb.MakeTokenTransferTxReq.prototype.setGasPrice = function (value) {
  jspb.Message.setProto3IntField(this, 6, value)
}





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.rpcpb.TokenTag.prototype.toObject = function (opt_includeInstance) {
    return proto.rpcpb.TokenTag.toObject(opt_includeInstance, this)
  }


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.rpcpb.TokenTag} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.rpcpb.TokenTag.toObject = function (includeInstance, msg) {
    var f, obj = {
      name: jspb.Message.getFieldWithDefault(msg, 1, ''),
      symbol: jspb.Message.getFieldWithDefault(msg, 2, ''),
      supply: jspb.Message.getFieldWithDefault(msg, 3, 0),
      decimal: jspb.Message.getFieldWithDefault(msg, 4, 0)
    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpcpb.TokenTag}
 */
proto.rpcpb.TokenTag.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.rpcpb.TokenTag
  return proto.rpcpb.TokenTag.deserializeBinaryFromReader(msg, reader)
}


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpcpb.TokenTag} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpcpb.TokenTag}
 */
proto.rpcpb.TokenTag.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString())
        msg.setName(value)
        break
      case 2:
        var value = /** @type {string} */ (reader.readString())
        msg.setSymbol(value)
        break
      case 3:
        var value = /** @type {number} */ (reader.readUint64())
        msg.setSupply(value)
        break
      case 4:
        var value = /** @type {number} */ (reader.readUint32())
        msg.setDecimal(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpcpb.TokenTag.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.rpcpb.TokenTag.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpcpb.TokenTag} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpcpb.TokenTag.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getName()
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    )
  }
  f = message.getSymbol()
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    )
  }
  f = message.getSupply()
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    )
  }
  f = message.getDecimal()
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    )
  }
}


/**
 * optional string name = 1;
 * @return {string}
 */
proto.rpcpb.TokenTag.prototype.getName = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
}


/** @param {string} value */
proto.rpcpb.TokenTag.prototype.setName = function (value) {
  jspb.Message.setProto3StringField(this, 1, value)
}


/**
 * optional string symbol = 2;
 * @return {string}
 */
proto.rpcpb.TokenTag.prototype.getSymbol = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''))
}


/** @param {string} value */
proto.rpcpb.TokenTag.prototype.setSymbol = function (value) {
  jspb.Message.setProto3StringField(this, 2, value)
}


/**
 * optional uint64 supply = 3;
 * @return {number}
 */
proto.rpcpb.TokenTag.prototype.getSupply = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0))
}


/** @param {number} value */
proto.rpcpb.TokenTag.prototype.setSupply = function (value) {
  jspb.Message.setProto3IntField(this, 3, value)
}


/**
 * optional uint32 decimal = 4;
 * @return {number}
 */
proto.rpcpb.TokenTag.prototype.getDecimal = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0))
}


/** @param {number} value */
proto.rpcpb.TokenTag.prototype.setDecimal = function (value) {
  jspb.Message.setProto3IntField(this, 4, value)
}





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.rpcpb.MakeContractTxReq.prototype.toObject = function (opt_includeInstance) {
    return proto.rpcpb.MakeContractTxReq.toObject(opt_includeInstance, this)
  }


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.rpcpb.MakeContractTxReq} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.rpcpb.MakeContractTxReq.toObject = function (includeInstance, msg) {
    var f, obj = {
      from: jspb.Message.getFieldWithDefault(msg, 1, ''),
      to: jspb.Message.getFieldWithDefault(msg, 2, ''),
      amount: jspb.Message.getFieldWithDefault(msg, 3, 0),
      gasPrice: jspb.Message.getFieldWithDefault(msg, 4, 0),
      gasLimit: jspb.Message.getFieldWithDefault(msg, 5, 0),
      nonce: jspb.Message.getFieldWithDefault(msg, 6, 0),
      isDeploy: jspb.Message.getFieldWithDefault(msg, 7, false),
      data: jspb.Message.getFieldWithDefault(msg, 8, '')
    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpcpb.MakeContractTxReq}
 */
proto.rpcpb.MakeContractTxReq.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.rpcpb.MakeContractTxReq
  return proto.rpcpb.MakeContractTxReq.deserializeBinaryFromReader(msg, reader)
}


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpcpb.MakeContractTxReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpcpb.MakeContractTxReq}
 */
proto.rpcpb.MakeContractTxReq.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString())
        msg.setFrom(value)
        break
      case 2:
        var value = /** @type {string} */ (reader.readString())
        msg.setTo(value)
        break
      case 3:
        var value = /** @type {number} */ (reader.readUint64())
        msg.setAmount(value)
        break
      case 4:
        var value = /** @type {number} */ (reader.readUint64())
        msg.setGasPrice(value)
        break
      case 5:
        var value = /** @type {number} */ (reader.readUint64())
        msg.setGasLimit(value)
        break
      case 6:
        var value = /** @type {number} */ (reader.readUint64())
        msg.setNonce(value)
        break
      case 7:
        var value = /** @type {boolean} */ (reader.readBool())
        msg.setIsDeploy(value)
        break
      case 8:
        var value = /** @type {string} */ (reader.readString())
        msg.setData(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpcpb.MakeContractTxReq.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.rpcpb.MakeContractTxReq.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpcpb.MakeContractTxReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpcpb.MakeContractTxReq.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getFrom()
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    )
  }
  f = message.getTo()
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    )
  }
  f = message.getAmount()
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    )
  }
  f = message.getGasPrice()
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    )
  }
  f = message.getGasLimit()
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    )
  }
  f = message.getNonce()
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    )
  }
  f = message.getIsDeploy()
  if (f) {
    writer.writeBool(
      7,
      f
    )
  }
  f = message.getData()
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    )
  }
}


/**
 * optional string from = 1;
 * @return {string}
 */
proto.rpcpb.MakeContractTxReq.prototype.getFrom = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
}


/** @param {string} value */
proto.rpcpb.MakeContractTxReq.prototype.setFrom = function (value) {
  jspb.Message.setProto3StringField(this, 1, value)
}


/**
 * optional string to = 2;
 * @return {string}
 */
proto.rpcpb.MakeContractTxReq.prototype.getTo = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''))
}


/** @param {string} value */
proto.rpcpb.MakeContractTxReq.prototype.setTo = function (value) {
  jspb.Message.setProto3StringField(this, 2, value)
}


/**
 * optional uint64 amount = 3;
 * @return {number}
 */
proto.rpcpb.MakeContractTxReq.prototype.getAmount = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0))
}


/** @param {number} value */
proto.rpcpb.MakeContractTxReq.prototype.setAmount = function (value) {
  jspb.Message.setProto3IntField(this, 3, value)
}


/**
 * optional uint64 gas_price = 4;
 * @return {number}
 */
proto.rpcpb.MakeContractTxReq.prototype.getGasPrice = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0))
}


/** @param {number} value */
proto.rpcpb.MakeContractTxReq.prototype.setGasPrice = function (value) {
  jspb.Message.setProto3IntField(this, 4, value)
}


/**
 * optional uint64 gas_limit = 5;
 * @return {number}
 */
proto.rpcpb.MakeContractTxReq.prototype.getGasLimit = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0))
}


/** @param {number} value */
proto.rpcpb.MakeContractTxReq.prototype.setGasLimit = function (value) {
  jspb.Message.setProto3IntField(this, 5, value)
}


/**
 * optional uint64 nonce = 6;
 * @return {number}
 */
proto.rpcpb.MakeContractTxReq.prototype.getNonce = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0))
}


/** @param {number} value */
proto.rpcpb.MakeContractTxReq.prototype.setNonce = function (value) {
  jspb.Message.setProto3IntField(this, 6, value)
}


/**
 * optional bool is_deploy = 7;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.rpcpb.MakeContractTxReq.prototype.getIsDeploy = function () {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 7, false))
}


/** @param {boolean} value */
proto.rpcpb.MakeContractTxReq.prototype.setIsDeploy = function (value) {
  jspb.Message.setProto3BooleanField(this, 7, value)
}


/**
 * optional string data = 8;
 * @return {string}
 */
proto.rpcpb.MakeContractTxReq.prototype.getData = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ''))
}


/** @param {string} value */
proto.rpcpb.MakeContractTxReq.prototype.setData = function (value) {
  jspb.Message.setProto3StringField(this, 8, value)
}



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rpcpb.MakeContractTxResp.repeatedFields_ = [4]



if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.rpcpb.MakeContractTxResp.prototype.toObject = function (opt_includeInstance) {
    return proto.rpcpb.MakeContractTxResp.toObject(opt_includeInstance, this)
  }


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.rpcpb.MakeContractTxResp} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.rpcpb.MakeContractTxResp.toObject = function (includeInstance, msg) {
    var f, obj = {
      code: jspb.Message.getFieldWithDefault(msg, 1, 0),
      message: jspb.Message.getFieldWithDefault(msg, 2, ''),
      tx: (f = msg.getTx()) && proto.corepb.Transaction.toObject(includeInstance, f),
      rawmsgsList: msg.getRawmsgsList_asB64(),
      contractAddr: jspb.Message.getFieldWithDefault(msg, 5, '')
    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpcpb.MakeContractTxResp}
 */
proto.rpcpb.MakeContractTxResp.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.rpcpb.MakeContractTxResp
  return proto.rpcpb.MakeContractTxResp.deserializeBinaryFromReader(msg, reader)
}


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpcpb.MakeContractTxResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpcpb.MakeContractTxResp}
 */
proto.rpcpb.MakeContractTxResp.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readInt32())
        msg.setCode(value)
        break
      case 2:
        var value = /** @type {string} */ (reader.readString())
        msg.setMessage(value)
        break
      case 3:
        var value = new proto.corepb.Transaction
        reader.readMessage(value, proto.corepb.Transaction.deserializeBinaryFromReader)
        msg.setTx(value)
        break
      case 4:
        var value = /** @type {!Uint8Array} */ (reader.readBytes())
        msg.addRawmsgs(value)
        break
      case 5:
        var value = /** @type {string} */ (reader.readString())
        msg.setContractAddr(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpcpb.MakeContractTxResp.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.rpcpb.MakeContractTxResp.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpcpb.MakeContractTxResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpcpb.MakeContractTxResp.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getCode()
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    )
  }
  f = message.getMessage()
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    )
  }
  f = message.getTx()
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.corepb.Transaction.serializeBinaryToWriter
    )
  }
  f = message.getRawmsgsList_asU8()
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      4,
      f
    )
  }
  f = message.getContractAddr()
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    )
  }
}


/**
 * optional int32 code = 1;
 * @return {number}
 */
proto.rpcpb.MakeContractTxResp.prototype.getCode = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0))
}


/** @param {number} value */
proto.rpcpb.MakeContractTxResp.prototype.setCode = function (value) {
  jspb.Message.setProto3IntField(this, 1, value)
}


/**
 * optional string message = 2;
 * @return {string}
 */
proto.rpcpb.MakeContractTxResp.prototype.getMessage = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''))
}


/** @param {string} value */
proto.rpcpb.MakeContractTxResp.prototype.setMessage = function (value) {
  jspb.Message.setProto3StringField(this, 2, value)
}


/**
 * optional corepb.Transaction tx = 3;
 * @return {?proto.corepb.Transaction}
 */
proto.rpcpb.MakeContractTxResp.prototype.getTx = function () {
  return /** @type{?proto.corepb.Transaction} */ (
    jspb.Message.getWrapperField(this, proto.corepb.Transaction, 3))
}


/** @param {?proto.corepb.Transaction|undefined} value */
proto.rpcpb.MakeContractTxResp.prototype.setTx = function (value) {
  jspb.Message.setWrapperField(this, 3, value)
}


/**
 * Clears the message field making it undefined.
 */
proto.rpcpb.MakeContractTxResp.prototype.clearTx = function () {
  this.setTx(undefined)
}


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rpcpb.MakeContractTxResp.prototype.hasTx = function () {
  return jspb.Message.getField(this, 3) != null
}


/**
 * repeated bytes rawMsgs = 4;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.rpcpb.MakeContractTxResp.prototype.getRawmsgsList = function () {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 4))
}


/**
 * repeated bytes rawMsgs = 4;
 * This is a type-conversion wrapper around `getRawmsgsList()`
 * @return {!Array<string>}
 */
proto.rpcpb.MakeContractTxResp.prototype.getRawmsgsList_asB64 = function () {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
    this.getRawmsgsList()))
}


/**
 * repeated bytes rawMsgs = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRawmsgsList()`
 * @return {!Array<!Uint8Array>}
 */
proto.rpcpb.MakeContractTxResp.prototype.getRawmsgsList_asU8 = function () {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
    this.getRawmsgsList()))
}


/** @param {!(Array<!Uint8Array>|Array<string>)} value */
proto.rpcpb.MakeContractTxResp.prototype.setRawmsgsList = function (value) {
  jspb.Message.setField(this, 4, value || [])
}


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 */
proto.rpcpb.MakeContractTxResp.prototype.addRawmsgs = function (value, opt_index) {
  jspb.Message.addToRepeatedField(this, 4, value, opt_index)
}


/**
 * Clears the list making it empty but non-null.
 */
proto.rpcpb.MakeContractTxResp.prototype.clearRawmsgsList = function () {
  this.setRawmsgsList([])
}


/**
 * optional string contract_addr = 5;
 * @return {string}
 */
proto.rpcpb.MakeContractTxResp.prototype.getContractAddr = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ''))
}


/** @param {string} value */
proto.rpcpb.MakeContractTxResp.prototype.setContractAddr = function (value) {
  jspb.Message.setProto3StringField(this, 5, value)
}


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpcpb.ViewTxDetailReq = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.rpcpb.ViewTxDetailReq, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpcpb.ViewTxDetailReq.displayName = 'proto.rpcpb.ViewTxDetailReq'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpcpb.ViewTxDetailResp = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.rpcpb.ViewTxDetailResp, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpcpb.ViewTxDetailResp.displayName = 'proto.rpcpb.ViewTxDetailResp'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpcpb.ViewBlockDetailReq = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.rpcpb.ViewBlockDetailReq, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpcpb.ViewBlockDetailReq.displayName = 'proto.rpcpb.ViewBlockDetailReq'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpcpb.ViewBlockDetailResp = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.rpcpb.ViewBlockDetailResp, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpcpb.ViewBlockDetailResp.displayName = 'proto.rpcpb.ViewBlockDetailResp'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpcpb.ContractInfo = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.rpcpb.ContractInfo, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpcpb.ContractInfo.displayName = 'proto.rpcpb.ContractInfo'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpcpb.ListenBlocksReq = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.rpcpb.ListenBlocksReq, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpcpb.ListenBlocksReq.displayName = 'proto.rpcpb.ListenBlocksReq'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpcpb.TxDetail = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rpcpb.TxDetail.repeatedFields_, null)
}
goog.inherits(proto.rpcpb.TxDetail, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpcpb.TxDetail.displayName = 'proto.rpcpb.TxDetail'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpcpb.TxInDetail = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.rpcpb.TxInDetail, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpcpb.TxInDetail.displayName = 'proto.rpcpb.TxInDetail'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpcpb.TxOutDetail = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.rpcpb.TxOutDetail.oneofGroups_)
}
goog.inherits(proto.rpcpb.TxOutDetail, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpcpb.TxOutDetail.displayName = 'proto.rpcpb.TxOutDetail'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpcpb.BlockDetail = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rpcpb.BlockDetail.repeatedFields_, null)
}
goog.inherits(proto.rpcpb.BlockDetail, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpcpb.BlockDetail.displayName = 'proto.rpcpb.BlockDetail'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpcpb.TokenIssueInfo = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.rpcpb.TokenIssueInfo, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpcpb.TokenIssueInfo.displayName = 'proto.rpcpb.TokenIssueInfo'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpcpb.SplitContractInfo = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rpcpb.SplitContractInfo.repeatedFields_, null)
}
goog.inherits(proto.rpcpb.SplitContractInfo, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpcpb.SplitContractInfo.displayName = 'proto.rpcpb.SplitContractInfo'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpcpb.TokenTransferInfo = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.rpcpb.TokenTransferInfo, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpcpb.TokenTransferInfo.displayName = 'proto.rpcpb.TokenTransferInfo'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpcpb.CallReq = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.rpcpb.CallReq, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpcpb.CallReq.displayName = 'proto.rpcpb.CallReq'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpcpb.CallResp = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.rpcpb.CallResp, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpcpb.CallResp.displayName = 'proto.rpcpb.CallResp'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpcpb.NonceReq = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.rpcpb.NonceReq, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpcpb.NonceReq.displayName = 'proto.rpcpb.NonceReq'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpcpb.NonceResp = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.rpcpb.NonceResp, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpcpb.NonceResp.displayName = 'proto.rpcpb.NonceResp'
}



if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.rpcpb.ViewTxDetailReq.prototype.toObject = function (opt_includeInstance) {
    return proto.rpcpb.ViewTxDetailReq.toObject(opt_includeInstance, this)
  }


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.rpcpb.ViewTxDetailReq} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.rpcpb.ViewTxDetailReq.toObject = function (includeInstance, msg) {
    var f, obj = {
      hash: jspb.Message.getFieldWithDefault(msg, 1, ''),
      spreadSplit: jspb.Message.getFieldWithDefault(msg, 2, false)
    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpcpb.ViewTxDetailReq}
 */
proto.rpcpb.ViewTxDetailReq.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.rpcpb.ViewTxDetailReq
  return proto.rpcpb.ViewTxDetailReq.deserializeBinaryFromReader(msg, reader)
}


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpcpb.ViewTxDetailReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpcpb.ViewTxDetailReq}
 */
proto.rpcpb.ViewTxDetailReq.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString())
        msg.setHash(value)
        break
      case 2:
        var value = /** @type {boolean} */ (reader.readBool())
        msg.setSpreadSplit(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpcpb.ViewTxDetailReq.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.rpcpb.ViewTxDetailReq.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpcpb.ViewTxDetailReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpcpb.ViewTxDetailReq.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getHash()
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    )
  }
  f = message.getSpreadSplit()
  if (f) {
    writer.writeBool(
      2,
      f
    )
  }
}


/**
 * optional string hash = 1;
 * @return {string}
 */
proto.rpcpb.ViewTxDetailReq.prototype.getHash = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
}


/** @param {string} value */
proto.rpcpb.ViewTxDetailReq.prototype.setHash = function (value) {
  jspb.Message.setProto3StringField(this, 1, value)
}


/**
 * optional bool spread_split = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.rpcpb.ViewTxDetailReq.prototype.getSpreadSplit = function () {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false))
}


/** @param {boolean} value */
proto.rpcpb.ViewTxDetailReq.prototype.setSpreadSplit = function (value) {
  jspb.Message.setProto3BooleanField(this, 2, value)
}





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.rpcpb.ViewTxDetailResp.prototype.toObject = function (opt_includeInstance) {
    return proto.rpcpb.ViewTxDetailResp.toObject(opt_includeInstance, this)
  }


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.rpcpb.ViewTxDetailResp} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.rpcpb.ViewTxDetailResp.toObject = function (includeInstance, msg) {
    var f, obj = {
      code: jspb.Message.getFieldWithDefault(msg, 1, 0),
      message: jspb.Message.getFieldWithDefault(msg, 2, ''),
      version: jspb.Message.getFieldWithDefault(msg, 3, 0),
      blockTime: jspb.Message.getFieldWithDefault(msg, 4, 0),
      blockHeight: jspb.Message.getFieldWithDefault(msg, 5, 0),
      status: jspb.Message.getFieldWithDefault(msg, 6, 0),
      detail: (f = msg.getDetail()) && proto.rpcpb.TxDetail.toObject(includeInstance, f)
    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpcpb.ViewTxDetailResp}
 */
proto.rpcpb.ViewTxDetailResp.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.rpcpb.ViewTxDetailResp
  return proto.rpcpb.ViewTxDetailResp.deserializeBinaryFromReader(msg, reader)
}


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpcpb.ViewTxDetailResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpcpb.ViewTxDetailResp}
 */
proto.rpcpb.ViewTxDetailResp.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readInt32())
        msg.setCode(value)
        break
      case 2:
        var value = /** @type {string} */ (reader.readString())
        msg.setMessage(value)
        break
      case 3:
        var value = /** @type {number} */ (reader.readInt32())
        msg.setVersion(value)
        break
      case 4:
        var value = /** @type {number} */ (reader.readInt64())
        msg.setBlockTime(value)
        break
      case 5:
        var value = /** @type {number} */ (reader.readUint32())
        msg.setBlockHeight(value)
        break
      case 6:
        var value = /** @type {!proto.rpcpb.TxStatus} */ (reader.readEnum())
        msg.setStatus(value)
        break
      case 7:
        var value = new proto.rpcpb.TxDetail
        reader.readMessage(value, proto.rpcpb.TxDetail.deserializeBinaryFromReader)
        msg.setDetail(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpcpb.ViewTxDetailResp.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.rpcpb.ViewTxDetailResp.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpcpb.ViewTxDetailResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpcpb.ViewTxDetailResp.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getCode()
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    )
  }
  f = message.getMessage()
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    )
  }
  f = message.getVersion()
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    )
  }
  f = message.getBlockTime()
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    )
  }
  f = message.getBlockHeight()
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    )
  }
  f = message.getStatus()
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    )
  }
  f = message.getDetail()
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.rpcpb.TxDetail.serializeBinaryToWriter
    )
  }
}


/**
 * optional int32 code = 1;
 * @return {number}
 */
proto.rpcpb.ViewTxDetailResp.prototype.getCode = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0))
}


/** @param {number} value */
proto.rpcpb.ViewTxDetailResp.prototype.setCode = function (value) {
  jspb.Message.setProto3IntField(this, 1, value)
}


/**
 * optional string message = 2;
 * @return {string}
 */
proto.rpcpb.ViewTxDetailResp.prototype.getMessage = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''))
}


/** @param {string} value */
proto.rpcpb.ViewTxDetailResp.prototype.setMessage = function (value) {
  jspb.Message.setProto3StringField(this, 2, value)
}


/**
 * optional int32 version = 3;
 * @return {number}
 */
proto.rpcpb.ViewTxDetailResp.prototype.getVersion = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0))
}


/** @param {number} value */
proto.rpcpb.ViewTxDetailResp.prototype.setVersion = function (value) {
  jspb.Message.setProto3IntField(this, 3, value)
}


/**
 * optional int64 block_time = 4;
 * @return {number}
 */
proto.rpcpb.ViewTxDetailResp.prototype.getBlockTime = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0))
}


/** @param {number} value */
proto.rpcpb.ViewTxDetailResp.prototype.setBlockTime = function (value) {
  jspb.Message.setProto3IntField(this, 4, value)
}


/**
 * optional uint32 block_height = 5;
 * @return {number}
 */
proto.rpcpb.ViewTxDetailResp.prototype.getBlockHeight = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0))
}


/** @param {number} value */
proto.rpcpb.ViewTxDetailResp.prototype.setBlockHeight = function (value) {
  jspb.Message.setProto3IntField(this, 5, value)
}


/**
 * optional TxStatus status = 6;
 * @return {!proto.rpcpb.TxStatus}
 */
proto.rpcpb.ViewTxDetailResp.prototype.getStatus = function () {
  return /** @type {!proto.rpcpb.TxStatus} */ (jspb.Message.getFieldWithDefault(this, 6, 0))
}


/** @param {!proto.rpcpb.TxStatus} value */
proto.rpcpb.ViewTxDetailResp.prototype.setStatus = function (value) {
  jspb.Message.setProto3EnumField(this, 6, value)
}


/**
 * optional TxDetail detail = 7;
 * @return {?proto.rpcpb.TxDetail}
 */
proto.rpcpb.ViewTxDetailResp.prototype.getDetail = function () {
  return /** @type{?proto.rpcpb.TxDetail} */ (
    jspb.Message.getWrapperField(this, proto.rpcpb.TxDetail, 7))
}


/** @param {?proto.rpcpb.TxDetail|undefined} value */
proto.rpcpb.ViewTxDetailResp.prototype.setDetail = function (value) {
  jspb.Message.setWrapperField(this, 7, value)
}


/**
 * Clears the message field making it undefined.
 */
proto.rpcpb.ViewTxDetailResp.prototype.clearDetail = function () {
  this.setDetail(undefined)
}


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rpcpb.ViewTxDetailResp.prototype.hasDetail = function () {
  return jspb.Message.getField(this, 7) != null
}





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.rpcpb.ViewBlockDetailReq.prototype.toObject = function (opt_includeInstance) {
    return proto.rpcpb.ViewBlockDetailReq.toObject(opt_includeInstance, this)
  }


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.rpcpb.ViewBlockDetailReq} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.rpcpb.ViewBlockDetailReq.toObject = function (includeInstance, msg) {
    var f, obj = {
      hash: jspb.Message.getFieldWithDefault(msg, 1, '')
    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpcpb.ViewBlockDetailReq}
 */
proto.rpcpb.ViewBlockDetailReq.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.rpcpb.ViewBlockDetailReq
  return proto.rpcpb.ViewBlockDetailReq.deserializeBinaryFromReader(msg, reader)
}


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpcpb.ViewBlockDetailReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpcpb.ViewBlockDetailReq}
 */
proto.rpcpb.ViewBlockDetailReq.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString())
        msg.setHash(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpcpb.ViewBlockDetailReq.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.rpcpb.ViewBlockDetailReq.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpcpb.ViewBlockDetailReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpcpb.ViewBlockDetailReq.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getHash()
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    )
  }
}


/**
 * optional string hash = 1;
 * @return {string}
 */
proto.rpcpb.ViewBlockDetailReq.prototype.getHash = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
}


/** @param {string} value */
proto.rpcpb.ViewBlockDetailReq.prototype.setHash = function (value) {
  jspb.Message.setProto3StringField(this, 1, value)
}





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.rpcpb.ViewBlockDetailResp.prototype.toObject = function (opt_includeInstance) {
    return proto.rpcpb.ViewBlockDetailResp.toObject(opt_includeInstance, this)
  }


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.rpcpb.ViewBlockDetailResp} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.rpcpb.ViewBlockDetailResp.toObject = function (includeInstance, msg) {
    var f, obj = {
      code: jspb.Message.getFieldWithDefault(msg, 1, 0),
      message: jspb.Message.getFieldWithDefault(msg, 2, ''),
      detail: (f = msg.getDetail()) && proto.rpcpb.BlockDetail.toObject(includeInstance, f)
    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpcpb.ViewBlockDetailResp}
 */
proto.rpcpb.ViewBlockDetailResp.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.rpcpb.ViewBlockDetailResp
  return proto.rpcpb.ViewBlockDetailResp.deserializeBinaryFromReader(msg, reader)
}


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpcpb.ViewBlockDetailResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpcpb.ViewBlockDetailResp}
 */
proto.rpcpb.ViewBlockDetailResp.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readInt32())
        msg.setCode(value)
        break
      case 2:
        var value = /** @type {string} */ (reader.readString())
        msg.setMessage(value)
        break
      case 3:
        var value = new proto.rpcpb.BlockDetail
        reader.readMessage(value, proto.rpcpb.BlockDetail.deserializeBinaryFromReader)
        msg.setDetail(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpcpb.ViewBlockDetailResp.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.rpcpb.ViewBlockDetailResp.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpcpb.ViewBlockDetailResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpcpb.ViewBlockDetailResp.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getCode()
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    )
  }
  f = message.getMessage()
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    )
  }
  f = message.getDetail()
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.rpcpb.BlockDetail.serializeBinaryToWriter
    )
  }
}


/**
 * optional int32 code = 1;
 * @return {number}
 */
proto.rpcpb.ViewBlockDetailResp.prototype.getCode = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0))
}


/** @param {number} value */
proto.rpcpb.ViewBlockDetailResp.prototype.setCode = function (value) {
  jspb.Message.setProto3IntField(this, 1, value)
}


/**
 * optional string message = 2;
 * @return {string}
 */
proto.rpcpb.ViewBlockDetailResp.prototype.getMessage = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''))
}


/** @param {string} value */
proto.rpcpb.ViewBlockDetailResp.prototype.setMessage = function (value) {
  jspb.Message.setProto3StringField(this, 2, value)
}


/**
 * optional BlockDetail detail = 3;
 * @return {?proto.rpcpb.BlockDetail}
 */
proto.rpcpb.ViewBlockDetailResp.prototype.getDetail = function () {
  return /** @type{?proto.rpcpb.BlockDetail} */ (
    jspb.Message.getWrapperField(this, proto.rpcpb.BlockDetail, 3))
}


/** @param {?proto.rpcpb.BlockDetail|undefined} value */
proto.rpcpb.ViewBlockDetailResp.prototype.setDetail = function (value) {
  jspb.Message.setWrapperField(this, 3, value)
}


/**
 * Clears the message field making it undefined.
 */
proto.rpcpb.ViewBlockDetailResp.prototype.clearDetail = function () {
  this.setDetail(undefined)
}


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rpcpb.ViewBlockDetailResp.prototype.hasDetail = function () {
  return jspb.Message.getField(this, 3) != null
}





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.rpcpb.ContractInfo.prototype.toObject = function (opt_includeInstance) {
    return proto.rpcpb.ContractInfo.toObject(opt_includeInstance, this)
  }


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.rpcpb.ContractInfo} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.rpcpb.ContractInfo.toObject = function (includeInstance, msg) {
    var f, obj = {
      fee: jspb.Message.getFieldWithDefault(msg, 1, 0),
      failed: jspb.Message.getFieldWithDefault(msg, 2, false),
      gasLimit: jspb.Message.getFieldWithDefault(msg, 3, 0),
      gasUsed: jspb.Message.getFieldWithDefault(msg, 4, 0),
      gasPrice: jspb.Message.getFieldWithDefault(msg, 5, 0),
      nonce: jspb.Message.getFieldWithDefault(msg, 6, 0),
      data: jspb.Message.getFieldWithDefault(msg, 7, '')
    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpcpb.ContractInfo}
 */
proto.rpcpb.ContractInfo.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.rpcpb.ContractInfo
  return proto.rpcpb.ContractInfo.deserializeBinaryFromReader(msg, reader)
}


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpcpb.ContractInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpcpb.ContractInfo}
 */
proto.rpcpb.ContractInfo.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readUint32())
        msg.setFee(value)
        break
      case 2:
        var value = /** @type {boolean} */ (reader.readBool())
        msg.setFailed(value)
        break
      case 3:
        var value = /** @type {number} */ (reader.readUint64())
        msg.setGasLimit(value)
        break
      case 4:
        var value = /** @type {number} */ (reader.readUint64())
        msg.setGasUsed(value)
        break
      case 5:
        var value = /** @type {number} */ (reader.readUint64())
        msg.setGasPrice(value)
        break
      case 6:
        var value = /** @type {number} */ (reader.readUint64())
        msg.setNonce(value)
        break
      case 7:
        var value = /** @type {string} */ (reader.readString())
        msg.setData(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpcpb.ContractInfo.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.rpcpb.ContractInfo.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpcpb.ContractInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpcpb.ContractInfo.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getFee()
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    )
  }
  f = message.getFailed()
  if (f) {
    writer.writeBool(
      2,
      f
    )
  }
  f = message.getGasLimit()
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    )
  }
  f = message.getGasUsed()
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    )
  }
  f = message.getGasPrice()
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    )
  }
  f = message.getNonce()
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    )
  }
  f = message.getData()
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    )
  }
}


/**
 * optional uint32 fee = 1;
 * @return {number}
 */
proto.rpcpb.ContractInfo.prototype.getFee = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0))
}


/** @param {number} value */
proto.rpcpb.ContractInfo.prototype.setFee = function (value) {
  jspb.Message.setProto3IntField(this, 1, value)
}


/**
 * optional bool failed = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.rpcpb.ContractInfo.prototype.getFailed = function () {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false))
}


/** @param {boolean} value */
proto.rpcpb.ContractInfo.prototype.setFailed = function (value) {
  jspb.Message.setProto3BooleanField(this, 2, value)
}


/**
 * optional uint64 gas_limit = 3;
 * @return {number}
 */
proto.rpcpb.ContractInfo.prototype.getGasLimit = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0))
}


/** @param {number} value */
proto.rpcpb.ContractInfo.prototype.setGasLimit = function (value) {
  jspb.Message.setProto3IntField(this, 3, value)
}


/**
 * optional uint64 gas_used = 4;
 * @return {number}
 */
proto.rpcpb.ContractInfo.prototype.getGasUsed = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0))
}


/** @param {number} value */
proto.rpcpb.ContractInfo.prototype.setGasUsed = function (value) {
  jspb.Message.setProto3IntField(this, 4, value)
}


/**
 * optional uint64 gas_price = 5;
 * @return {number}
 */
proto.rpcpb.ContractInfo.prototype.getGasPrice = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0))
}


/** @param {number} value */
proto.rpcpb.ContractInfo.prototype.setGasPrice = function (value) {
  jspb.Message.setProto3IntField(this, 5, value)
}


/**
 * optional uint64 nonce = 6;
 * @return {number}
 */
proto.rpcpb.ContractInfo.prototype.getNonce = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0))
}


/** @param {number} value */
proto.rpcpb.ContractInfo.prototype.setNonce = function (value) {
  jspb.Message.setProto3IntField(this, 6, value)
}


/**
 * optional string data = 7;
 * @return {string}
 */
proto.rpcpb.ContractInfo.prototype.getData = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ''))
}


/** @param {string} value */
proto.rpcpb.ContractInfo.prototype.setData = function (value) {
  jspb.Message.setProto3StringField(this, 7, value)
}





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.rpcpb.ListenBlocksReq.prototype.toObject = function (opt_includeInstance) {
    return proto.rpcpb.ListenBlocksReq.toObject(opt_includeInstance, this)
  }


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.rpcpb.ListenBlocksReq} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.rpcpb.ListenBlocksReq.toObject = function (includeInstance, msg) {
    var f, obj = {

    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpcpb.ListenBlocksReq}
 */
proto.rpcpb.ListenBlocksReq.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.rpcpb.ListenBlocksReq
  return proto.rpcpb.ListenBlocksReq.deserializeBinaryFromReader(msg, reader)
}


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpcpb.ListenBlocksReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpcpb.ListenBlocksReq}
 */
proto.rpcpb.ListenBlocksReq.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      default:
        reader.skipField()
        break
    }
  }
  return msg
}


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpcpb.ListenBlocksReq.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.rpcpb.ListenBlocksReq.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpcpb.ListenBlocksReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpcpb.ListenBlocksReq.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
}



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rpcpb.TxDetail.repeatedFields_ = [2, 3]



if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.rpcpb.TxDetail.prototype.toObject = function (opt_includeInstance) {
    return proto.rpcpb.TxDetail.toObject(opt_includeInstance, this)
  }


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.rpcpb.TxDetail} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.rpcpb.TxDetail.toObject = function (includeInstance, msg) {
    var f, obj = {
      hash: jspb.Message.getFieldWithDefault(msg, 1, ''),
      vinList: jspb.Message.toObjectList(msg.getVinList(),
        proto.rpcpb.TxInDetail.toObject, includeInstance),
      voutList: jspb.Message.toObjectList(msg.getVoutList(),
        proto.rpcpb.TxOutDetail.toObject, includeInstance)
    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpcpb.TxDetail}
 */
proto.rpcpb.TxDetail.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.rpcpb.TxDetail
  return proto.rpcpb.TxDetail.deserializeBinaryFromReader(msg, reader)
}


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpcpb.TxDetail} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpcpb.TxDetail}
 */
proto.rpcpb.TxDetail.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString())
        msg.setHash(value)
        break
      case 2:
        var value = new proto.rpcpb.TxInDetail
        reader.readMessage(value, proto.rpcpb.TxInDetail.deserializeBinaryFromReader)
        msg.addVin(value)
        break
      case 3:
        var value = new proto.rpcpb.TxOutDetail
        reader.readMessage(value, proto.rpcpb.TxOutDetail.deserializeBinaryFromReader)
        msg.addVout(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpcpb.TxDetail.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.rpcpb.TxDetail.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpcpb.TxDetail} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpcpb.TxDetail.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getHash()
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    )
  }
  f = message.getVinList()
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.rpcpb.TxInDetail.serializeBinaryToWriter
    )
  }
  f = message.getVoutList()
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.rpcpb.TxOutDetail.serializeBinaryToWriter
    )
  }
}


/**
 * optional string hash = 1;
 * @return {string}
 */
proto.rpcpb.TxDetail.prototype.getHash = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
}


/** @param {string} value */
proto.rpcpb.TxDetail.prototype.setHash = function (value) {
  jspb.Message.setProto3StringField(this, 1, value)
}


/**
 * repeated TxInDetail vin = 2;
 * @return {!Array<!proto.rpcpb.TxInDetail>}
 */
proto.rpcpb.TxDetail.prototype.getVinList = function () {
  return /** @type{!Array<!proto.rpcpb.TxInDetail>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rpcpb.TxInDetail, 2))
}


/** @param {!Array<!proto.rpcpb.TxInDetail>} value */
proto.rpcpb.TxDetail.prototype.setVinList = function (value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value)
}


/**
 * @param {!proto.rpcpb.TxInDetail=} opt_value
 * @param {number=} opt_index
 * @return {!proto.rpcpb.TxInDetail}
 */
proto.rpcpb.TxDetail.prototype.addVin = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.rpcpb.TxInDetail, opt_index)
}


/**
 * Clears the list making it empty but non-null.
 */
proto.rpcpb.TxDetail.prototype.clearVinList = function () {
  this.setVinList([])
}


/**
 * repeated TxOutDetail vout = 3;
 * @return {!Array<!proto.rpcpb.TxOutDetail>}
 */
proto.rpcpb.TxDetail.prototype.getVoutList = function () {
  return /** @type{!Array<!proto.rpcpb.TxOutDetail>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rpcpb.TxOutDetail, 3))
}


/** @param {!Array<!proto.rpcpb.TxOutDetail>} value */
proto.rpcpb.TxDetail.prototype.setVoutList = function (value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value)
}


/**
 * @param {!proto.rpcpb.TxOutDetail=} opt_value
 * @param {number=} opt_index
 * @return {!proto.rpcpb.TxOutDetail}
 */
proto.rpcpb.TxDetail.prototype.addVout = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.rpcpb.TxOutDetail, opt_index)
}


/**
 * Clears the list making it empty but non-null.
 */
proto.rpcpb.TxDetail.prototype.clearVoutList = function () {
  this.setVoutList([])
}





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.rpcpb.TxInDetail.prototype.toObject = function (opt_includeInstance) {
    return proto.rpcpb.TxInDetail.toObject(opt_includeInstance, this)
  }


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.rpcpb.TxInDetail} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.rpcpb.TxInDetail.toObject = function (includeInstance, msg) {
    var f, obj = {
      prevOutDetail: (f = msg.getPrevOutDetail()) && proto.rpcpb.TxOutDetail.toObject(includeInstance, f),
      scriptSig: jspb.Message.getFieldWithDefault(msg, 2, ''),
      sequence: jspb.Message.getFieldWithDefault(msg, 3, 0),
      prevOutPoint: jspb.Message.getFieldWithDefault(msg, 4, '')
    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpcpb.TxInDetail}
 */
proto.rpcpb.TxInDetail.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.rpcpb.TxInDetail
  return proto.rpcpb.TxInDetail.deserializeBinaryFromReader(msg, reader)
}


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpcpb.TxInDetail} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpcpb.TxInDetail}
 */
proto.rpcpb.TxInDetail.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = new proto.rpcpb.TxOutDetail
        reader.readMessage(value, proto.rpcpb.TxOutDetail.deserializeBinaryFromReader)
        msg.setPrevOutDetail(value)
        break
      case 2:
        var value = /** @type {string} */ (reader.readString())
        msg.setScriptSig(value)
        break
      case 3:
        var value = /** @type {number} */ (reader.readUint32())
        msg.setSequence(value)
        break
      case 4:
        var value = /** @type {string} */ (reader.readString())
        msg.setPrevOutPoint(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpcpb.TxInDetail.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.rpcpb.TxInDetail.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpcpb.TxInDetail} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpcpb.TxInDetail.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getPrevOutDetail()
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rpcpb.TxOutDetail.serializeBinaryToWriter
    )
  }
  f = message.getScriptSig()
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    )
  }
  f = message.getSequence()
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    )
  }
  f = message.getPrevOutPoint()
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    )
  }
}


/**
 * optional TxOutDetail prev_out_detail = 1;
 * @return {?proto.rpcpb.TxOutDetail}
 */
proto.rpcpb.TxInDetail.prototype.getPrevOutDetail = function () {
  return /** @type{?proto.rpcpb.TxOutDetail} */ (
    jspb.Message.getWrapperField(this, proto.rpcpb.TxOutDetail, 1))
}


/** @param {?proto.rpcpb.TxOutDetail|undefined} value */
proto.rpcpb.TxInDetail.prototype.setPrevOutDetail = function (value) {
  jspb.Message.setWrapperField(this, 1, value)
}


/**
 * Clears the message field making it undefined.
 */
proto.rpcpb.TxInDetail.prototype.clearPrevOutDetail = function () {
  this.setPrevOutDetail(undefined)
}


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rpcpb.TxInDetail.prototype.hasPrevOutDetail = function () {
  return jspb.Message.getField(this, 1) != null
}


/**
 * optional string script_sig = 2;
 * @return {string}
 */
proto.rpcpb.TxInDetail.prototype.getScriptSig = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''))
}


/** @param {string} value */
proto.rpcpb.TxInDetail.prototype.setScriptSig = function (value) {
  jspb.Message.setProto3StringField(this, 2, value)
}


/**
 * optional uint32 sequence = 3;
 * @return {number}
 */
proto.rpcpb.TxInDetail.prototype.getSequence = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0))
}


/** @param {number} value */
proto.rpcpb.TxInDetail.prototype.setSequence = function (value) {
  jspb.Message.setProto3IntField(this, 3, value)
}


/**
 * optional string prev_out_point = 4;
 * @return {string}
 */
proto.rpcpb.TxInDetail.prototype.getPrevOutPoint = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ''))
}


/** @param {string} value */
proto.rpcpb.TxInDetail.prototype.setPrevOutPoint = function (value) {
  jspb.Message.setProto3StringField(this, 4, value)
}



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.rpcpb.TxOutDetail.oneofGroups_ = [
  [6, 7, 8, 9]
]

/**
 * @enum {number}
 */
proto.rpcpb.TxOutDetail.AppendixCase = {
  APPENDIX_NOT_SET: 0,
  TOKEN_ISSUE_INFO: 6,
  TOKEN_TRANSFER_INFO: 7,
  SPLIT_CONTRACT_INFO: 8,
  CONTRACT_INFO: 9
}

/**
 * @return {proto.rpcpb.TxOutDetail.AppendixCase}
 */
proto.rpcpb.TxOutDetail.prototype.getAppendixCase = function () {
  return /** @type {proto.rpcpb.TxOutDetail.AppendixCase} */ (jspb.Message.computeOneofCase(this, proto.rpcpb.TxOutDetail.oneofGroups_[0]))
}



if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.rpcpb.TxOutDetail.prototype.toObject = function (opt_includeInstance) {
    return proto.rpcpb.TxOutDetail.toObject(opt_includeInstance, this)
  }


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.rpcpb.TxOutDetail} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.rpcpb.TxOutDetail.toObject = function (includeInstance, msg) {
    var f, obj = {
      addr: jspb.Message.getFieldWithDefault(msg, 1, ''),
      value: jspb.Message.getFieldWithDefault(msg, 2, 0),
      scriptPubKey: jspb.Message.getFieldWithDefault(msg, 3, ''),
      scriptDisasm: jspb.Message.getFieldWithDefault(msg, 4, ''),
      type: jspb.Message.getFieldWithDefault(msg, 5, 0),
      tokenIssueInfo: (f = msg.getTokenIssueInfo()) && proto.rpcpb.TokenIssueInfo.toObject(includeInstance, f),
      tokenTransferInfo: (f = msg.getTokenTransferInfo()) && proto.rpcpb.TokenTransferInfo.toObject(includeInstance, f),
      splitContractInfo: (f = msg.getSplitContractInfo()) && proto.rpcpb.SplitContractInfo.toObject(includeInstance, f),
      contractInfo: (f = msg.getContractInfo()) && proto.rpcpb.ContractInfo.toObject(includeInstance, f)
    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpcpb.TxOutDetail}
 */
proto.rpcpb.TxOutDetail.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.rpcpb.TxOutDetail
  return proto.rpcpb.TxOutDetail.deserializeBinaryFromReader(msg, reader)
}


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpcpb.TxOutDetail} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpcpb.TxOutDetail}
 */
proto.rpcpb.TxOutDetail.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString())
        msg.setAddr(value)
        break
      case 2:
        var value = /** @type {number} */ (reader.readUint64())
        msg.setValue(value)
        break
      case 3:
        var value = /** @type {string} */ (reader.readString())
        msg.setScriptPubKey(value)
        break
      case 4:
        var value = /** @type {string} */ (reader.readString())
        msg.setScriptDisasm(value)
        break
      case 5:
        var value = /** @type {!proto.rpcpb.TxOutDetail.TxOutType} */ (reader.readEnum())
        msg.setType(value)
        break
      case 6:
        var value = new proto.rpcpb.TokenIssueInfo
        reader.readMessage(value, proto.rpcpb.TokenIssueInfo.deserializeBinaryFromReader)
        msg.setTokenIssueInfo(value)
        break
      case 7:
        var value = new proto.rpcpb.TokenTransferInfo
        reader.readMessage(value, proto.rpcpb.TokenTransferInfo.deserializeBinaryFromReader)
        msg.setTokenTransferInfo(value)
        break
      case 8:
        var value = new proto.rpcpb.SplitContractInfo
        reader.readMessage(value, proto.rpcpb.SplitContractInfo.deserializeBinaryFromReader)
        msg.setSplitContractInfo(value)
        break
      case 9:
        var value = new proto.rpcpb.ContractInfo
        reader.readMessage(value, proto.rpcpb.ContractInfo.deserializeBinaryFromReader)
        msg.setContractInfo(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpcpb.TxOutDetail.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.rpcpb.TxOutDetail.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpcpb.TxOutDetail} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpcpb.TxOutDetail.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getAddr()
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    )
  }
  f = message.getValue()
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    )
  }
  f = message.getScriptPubKey()
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    )
  }
  f = message.getScriptDisasm()
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    )
  }
  f = message.getType()
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    )
  }
  f = message.getTokenIssueInfo()
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.rpcpb.TokenIssueInfo.serializeBinaryToWriter
    )
  }
  f = message.getTokenTransferInfo()
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.rpcpb.TokenTransferInfo.serializeBinaryToWriter
    )
  }
  f = message.getSplitContractInfo()
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.rpcpb.SplitContractInfo.serializeBinaryToWriter
    )
  }
  f = message.getContractInfo()
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.rpcpb.ContractInfo.serializeBinaryToWriter
    )
  }
}


/**
 * @enum {number}
 */
proto.rpcpb.TxOutDetail.TxOutType = {
  UNKNOWN: 0,
  PAY_TO_PUBKEY_HASH: 1,
  PAY_TO_PUBKEY_HASH_CLTV: 2,
  TOKEN_ISSUE: 3,
  TOKEN_TRANSFER: 4,
  NEW_SPLIT_ADDR: 5,
  PAY_TO_SCRIPT_HASH: 6,
  CONTRACT_CREATE: 7,
  CONTRACT_CALL: 8
}

/**
 * optional string addr = 1;
 * @return {string}
 */
proto.rpcpb.TxOutDetail.prototype.getAddr = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
}


/** @param {string} value */
proto.rpcpb.TxOutDetail.prototype.setAddr = function (value) {
  jspb.Message.setProto3StringField(this, 1, value)
}


/**
 * optional uint64 value = 2;
 * @return {number}
 */
proto.rpcpb.TxOutDetail.prototype.getValue = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0))
}


/** @param {number} value */
proto.rpcpb.TxOutDetail.prototype.setValue = function (value) {
  jspb.Message.setProto3IntField(this, 2, value)
}


/**
 * optional string script_pub_key = 3;
 * @return {string}
 */
proto.rpcpb.TxOutDetail.prototype.getScriptPubKey = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''))
}


/** @param {string} value */
proto.rpcpb.TxOutDetail.prototype.setScriptPubKey = function (value) {
  jspb.Message.setProto3StringField(this, 3, value)
}


/**
 * optional string script_disasm = 4;
 * @return {string}
 */
proto.rpcpb.TxOutDetail.prototype.getScriptDisasm = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ''))
}


/** @param {string} value */
proto.rpcpb.TxOutDetail.prototype.setScriptDisasm = function (value) {
  jspb.Message.setProto3StringField(this, 4, value)
}


/**
 * optional TxOutType type = 5;
 * @return {!proto.rpcpb.TxOutDetail.TxOutType}
 */
proto.rpcpb.TxOutDetail.prototype.getType = function () {
  return /** @type {!proto.rpcpb.TxOutDetail.TxOutType} */ (jspb.Message.getFieldWithDefault(this, 5, 0))
}


/** @param {!proto.rpcpb.TxOutDetail.TxOutType} value */
proto.rpcpb.TxOutDetail.prototype.setType = function (value) {
  jspb.Message.setProto3EnumField(this, 5, value)
}


/**
 * optional TokenIssueInfo token_issue_info = 6;
 * @return {?proto.rpcpb.TokenIssueInfo}
 */
proto.rpcpb.TxOutDetail.prototype.getTokenIssueInfo = function () {
  return /** @type{?proto.rpcpb.TokenIssueInfo} */ (
    jspb.Message.getWrapperField(this, proto.rpcpb.TokenIssueInfo, 6))
}


/** @param {?proto.rpcpb.TokenIssueInfo|undefined} value */
proto.rpcpb.TxOutDetail.prototype.setTokenIssueInfo = function (value) {
  jspb.Message.setOneofWrapperField(this, 6, proto.rpcpb.TxOutDetail.oneofGroups_[0], value)
}


/**
 * Clears the message field making it undefined.
 */
proto.rpcpb.TxOutDetail.prototype.clearTokenIssueInfo = function () {
  this.setTokenIssueInfo(undefined)
}


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rpcpb.TxOutDetail.prototype.hasTokenIssueInfo = function () {
  return jspb.Message.getField(this, 6) != null
}


/**
 * optional TokenTransferInfo token_transfer_info = 7;
 * @return {?proto.rpcpb.TokenTransferInfo}
 */
proto.rpcpb.TxOutDetail.prototype.getTokenTransferInfo = function () {
  return /** @type{?proto.rpcpb.TokenTransferInfo} */ (
    jspb.Message.getWrapperField(this, proto.rpcpb.TokenTransferInfo, 7))
}


/** @param {?proto.rpcpb.TokenTransferInfo|undefined} value */
proto.rpcpb.TxOutDetail.prototype.setTokenTransferInfo = function (value) {
  jspb.Message.setOneofWrapperField(this, 7, proto.rpcpb.TxOutDetail.oneofGroups_[0], value)
}


/**
 * Clears the message field making it undefined.
 */
proto.rpcpb.TxOutDetail.prototype.clearTokenTransferInfo = function () {
  this.setTokenTransferInfo(undefined)
}


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rpcpb.TxOutDetail.prototype.hasTokenTransferInfo = function () {
  return jspb.Message.getField(this, 7) != null
}


/**
 * optional SplitContractInfo split_contract_info = 8;
 * @return {?proto.rpcpb.SplitContractInfo}
 */
proto.rpcpb.TxOutDetail.prototype.getSplitContractInfo = function () {
  return /** @type{?proto.rpcpb.SplitContractInfo} */ (
    jspb.Message.getWrapperField(this, proto.rpcpb.SplitContractInfo, 8))
}


/** @param {?proto.rpcpb.SplitContractInfo|undefined} value */
proto.rpcpb.TxOutDetail.prototype.setSplitContractInfo = function (value) {
  jspb.Message.setOneofWrapperField(this, 8, proto.rpcpb.TxOutDetail.oneofGroups_[0], value)
}


/**
 * Clears the message field making it undefined.
 */
proto.rpcpb.TxOutDetail.prototype.clearSplitContractInfo = function () {
  this.setSplitContractInfo(undefined)
}


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rpcpb.TxOutDetail.prototype.hasSplitContractInfo = function () {
  return jspb.Message.getField(this, 8) != null
}


/**
 * optional ContractInfo contract_info = 9;
 * @return {?proto.rpcpb.ContractInfo}
 */
proto.rpcpb.TxOutDetail.prototype.getContractInfo = function () {
  return /** @type{?proto.rpcpb.ContractInfo} */ (
    jspb.Message.getWrapperField(this, proto.rpcpb.ContractInfo, 9))
}


/** @param {?proto.rpcpb.ContractInfo|undefined} value */
proto.rpcpb.TxOutDetail.prototype.setContractInfo = function (value) {
  jspb.Message.setOneofWrapperField(this, 9, proto.rpcpb.TxOutDetail.oneofGroups_[0], value)
}


/**
 * Clears the message field making it undefined.
 */
proto.rpcpb.TxOutDetail.prototype.clearContractInfo = function () {
  this.setContractInfo(undefined)
}


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rpcpb.TxOutDetail.prototype.hasContractInfo = function () {
  return jspb.Message.getField(this, 9) != null
}



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rpcpb.BlockDetail.repeatedFields_ = [10]



if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.rpcpb.BlockDetail.prototype.toObject = function (opt_includeInstance) {
    return proto.rpcpb.BlockDetail.toObject(opt_includeInstance, this)
  }


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.rpcpb.BlockDetail} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.rpcpb.BlockDetail.toObject = function (includeInstance, msg) {
    var f, obj = {
      version: jspb.Message.getFieldWithDefault(msg, 1, 0),
      height: jspb.Message.getFieldWithDefault(msg, 2, 0),
      timeStamp: jspb.Message.getFieldWithDefault(msg, 3, 0),
      size: jspb.Message.getFieldWithDefault(msg, 4, 0),
      hash: jspb.Message.getFieldWithDefault(msg, 5, ''),
      prevBlockHash: jspb.Message.getFieldWithDefault(msg, 6, ''),
      coinBase: jspb.Message.getFieldWithDefault(msg, 7, ''),
      confirmed: jspb.Message.getFieldWithDefault(msg, 8, false),
      signature: jspb.Message.getFieldWithDefault(msg, 9, ''),
      txsList: jspb.Message.toObjectList(msg.getTxsList(),
        proto.rpcpb.TxDetail.toObject, includeInstance)
    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpcpb.BlockDetail}
 */
proto.rpcpb.BlockDetail.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.rpcpb.BlockDetail
  return proto.rpcpb.BlockDetail.deserializeBinaryFromReader(msg, reader)
}


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpcpb.BlockDetail} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpcpb.BlockDetail}
 */
proto.rpcpb.BlockDetail.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readInt32())
        msg.setVersion(value)
        break
      case 2:
        var value = /** @type {number} */ (reader.readUint32())
        msg.setHeight(value)
        break
      case 3:
        var value = /** @type {number} */ (reader.readInt64())
        msg.setTimeStamp(value)
        break
      case 4:
        var value = /** @type {number} */ (reader.readUint32())
        msg.setSize(value)
        break
      case 5:
        var value = /** @type {string} */ (reader.readString())
        msg.setHash(value)
        break
      case 6:
        var value = /** @type {string} */ (reader.readString())
        msg.setPrevBlockHash(value)
        break
      case 7:
        var value = /** @type {string} */ (reader.readString())
        msg.setCoinBase(value)
        break
      case 8:
        var value = /** @type {boolean} */ (reader.readBool())
        msg.setConfirmed(value)
        break
      case 9:
        var value = /** @type {string} */ (reader.readString())
        msg.setSignature(value)
        break
      case 10:
        var value = new proto.rpcpb.TxDetail
        reader.readMessage(value, proto.rpcpb.TxDetail.deserializeBinaryFromReader)
        msg.addTxs(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpcpb.BlockDetail.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.rpcpb.BlockDetail.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpcpb.BlockDetail} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpcpb.BlockDetail.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getVersion()
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    )
  }
  f = message.getHeight()
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    )
  }
  f = message.getTimeStamp()
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    )
  }
  f = message.getSize()
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    )
  }
  f = message.getHash()
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    )
  }
  f = message.getPrevBlockHash()
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    )
  }
  f = message.getCoinBase()
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    )
  }
  f = message.getConfirmed()
  if (f) {
    writer.writeBool(
      8,
      f
    )
  }
  f = message.getSignature()
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    )
  }
  f = message.getTxsList()
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      10,
      f,
      proto.rpcpb.TxDetail.serializeBinaryToWriter
    )
  }
}


/**
 * optional int32 version = 1;
 * @return {number}
 */
proto.rpcpb.BlockDetail.prototype.getVersion = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0))
}


/** @param {number} value */
proto.rpcpb.BlockDetail.prototype.setVersion = function (value) {
  jspb.Message.setProto3IntField(this, 1, value)
}


/**
 * optional uint32 height = 2;
 * @return {number}
 */
proto.rpcpb.BlockDetail.prototype.getHeight = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0))
}


/** @param {number} value */
proto.rpcpb.BlockDetail.prototype.setHeight = function (value) {
  jspb.Message.setProto3IntField(this, 2, value)
}


/**
 * optional int64 time_stamp = 3;
 * @return {number}
 */
proto.rpcpb.BlockDetail.prototype.getTimeStamp = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0))
}


/** @param {number} value */
proto.rpcpb.BlockDetail.prototype.setTimeStamp = function (value) {
  jspb.Message.setProto3IntField(this, 3, value)
}


/**
 * optional uint32 size = 4;
 * @return {number}
 */
proto.rpcpb.BlockDetail.prototype.getSize = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0))
}


/** @param {number} value */
proto.rpcpb.BlockDetail.prototype.setSize = function (value) {
  jspb.Message.setProto3IntField(this, 4, value)
}


/**
 * optional string hash = 5;
 * @return {string}
 */
proto.rpcpb.BlockDetail.prototype.getHash = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ''))
}


/** @param {string} value */
proto.rpcpb.BlockDetail.prototype.setHash = function (value) {
  jspb.Message.setProto3StringField(this, 5, value)
}


/**
 * optional string prev_block_hash = 6;
 * @return {string}
 */
proto.rpcpb.BlockDetail.prototype.getPrevBlockHash = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ''))
}


/** @param {string} value */
proto.rpcpb.BlockDetail.prototype.setPrevBlockHash = function (value) {
  jspb.Message.setProto3StringField(this, 6, value)
}


/**
 * optional string coin_base = 7;
 * @return {string}
 */
proto.rpcpb.BlockDetail.prototype.getCoinBase = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ''))
}


/** @param {string} value */
proto.rpcpb.BlockDetail.prototype.setCoinBase = function (value) {
  jspb.Message.setProto3StringField(this, 7, value)
}


/**
 * optional bool confirmed = 8;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.rpcpb.BlockDetail.prototype.getConfirmed = function () {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 8, false))
}


/** @param {boolean} value */
proto.rpcpb.BlockDetail.prototype.setConfirmed = function (value) {
  jspb.Message.setProto3BooleanField(this, 8, value)
}


/**
 * optional string signature = 9;
 * @return {string}
 */
proto.rpcpb.BlockDetail.prototype.getSignature = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ''))
}


/** @param {string} value */
proto.rpcpb.BlockDetail.prototype.setSignature = function (value) {
  jspb.Message.setProto3StringField(this, 9, value)
}


/**
 * repeated TxDetail txs = 10;
 * @return {!Array<!proto.rpcpb.TxDetail>}
 */
proto.rpcpb.BlockDetail.prototype.getTxsList = function () {
  return /** @type{!Array<!proto.rpcpb.TxDetail>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rpcpb.TxDetail, 10))
}


/** @param {!Array<!proto.rpcpb.TxDetail>} value */
proto.rpcpb.BlockDetail.prototype.setTxsList = function (value) {
  jspb.Message.setRepeatedWrapperField(this, 10, value)
}


/**
 * @param {!proto.rpcpb.TxDetail=} opt_value
 * @param {number=} opt_index
 * @return {!proto.rpcpb.TxDetail}
 */
proto.rpcpb.BlockDetail.prototype.addTxs = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 10, opt_value, proto.rpcpb.TxDetail, opt_index)
}


/**
 * Clears the list making it empty but non-null.
 */
proto.rpcpb.BlockDetail.prototype.clearTxsList = function () {
  this.setTxsList([])
}





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.rpcpb.TokenIssueInfo.prototype.toObject = function (opt_includeInstance) {
    return proto.rpcpb.TokenIssueInfo.toObject(opt_includeInstance, this)
  }


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.rpcpb.TokenIssueInfo} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.rpcpb.TokenIssueInfo.toObject = function (includeInstance, msg) {
    var f, obj = {
      tokenTag: (f = msg.getTokenTag()) && proto.rpcpb.TokenTag.toObject(includeInstance, f)
    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpcpb.TokenIssueInfo}
 */
proto.rpcpb.TokenIssueInfo.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.rpcpb.TokenIssueInfo
  return proto.rpcpb.TokenIssueInfo.deserializeBinaryFromReader(msg, reader)
}


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpcpb.TokenIssueInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpcpb.TokenIssueInfo}
 */
proto.rpcpb.TokenIssueInfo.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = new proto.rpcpb.TokenTag
        reader.readMessage(value, proto.rpcpb.TokenTag.deserializeBinaryFromReader)
        msg.setTokenTag(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpcpb.TokenIssueInfo.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.rpcpb.TokenIssueInfo.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpcpb.TokenIssueInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpcpb.TokenIssueInfo.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getTokenTag()
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rpcpb.TokenTag.serializeBinaryToWriter
    )
  }
}


/**
 * optional TokenTag token_tag = 1;
 * @return {?proto.rpcpb.TokenTag}
 */
proto.rpcpb.TokenIssueInfo.prototype.getTokenTag = function () {
  return /** @type{?proto.rpcpb.TokenTag} */ (
    jspb.Message.getWrapperField(this, proto.rpcpb.TokenTag, 1))
}


/** @param {?proto.rpcpb.TokenTag|undefined} value */
proto.rpcpb.TokenIssueInfo.prototype.setTokenTag = function (value) {
  jspb.Message.setWrapperField(this, 1, value)
}


/**
 * Clears the message field making it undefined.
 */
proto.rpcpb.TokenIssueInfo.prototype.clearTokenTag = function () {
  this.setTokenTag(undefined)
}


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rpcpb.TokenIssueInfo.prototype.hasTokenTag = function () {
  return jspb.Message.getField(this, 1) != null
}



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rpcpb.SplitContractInfo.repeatedFields_ = [1, 2]



if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.rpcpb.SplitContractInfo.prototype.toObject = function (opt_includeInstance) {
    return proto.rpcpb.SplitContractInfo.toObject(opt_includeInstance, this)
  }


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.rpcpb.SplitContractInfo} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.rpcpb.SplitContractInfo.toObject = function (includeInstance, msg) {
    var f, obj = {
      addrsList: jspb.Message.getRepeatedField(msg, 1),
      weightsList: jspb.Message.getRepeatedField(msg, 2)
    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpcpb.SplitContractInfo}
 */
proto.rpcpb.SplitContractInfo.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.rpcpb.SplitContractInfo
  return proto.rpcpb.SplitContractInfo.deserializeBinaryFromReader(msg, reader)
}


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpcpb.SplitContractInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpcpb.SplitContractInfo}
 */
proto.rpcpb.SplitContractInfo.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString())
        msg.addAddrs(value)
        break
      case 2:
        var value = /** @type {!Array<number>} */ (reader.readPackedUint64())
        msg.setWeightsList(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpcpb.SplitContractInfo.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.rpcpb.SplitContractInfo.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpcpb.SplitContractInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpcpb.SplitContractInfo.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getAddrsList()
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    )
  }
  f = message.getWeightsList()
  if (f.length > 0) {
    writer.writePackedUint64(
      2,
      f
    )
  }
}


/**
 * repeated string addrs = 1;
 * @return {!Array<string>}
 */
proto.rpcpb.SplitContractInfo.prototype.getAddrsList = function () {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1))
}


/** @param {!Array<string>} value */
proto.rpcpb.SplitContractInfo.prototype.setAddrsList = function (value) {
  jspb.Message.setField(this, 1, value || [])
}


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.rpcpb.SplitContractInfo.prototype.addAddrs = function (value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index)
}


/**
 * Clears the list making it empty but non-null.
 */
proto.rpcpb.SplitContractInfo.prototype.clearAddrsList = function () {
  this.setAddrsList([])
}


/**
 * repeated uint64 weights = 2;
 * @return {!Array<number>}
 */
proto.rpcpb.SplitContractInfo.prototype.getWeightsList = function () {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 2))
}


/** @param {!Array<number>} value */
proto.rpcpb.SplitContractInfo.prototype.setWeightsList = function (value) {
  jspb.Message.setField(this, 2, value || [])
}


/**
 * @param {number} value
 * @param {number=} opt_index
 */
proto.rpcpb.SplitContractInfo.prototype.addWeights = function (value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index)
}


/**
 * Clears the list making it empty but non-null.
 */
proto.rpcpb.SplitContractInfo.prototype.clearWeightsList = function () {
  this.setWeightsList([])
}





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.rpcpb.TokenTransferInfo.prototype.toObject = function (opt_includeInstance) {
    return proto.rpcpb.TokenTransferInfo.toObject(opt_includeInstance, this)
  }


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.rpcpb.TokenTransferInfo} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.rpcpb.TokenTransferInfo.toObject = function (includeInstance, msg) {
    var f, obj = {
      tokenId: jspb.Message.getFieldWithDefault(msg, 1, '')
    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpcpb.TokenTransferInfo}
 */
proto.rpcpb.TokenTransferInfo.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.rpcpb.TokenTransferInfo
  return proto.rpcpb.TokenTransferInfo.deserializeBinaryFromReader(msg, reader)
}


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpcpb.TokenTransferInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpcpb.TokenTransferInfo}
 */
proto.rpcpb.TokenTransferInfo.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString())
        msg.setTokenId(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpcpb.TokenTransferInfo.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.rpcpb.TokenTransferInfo.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpcpb.TokenTransferInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpcpb.TokenTransferInfo.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getTokenId()
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    )
  }
}


/**
 * optional string token_id = 1;
 * @return {string}
 */
proto.rpcpb.TokenTransferInfo.prototype.getTokenId = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
}


/** @param {string} value */
proto.rpcpb.TokenTransferInfo.prototype.setTokenId = function (value) {
  jspb.Message.setProto3StringField(this, 1, value)
}





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.rpcpb.CallReq.prototype.toObject = function (opt_includeInstance) {
    return proto.rpcpb.CallReq.toObject(opt_includeInstance, this)
  }


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.rpcpb.CallReq} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.rpcpb.CallReq.toObject = function (includeInstance, msg) {
    var f, obj = {
      from: jspb.Message.getFieldWithDefault(msg, 1, ''),
      to: jspb.Message.getFieldWithDefault(msg, 2, ''),
      data: jspb.Message.getFieldWithDefault(msg, 3, ''),
      height: jspb.Message.getFieldWithDefault(msg, 4, 0),
      timeout: jspb.Message.getFieldWithDefault(msg, 5, 0)
    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpcpb.CallReq}
 */
proto.rpcpb.CallReq.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.rpcpb.CallReq
  return proto.rpcpb.CallReq.deserializeBinaryFromReader(msg, reader)
}


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpcpb.CallReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpcpb.CallReq}
 */
proto.rpcpb.CallReq.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString())
        msg.setFrom(value)
        break
      case 2:
        var value = /** @type {string} */ (reader.readString())
        msg.setTo(value)
        break
      case 3:
        var value = /** @type {string} */ (reader.readString())
        msg.setData(value)
        break
      case 4:
        var value = /** @type {number} */ (reader.readUint32())
        msg.setHeight(value)
        break
      case 5:
        var value = /** @type {number} */ (reader.readUint32())
        msg.setTimeout(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpcpb.CallReq.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.rpcpb.CallReq.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpcpb.CallReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpcpb.CallReq.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getFrom()
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    )
  }
  f = message.getTo()
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    )
  }
  f = message.getData()
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    )
  }
  f = message.getHeight()
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    )
  }
  f = message.getTimeout()
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    )
  }
}


/**
 * optional string from = 1;
 * @return {string}
 */
proto.rpcpb.CallReq.prototype.getFrom = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
}


/** @param {string} value */
proto.rpcpb.CallReq.prototype.setFrom = function (value) {
  jspb.Message.setProto3StringField(this, 1, value)
}


/**
 * optional string to = 2;
 * @return {string}
 */
proto.rpcpb.CallReq.prototype.getTo = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''))
}


/** @param {string} value */
proto.rpcpb.CallReq.prototype.setTo = function (value) {
  jspb.Message.setProto3StringField(this, 2, value)
}


/**
 * optional string data = 3;
 * @return {string}
 */
proto.rpcpb.CallReq.prototype.getData = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''))
}


/** @param {string} value */
proto.rpcpb.CallReq.prototype.setData = function (value) {
  jspb.Message.setProto3StringField(this, 3, value)
}


/**
 * optional uint32 height = 4;
 * @return {number}
 */
proto.rpcpb.CallReq.prototype.getHeight = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0))
}


/** @param {number} value */
proto.rpcpb.CallReq.prototype.setHeight = function (value) {
  jspb.Message.setProto3IntField(this, 4, value)
}


/**
 * optional uint32 timeout = 5;
 * @return {number}
 */
proto.rpcpb.CallReq.prototype.getTimeout = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0))
}


/** @param {number} value */
proto.rpcpb.CallReq.prototype.setTimeout = function (value) {
  jspb.Message.setProto3IntField(this, 5, value)
}





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.rpcpb.CallResp.prototype.toObject = function (opt_includeInstance) {
    return proto.rpcpb.CallResp.toObject(opt_includeInstance, this)
  }


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.rpcpb.CallResp} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.rpcpb.CallResp.toObject = function (includeInstance, msg) {
    var f, obj = {
      code: jspb.Message.getFieldWithDefault(msg, 1, 0),
      message: jspb.Message.getFieldWithDefault(msg, 2, ''),
      output: jspb.Message.getFieldWithDefault(msg, 3, '')
    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpcpb.CallResp}
 */
proto.rpcpb.CallResp.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.rpcpb.CallResp
  return proto.rpcpb.CallResp.deserializeBinaryFromReader(msg, reader)
}


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpcpb.CallResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpcpb.CallResp}
 */
proto.rpcpb.CallResp.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readInt32())
        msg.setCode(value)
        break
      case 2:
        var value = /** @type {string} */ (reader.readString())
        msg.setMessage(value)
        break
      case 3:
        var value = /** @type {string} */ (reader.readString())
        msg.setOutput(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpcpb.CallResp.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.rpcpb.CallResp.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpcpb.CallResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpcpb.CallResp.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getCode()
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    )
  }
  f = message.getMessage()
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    )
  }
  f = message.getOutput()
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    )
  }
}


/**
 * optional int32 code = 1;
 * @return {number}
 */
proto.rpcpb.CallResp.prototype.getCode = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0))
}


/** @param {number} value */
proto.rpcpb.CallResp.prototype.setCode = function (value) {
  jspb.Message.setProto3IntField(this, 1, value)
}


/**
 * optional string message = 2;
 * @return {string}
 */
proto.rpcpb.CallResp.prototype.getMessage = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''))
}


/** @param {string} value */
proto.rpcpb.CallResp.prototype.setMessage = function (value) {
  jspb.Message.setProto3StringField(this, 2, value)
}


/**
 * optional string output = 3;
 * @return {string}
 */
proto.rpcpb.CallResp.prototype.getOutput = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''))
}


/** @param {string} value */
proto.rpcpb.CallResp.prototype.setOutput = function (value) {
  jspb.Message.setProto3StringField(this, 3, value)
}





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.rpcpb.NonceReq.prototype.toObject = function (opt_includeInstance) {
    return proto.rpcpb.NonceReq.toObject(opt_includeInstance, this)
  }


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.rpcpb.NonceReq} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.rpcpb.NonceReq.toObject = function (includeInstance, msg) {
    var f, obj = {
      addr: jspb.Message.getFieldWithDefault(msg, 1, '')
    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpcpb.NonceReq}
 */
proto.rpcpb.NonceReq.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.rpcpb.NonceReq
  return proto.rpcpb.NonceReq.deserializeBinaryFromReader(msg, reader)
}


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpcpb.NonceReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpcpb.NonceReq}
 */
proto.rpcpb.NonceReq.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString())
        msg.setAddr(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpcpb.NonceReq.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.rpcpb.NonceReq.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpcpb.NonceReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpcpb.NonceReq.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getAddr()
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    )
  }
}


/**
 * optional string addr = 1;
 * @return {string}
 */
proto.rpcpb.NonceReq.prototype.getAddr = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
}


/** @param {string} value */
proto.rpcpb.NonceReq.prototype.setAddr = function (value) {
  jspb.Message.setProto3StringField(this, 1, value)
}





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.rpcpb.NonceResp.prototype.toObject = function (opt_includeInstance) {
    return proto.rpcpb.NonceResp.toObject(opt_includeInstance, this)
  }


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.rpcpb.NonceResp} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.rpcpb.NonceResp.toObject = function (includeInstance, msg) {
    var f, obj = {
      code: jspb.Message.getFieldWithDefault(msg, 1, 0),
      message: jspb.Message.getFieldWithDefault(msg, 2, ''),
      nonce: jspb.Message.getFieldWithDefault(msg, 3, 0)
    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpcpb.NonceResp}
 */
proto.rpcpb.NonceResp.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.rpcpb.NonceResp
  return proto.rpcpb.NonceResp.deserializeBinaryFromReader(msg, reader)
}


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpcpb.NonceResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpcpb.NonceResp}
 */
proto.rpcpb.NonceResp.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readInt32())
        msg.setCode(value)
        break
      case 2:
        var value = /** @type {string} */ (reader.readString())
        msg.setMessage(value)
        break
      case 3:
        var value = /** @type {number} */ (reader.readUint64())
        msg.setNonce(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpcpb.NonceResp.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.rpcpb.NonceResp.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpcpb.NonceResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpcpb.NonceResp.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getCode()
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    )
  }
  f = message.getMessage()
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    )
  }
  f = message.getNonce()
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    )
  }
}


/**
 * optional int32 code = 1;
 * @return {number}
 */
proto.rpcpb.NonceResp.prototype.getCode = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0))
}


/** @param {number} value */
proto.rpcpb.NonceResp.prototype.setCode = function (value) {
  jspb.Message.setProto3IntField(this, 1, value)
}


/**
 * optional string message = 2;
 * @return {string}
 */
proto.rpcpb.NonceResp.prototype.getMessage = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''))
}


/** @param {string} value */
proto.rpcpb.NonceResp.prototype.setMessage = function (value) {
  jspb.Message.setProto3StringField(this, 2, value)
}


/**
 * optional uint64 nonce = 3;
 * @return {number}
 */
proto.rpcpb.NonceResp.prototype.getNonce = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0))
}


/** @param {number} value */
proto.rpcpb.NonceResp.prototype.setNonce = function (value) {
  jspb.Message.setProto3IntField(this, 3, value)
}


/**
 * @enum {number}
 */
proto.rpcpb.TxStatus = {
  UNKNOWN: 0,
  PENDING: 1,
  ONCHAIN: 2,
  CONFIRMED: 3
}