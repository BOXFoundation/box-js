/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.corepb.Block', null, global);
goog.exportSymbol('proto.corepb.BlockHeader', null, global);
goog.exportSymbol('proto.corepb.Data', null, global);
goog.exportSymbol('proto.corepb.IrreversibleInfo', null, global);
goog.exportSymbol('proto.corepb.OutPoint', null, global);
goog.exportSymbol('proto.corepb.Transaction', null, global);
goog.exportSymbol('proto.corepb.TxIn', null, global);
goog.exportSymbol('proto.corepb.TxOut', null, global);
goog.exportSymbol('proto.corepb.UtxoWrap', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.corepb.BlockHeader = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.corepb.BlockHeader, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.corepb.BlockHeader.displayName = 'proto.corepb.BlockHeader';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.corepb.IrreversibleInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.corepb.IrreversibleInfo.repeatedFields_, null);
};
goog.inherits(proto.corepb.IrreversibleInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.corepb.IrreversibleInfo.displayName = 'proto.corepb.IrreversibleInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.corepb.Block = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.corepb.Block.repeatedFields_, null);
};
goog.inherits(proto.corepb.Block, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.corepb.Block.displayName = 'proto.corepb.Block';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.corepb.Transaction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.corepb.Transaction.repeatedFields_, null);
};
goog.inherits(proto.corepb.Transaction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.corepb.Transaction.displayName = 'proto.corepb.Transaction';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.corepb.TxIn = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.corepb.TxIn, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.corepb.TxIn.displayName = 'proto.corepb.TxIn';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.corepb.TxOut = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.corepb.TxOut, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.corepb.TxOut.displayName = 'proto.corepb.TxOut';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.corepb.OutPoint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.corepb.OutPoint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.corepb.OutPoint.displayName = 'proto.corepb.OutPoint';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.corepb.Data = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.corepb.Data, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.corepb.Data.displayName = 'proto.corepb.Data';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.corepb.UtxoWrap = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.corepb.UtxoWrap, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.corepb.UtxoWrap.displayName = 'proto.corepb.UtxoWrap';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.corepb.BlockHeader.prototype.toObject = function(opt_includeInstance) {
  return proto.corepb.BlockHeader.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.corepb.BlockHeader} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.corepb.BlockHeader.toObject = function(includeInstance, msg) {
  var f, obj = {
    version: jspb.Message.getFieldWithDefault(msg, 1, 0),
    prevBlockHash: msg.getPrevBlockHash_asB64(),
    txsRoot: msg.getTxsRoot_asB64(),
    internalTxsRoot: msg.getInternalTxsRoot_asB64(),
    utxoRoot: msg.getUtxoRoot_asB64(),
    receiptHash: msg.getReceiptHash_asB64(),
    timeStamp: jspb.Message.getFieldWithDefault(msg, 7, 0),
    magic: jspb.Message.getFieldWithDefault(msg, 8, 0),
    periodHash: msg.getPeriodHash_asB64(),
    candidatesHash: msg.getCandidatesHash_asB64(),
    rootHash: msg.getRootHash_asB64(),
    height: jspb.Message.getFieldWithDefault(msg, 12, 0),
    gasUsed: jspb.Message.getFieldWithDefault(msg, 13, 0),
    bookKeeper: msg.getBookKeeper_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.corepb.BlockHeader}
 */
proto.corepb.BlockHeader.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.corepb.BlockHeader;
  return proto.corepb.BlockHeader.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.corepb.BlockHeader} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.corepb.BlockHeader}
 */
proto.corepb.BlockHeader.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setVersion(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPrevBlockHash(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTxsRoot(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setInternalTxsRoot(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setUtxoRoot(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setReceiptHash(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimeStamp(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMagic(value);
      break;
    case 9:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPeriodHash(value);
      break;
    case 10:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCandidatesHash(value);
      break;
    case 11:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRootHash(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHeight(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setGasUsed(value);
      break;
    case 14:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBookKeeper(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.corepb.BlockHeader.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.corepb.BlockHeader.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.corepb.BlockHeader} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.corepb.BlockHeader.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVersion();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getPrevBlockHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getTxsRoot_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getInternalTxsRoot_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getUtxoRoot_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getReceiptHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getTimeStamp();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
  f = message.getMagic();
  if (f !== 0) {
    writer.writeUint32(
      8,
      f
    );
  }
  f = message.getPeriodHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      9,
      f
    );
  }
  f = message.getCandidatesHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      10,
      f
    );
  }
  f = message.getRootHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      11,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeUint32(
      12,
      f
    );
  }
  f = message.getGasUsed();
  if (f !== 0) {
    writer.writeUint64(
      13,
      f
    );
  }
  f = message.getBookKeeper_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      14,
      f
    );
  }
};


/**
 * optional int32 version = 1;
 * @return {number}
 */
proto.corepb.BlockHeader.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.corepb.BlockHeader.prototype.setVersion = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bytes prev_block_hash = 2;
 * @return {!(string|Uint8Array)}
 */
proto.corepb.BlockHeader.prototype.getPrevBlockHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes prev_block_hash = 2;
 * This is a type-conversion wrapper around `getPrevBlockHash()`
 * @return {string}
 */
proto.corepb.BlockHeader.prototype.getPrevBlockHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPrevBlockHash()));
};


/**
 * optional bytes prev_block_hash = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPrevBlockHash()`
 * @return {!Uint8Array}
 */
proto.corepb.BlockHeader.prototype.getPrevBlockHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPrevBlockHash()));
};


/** @param {!(string|Uint8Array)} value */
proto.corepb.BlockHeader.prototype.setPrevBlockHash = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes txs_root = 3;
 * @return {!(string|Uint8Array)}
 */
proto.corepb.BlockHeader.prototype.getTxsRoot = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes txs_root = 3;
 * This is a type-conversion wrapper around `getTxsRoot()`
 * @return {string}
 */
proto.corepb.BlockHeader.prototype.getTxsRoot_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTxsRoot()));
};


/**
 * optional bytes txs_root = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTxsRoot()`
 * @return {!Uint8Array}
 */
proto.corepb.BlockHeader.prototype.getTxsRoot_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTxsRoot()));
};


/** @param {!(string|Uint8Array)} value */
proto.corepb.BlockHeader.prototype.setTxsRoot = function(value) {
  jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional bytes internal_txs_root = 4;
 * @return {!(string|Uint8Array)}
 */
proto.corepb.BlockHeader.prototype.getInternalTxsRoot = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes internal_txs_root = 4;
 * This is a type-conversion wrapper around `getInternalTxsRoot()`
 * @return {string}
 */
proto.corepb.BlockHeader.prototype.getInternalTxsRoot_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getInternalTxsRoot()));
};


/**
 * optional bytes internal_txs_root = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getInternalTxsRoot()`
 * @return {!Uint8Array}
 */
proto.corepb.BlockHeader.prototype.getInternalTxsRoot_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getInternalTxsRoot()));
};


/** @param {!(string|Uint8Array)} value */
proto.corepb.BlockHeader.prototype.setInternalTxsRoot = function(value) {
  jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional bytes utxo_root = 5;
 * @return {!(string|Uint8Array)}
 */
proto.corepb.BlockHeader.prototype.getUtxoRoot = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes utxo_root = 5;
 * This is a type-conversion wrapper around `getUtxoRoot()`
 * @return {string}
 */
proto.corepb.BlockHeader.prototype.getUtxoRoot_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getUtxoRoot()));
};


/**
 * optional bytes utxo_root = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getUtxoRoot()`
 * @return {!Uint8Array}
 */
proto.corepb.BlockHeader.prototype.getUtxoRoot_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getUtxoRoot()));
};


/** @param {!(string|Uint8Array)} value */
proto.corepb.BlockHeader.prototype.setUtxoRoot = function(value) {
  jspb.Message.setProto3BytesField(this, 5, value);
};


/**
 * optional bytes receipt_hash = 6;
 * @return {!(string|Uint8Array)}
 */
proto.corepb.BlockHeader.prototype.getReceiptHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes receipt_hash = 6;
 * This is a type-conversion wrapper around `getReceiptHash()`
 * @return {string}
 */
proto.corepb.BlockHeader.prototype.getReceiptHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getReceiptHash()));
};


/**
 * optional bytes receipt_hash = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getReceiptHash()`
 * @return {!Uint8Array}
 */
proto.corepb.BlockHeader.prototype.getReceiptHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getReceiptHash()));
};


/** @param {!(string|Uint8Array)} value */
proto.corepb.BlockHeader.prototype.setReceiptHash = function(value) {
  jspb.Message.setProto3BytesField(this, 6, value);
};


/**
 * optional int64 time_stamp = 7;
 * @return {number}
 */
proto.corepb.BlockHeader.prototype.getTimeStamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.corepb.BlockHeader.prototype.setTimeStamp = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional uint32 magic = 8;
 * @return {number}
 */
proto.corepb.BlockHeader.prototype.getMagic = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.corepb.BlockHeader.prototype.setMagic = function(value) {
  jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional bytes period_hash = 9;
 * @return {!(string|Uint8Array)}
 */
proto.corepb.BlockHeader.prototype.getPeriodHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * optional bytes period_hash = 9;
 * This is a type-conversion wrapper around `getPeriodHash()`
 * @return {string}
 */
proto.corepb.BlockHeader.prototype.getPeriodHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPeriodHash()));
};


/**
 * optional bytes period_hash = 9;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPeriodHash()`
 * @return {!Uint8Array}
 */
proto.corepb.BlockHeader.prototype.getPeriodHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPeriodHash()));
};


/** @param {!(string|Uint8Array)} value */
proto.corepb.BlockHeader.prototype.setPeriodHash = function(value) {
  jspb.Message.setProto3BytesField(this, 9, value);
};


/**
 * optional bytes candidates_hash = 10;
 * @return {!(string|Uint8Array)}
 */
proto.corepb.BlockHeader.prototype.getCandidatesHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * optional bytes candidates_hash = 10;
 * This is a type-conversion wrapper around `getCandidatesHash()`
 * @return {string}
 */
proto.corepb.BlockHeader.prototype.getCandidatesHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCandidatesHash()));
};


/**
 * optional bytes candidates_hash = 10;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCandidatesHash()`
 * @return {!Uint8Array}
 */
proto.corepb.BlockHeader.prototype.getCandidatesHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCandidatesHash()));
};


/** @param {!(string|Uint8Array)} value */
proto.corepb.BlockHeader.prototype.setCandidatesHash = function(value) {
  jspb.Message.setProto3BytesField(this, 10, value);
};


/**
 * optional bytes root_hash = 11;
 * @return {!(string|Uint8Array)}
 */
proto.corepb.BlockHeader.prototype.getRootHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * optional bytes root_hash = 11;
 * This is a type-conversion wrapper around `getRootHash()`
 * @return {string}
 */
proto.corepb.BlockHeader.prototype.getRootHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRootHash()));
};


/**
 * optional bytes root_hash = 11;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRootHash()`
 * @return {!Uint8Array}
 */
proto.corepb.BlockHeader.prototype.getRootHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRootHash()));
};


/** @param {!(string|Uint8Array)} value */
proto.corepb.BlockHeader.prototype.setRootHash = function(value) {
  jspb.Message.setProto3BytesField(this, 11, value);
};


/**
 * optional uint32 height = 12;
 * @return {number}
 */
proto.corepb.BlockHeader.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/** @param {number} value */
proto.corepb.BlockHeader.prototype.setHeight = function(value) {
  jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional uint64 gas_used = 13;
 * @return {number}
 */
proto.corepb.BlockHeader.prototype.getGasUsed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/** @param {number} value */
proto.corepb.BlockHeader.prototype.setGasUsed = function(value) {
  jspb.Message.setProto3IntField(this, 13, value);
};


/**
 * optional bytes book_keeper = 14;
 * @return {!(string|Uint8Array)}
 */
proto.corepb.BlockHeader.prototype.getBookKeeper = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/**
 * optional bytes book_keeper = 14;
 * This is a type-conversion wrapper around `getBookKeeper()`
 * @return {string}
 */
proto.corepb.BlockHeader.prototype.getBookKeeper_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBookKeeper()));
};


/**
 * optional bytes book_keeper = 14;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBookKeeper()`
 * @return {!Uint8Array}
 */
proto.corepb.BlockHeader.prototype.getBookKeeper_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBookKeeper()));
};


/** @param {!(string|Uint8Array)} value */
proto.corepb.BlockHeader.prototype.setBookKeeper = function(value) {
  jspb.Message.setProto3BytesField(this, 14, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.corepb.IrreversibleInfo.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.corepb.IrreversibleInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.corepb.IrreversibleInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.corepb.IrreversibleInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.corepb.IrreversibleInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    hash: msg.getHash_asB64(),
    signaturesList: msg.getSignaturesList_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.corepb.IrreversibleInfo}
 */
proto.corepb.IrreversibleInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.corepb.IrreversibleInfo;
  return proto.corepb.IrreversibleInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.corepb.IrreversibleInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.corepb.IrreversibleInfo}
 */
proto.corepb.IrreversibleInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setHash(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addSignatures(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.corepb.IrreversibleInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.corepb.IrreversibleInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.corepb.IrreversibleInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.corepb.IrreversibleInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getSignaturesList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes hash = 1;
 * @return {!(string|Uint8Array)}
 */
proto.corepb.IrreversibleInfo.prototype.getHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes hash = 1;
 * This is a type-conversion wrapper around `getHash()`
 * @return {string}
 */
proto.corepb.IrreversibleInfo.prototype.getHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getHash()));
};


/**
 * optional bytes hash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHash()`
 * @return {!Uint8Array}
 */
proto.corepb.IrreversibleInfo.prototype.getHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getHash()));
};


/** @param {!(string|Uint8Array)} value */
proto.corepb.IrreversibleInfo.prototype.setHash = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * repeated bytes signatures = 2;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.corepb.IrreversibleInfo.prototype.getSignaturesList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * repeated bytes signatures = 2;
 * This is a type-conversion wrapper around `getSignaturesList()`
 * @return {!Array<string>}
 */
proto.corepb.IrreversibleInfo.prototype.getSignaturesList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getSignaturesList()));
};


/**
 * repeated bytes signatures = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignaturesList()`
 * @return {!Array<!Uint8Array>}
 */
proto.corepb.IrreversibleInfo.prototype.getSignaturesList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getSignaturesList()));
};


/** @param {!(Array<!Uint8Array>|Array<string>)} value */
proto.corepb.IrreversibleInfo.prototype.setSignaturesList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 */
proto.corepb.IrreversibleInfo.prototype.addSignatures = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.corepb.IrreversibleInfo.prototype.clearSignaturesList = function() {
  this.setSignaturesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.corepb.Block.repeatedFields_ = [2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.corepb.Block.prototype.toObject = function(opt_includeInstance) {
  return proto.corepb.Block.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.corepb.Block} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.corepb.Block.toObject = function(includeInstance, msg) {
  var f, obj = {
    header: (f = msg.getHeader()) && proto.corepb.BlockHeader.toObject(includeInstance, f),
    txsList: jspb.Message.toObjectList(msg.getTxsList(),
    proto.corepb.Transaction.toObject, includeInstance),
    internalTxsList: jspb.Message.toObjectList(msg.getInternalTxsList(),
    proto.corepb.Transaction.toObject, includeInstance),
    signature: msg.getSignature_asB64(),
    irreversibleInfo: (f = msg.getIrreversibleInfo()) && proto.corepb.IrreversibleInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.corepb.Block}
 */
proto.corepb.Block.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.corepb.Block;
  return proto.corepb.Block.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.corepb.Block} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.corepb.Block}
 */
proto.corepb.Block.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.corepb.BlockHeader;
      reader.readMessage(value,proto.corepb.BlockHeader.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 2:
      var value = new proto.corepb.Transaction;
      reader.readMessage(value,proto.corepb.Transaction.deserializeBinaryFromReader);
      msg.addTxs(value);
      break;
    case 3:
      var value = new proto.corepb.Transaction;
      reader.readMessage(value,proto.corepb.Transaction.deserializeBinaryFromReader);
      msg.addInternalTxs(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignature(value);
      break;
    case 5:
      var value = new proto.corepb.IrreversibleInfo;
      reader.readMessage(value,proto.corepb.IrreversibleInfo.deserializeBinaryFromReader);
      msg.setIrreversibleInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.corepb.Block.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.corepb.Block.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.corepb.Block} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.corepb.Block.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.corepb.BlockHeader.serializeBinaryToWriter
    );
  }
  f = message.getTxsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.corepb.Transaction.serializeBinaryToWriter
    );
  }
  f = message.getInternalTxsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.corepb.Transaction.serializeBinaryToWriter
    );
  }
  f = message.getSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getIrreversibleInfo();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.corepb.IrreversibleInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional BlockHeader header = 1;
 * @return {?proto.corepb.BlockHeader}
 */
proto.corepb.Block.prototype.getHeader = function() {
  return /** @type{?proto.corepb.BlockHeader} */ (
    jspb.Message.getWrapperField(this, proto.corepb.BlockHeader, 1));
};


/** @param {?proto.corepb.BlockHeader|undefined} value */
proto.corepb.Block.prototype.setHeader = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.corepb.Block.prototype.clearHeader = function() {
  this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.corepb.Block.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated Transaction txs = 2;
 * @return {!Array<!proto.corepb.Transaction>}
 */
proto.corepb.Block.prototype.getTxsList = function() {
  return /** @type{!Array<!proto.corepb.Transaction>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.corepb.Transaction, 2));
};


/** @param {!Array<!proto.corepb.Transaction>} value */
proto.corepb.Block.prototype.setTxsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.corepb.Transaction=} opt_value
 * @param {number=} opt_index
 * @return {!proto.corepb.Transaction}
 */
proto.corepb.Block.prototype.addTxs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.corepb.Transaction, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.corepb.Block.prototype.clearTxsList = function() {
  this.setTxsList([]);
};


/**
 * repeated Transaction internal_txs = 3;
 * @return {!Array<!proto.corepb.Transaction>}
 */
proto.corepb.Block.prototype.getInternalTxsList = function() {
  return /** @type{!Array<!proto.corepb.Transaction>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.corepb.Transaction, 3));
};


/** @param {!Array<!proto.corepb.Transaction>} value */
proto.corepb.Block.prototype.setInternalTxsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.corepb.Transaction=} opt_value
 * @param {number=} opt_index
 * @return {!proto.corepb.Transaction}
 */
proto.corepb.Block.prototype.addInternalTxs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.corepb.Transaction, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.corepb.Block.prototype.clearInternalTxsList = function() {
  this.setInternalTxsList([]);
};


/**
 * optional bytes signature = 4;
 * @return {!(string|Uint8Array)}
 */
proto.corepb.Block.prototype.getSignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes signature = 4;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.corepb.Block.prototype.getSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignature()));
};


/**
 * optional bytes signature = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.corepb.Block.prototype.getSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignature()));
};


/** @param {!(string|Uint8Array)} value */
proto.corepb.Block.prototype.setSignature = function(value) {
  jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional IrreversibleInfo irreversible_info = 5;
 * @return {?proto.corepb.IrreversibleInfo}
 */
proto.corepb.Block.prototype.getIrreversibleInfo = function() {
  return /** @type{?proto.corepb.IrreversibleInfo} */ (
    jspb.Message.getWrapperField(this, proto.corepb.IrreversibleInfo, 5));
};


/** @param {?proto.corepb.IrreversibleInfo|undefined} value */
proto.corepb.Block.prototype.setIrreversibleInfo = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.corepb.Block.prototype.clearIrreversibleInfo = function() {
  this.setIrreversibleInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.corepb.Block.prototype.hasIrreversibleInfo = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.corepb.Transaction.repeatedFields_ = [2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.corepb.Transaction.prototype.toObject = function(opt_includeInstance) {
  return proto.corepb.Transaction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.corepb.Transaction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.corepb.Transaction.toObject = function(includeInstance, msg) {
  var f, obj = {
    version: jspb.Message.getFieldWithDefault(msg, 1, 0),
    vinList: jspb.Message.toObjectList(msg.getVinList(),
    proto.corepb.TxIn.toObject, includeInstance),
    voutList: jspb.Message.toObjectList(msg.getVoutList(),
    proto.corepb.TxOut.toObject, includeInstance),
    data: (f = msg.getData()) && proto.corepb.Data.toObject(includeInstance, f),
    magic: jspb.Message.getFieldWithDefault(msg, 5, 0),
    lockTime: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.corepb.Transaction}
 */
proto.corepb.Transaction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.corepb.Transaction;
  return proto.corepb.Transaction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.corepb.Transaction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.corepb.Transaction}
 */
proto.corepb.Transaction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setVersion(value);
      break;
    case 2:
      var value = new proto.corepb.TxIn;
      reader.readMessage(value,proto.corepb.TxIn.deserializeBinaryFromReader);
      msg.addVin(value);
      break;
    case 3:
      var value = new proto.corepb.TxOut;
      reader.readMessage(value,proto.corepb.TxOut.deserializeBinaryFromReader);
      msg.addVout(value);
      break;
    case 4:
      var value = new proto.corepb.Data;
      reader.readMessage(value,proto.corepb.Data.deserializeBinaryFromReader);
      msg.setData(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMagic(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLockTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.corepb.Transaction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.corepb.Transaction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.corepb.Transaction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.corepb.Transaction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVersion();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getVinList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.corepb.TxIn.serializeBinaryToWriter
    );
  }
  f = message.getVoutList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.corepb.TxOut.serializeBinaryToWriter
    );
  }
  f = message.getData();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.corepb.Data.serializeBinaryToWriter
    );
  }
  f = message.getMagic();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getLockTime();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
};


/**
 * optional int32 version = 1;
 * @return {number}
 */
proto.corepb.Transaction.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.corepb.Transaction.prototype.setVersion = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated TxIn vin = 2;
 * @return {!Array<!proto.corepb.TxIn>}
 */
proto.corepb.Transaction.prototype.getVinList = function() {
  return /** @type{!Array<!proto.corepb.TxIn>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.corepb.TxIn, 2));
};


/** @param {!Array<!proto.corepb.TxIn>} value */
proto.corepb.Transaction.prototype.setVinList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.corepb.TxIn=} opt_value
 * @param {number=} opt_index
 * @return {!proto.corepb.TxIn}
 */
proto.corepb.Transaction.prototype.addVin = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.corepb.TxIn, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.corepb.Transaction.prototype.clearVinList = function() {
  this.setVinList([]);
};


/**
 * repeated TxOut vout = 3;
 * @return {!Array<!proto.corepb.TxOut>}
 */
proto.corepb.Transaction.prototype.getVoutList = function() {
  return /** @type{!Array<!proto.corepb.TxOut>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.corepb.TxOut, 3));
};


/** @param {!Array<!proto.corepb.TxOut>} value */
proto.corepb.Transaction.prototype.setVoutList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.corepb.TxOut=} opt_value
 * @param {number=} opt_index
 * @return {!proto.corepb.TxOut}
 */
proto.corepb.Transaction.prototype.addVout = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.corepb.TxOut, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.corepb.Transaction.prototype.clearVoutList = function() {
  this.setVoutList([]);
};


/**
 * optional Data data = 4;
 * @return {?proto.corepb.Data}
 */
proto.corepb.Transaction.prototype.getData = function() {
  return /** @type{?proto.corepb.Data} */ (
    jspb.Message.getWrapperField(this, proto.corepb.Data, 4));
};


/** @param {?proto.corepb.Data|undefined} value */
proto.corepb.Transaction.prototype.setData = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.corepb.Transaction.prototype.clearData = function() {
  this.setData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.corepb.Transaction.prototype.hasData = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional uint32 magic = 5;
 * @return {number}
 */
proto.corepb.Transaction.prototype.getMagic = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.corepb.Transaction.prototype.setMagic = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int64 lock_time = 6;
 * @return {number}
 */
proto.corepb.Transaction.prototype.getLockTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.corepb.Transaction.prototype.setLockTime = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.corepb.TxIn.prototype.toObject = function(opt_includeInstance) {
  return proto.corepb.TxIn.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.corepb.TxIn} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.corepb.TxIn.toObject = function(includeInstance, msg) {
  var f, obj = {
    prevOutPoint: (f = msg.getPrevOutPoint()) && proto.corepb.OutPoint.toObject(includeInstance, f),
    scriptSig: msg.getScriptSig_asB64(),
    sequence: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.corepb.TxIn}
 */
proto.corepb.TxIn.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.corepb.TxIn;
  return proto.corepb.TxIn.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.corepb.TxIn} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.corepb.TxIn}
 */
proto.corepb.TxIn.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.corepb.OutPoint;
      reader.readMessage(value,proto.corepb.OutPoint.deserializeBinaryFromReader);
      msg.setPrevOutPoint(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setScriptSig(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSequence(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.corepb.TxIn.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.corepb.TxIn.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.corepb.TxIn} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.corepb.TxIn.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPrevOutPoint();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.corepb.OutPoint.serializeBinaryToWriter
    );
  }
  f = message.getScriptSig_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getSequence();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional OutPoint prev_out_point = 1;
 * @return {?proto.corepb.OutPoint}
 */
proto.corepb.TxIn.prototype.getPrevOutPoint = function() {
  return /** @type{?proto.corepb.OutPoint} */ (
    jspb.Message.getWrapperField(this, proto.corepb.OutPoint, 1));
};


/** @param {?proto.corepb.OutPoint|undefined} value */
proto.corepb.TxIn.prototype.setPrevOutPoint = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.corepb.TxIn.prototype.clearPrevOutPoint = function() {
  this.setPrevOutPoint(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.corepb.TxIn.prototype.hasPrevOutPoint = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes script_sig = 2;
 * @return {!(string|Uint8Array)}
 */
proto.corepb.TxIn.prototype.getScriptSig = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes script_sig = 2;
 * This is a type-conversion wrapper around `getScriptSig()`
 * @return {string}
 */
proto.corepb.TxIn.prototype.getScriptSig_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getScriptSig()));
};


/**
 * optional bytes script_sig = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getScriptSig()`
 * @return {!Uint8Array}
 */
proto.corepb.TxIn.prototype.getScriptSig_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getScriptSig()));
};


/** @param {!(string|Uint8Array)} value */
proto.corepb.TxIn.prototype.setScriptSig = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional uint32 sequence = 3;
 * @return {number}
 */
proto.corepb.TxIn.prototype.getSequence = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.corepb.TxIn.prototype.setSequence = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.corepb.TxOut.prototype.toObject = function(opt_includeInstance) {
  return proto.corepb.TxOut.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.corepb.TxOut} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.corepb.TxOut.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: jspb.Message.getFieldWithDefault(msg, 1, 0),
    scriptPubKey: msg.getScriptPubKey_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.corepb.TxOut}
 */
proto.corepb.TxOut.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.corepb.TxOut;
  return proto.corepb.TxOut.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.corepb.TxOut} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.corepb.TxOut}
 */
proto.corepb.TxOut.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setValue(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setScriptPubKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.corepb.TxOut.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.corepb.TxOut.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.corepb.TxOut} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.corepb.TxOut.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getScriptPubKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional uint64 value = 1;
 * @return {number}
 */
proto.corepb.TxOut.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.corepb.TxOut.prototype.setValue = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bytes script_pub_key = 2;
 * @return {!(string|Uint8Array)}
 */
proto.corepb.TxOut.prototype.getScriptPubKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes script_pub_key = 2;
 * This is a type-conversion wrapper around `getScriptPubKey()`
 * @return {string}
 */
proto.corepb.TxOut.prototype.getScriptPubKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getScriptPubKey()));
};


/**
 * optional bytes script_pub_key = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getScriptPubKey()`
 * @return {!Uint8Array}
 */
proto.corepb.TxOut.prototype.getScriptPubKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getScriptPubKey()));
};


/** @param {!(string|Uint8Array)} value */
proto.corepb.TxOut.prototype.setScriptPubKey = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.corepb.OutPoint.prototype.toObject = function(opt_includeInstance) {
  return proto.corepb.OutPoint.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.corepb.OutPoint} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.corepb.OutPoint.toObject = function(includeInstance, msg) {
  var f, obj = {
    hash: msg.getHash_asB64(),
    index: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.corepb.OutPoint}
 */
proto.corepb.OutPoint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.corepb.OutPoint;
  return proto.corepb.OutPoint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.corepb.OutPoint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.corepb.OutPoint}
 */
proto.corepb.OutPoint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setHash(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setIndex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.corepb.OutPoint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.corepb.OutPoint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.corepb.OutPoint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.corepb.OutPoint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getIndex();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional bytes hash = 1;
 * @return {!(string|Uint8Array)}
 */
proto.corepb.OutPoint.prototype.getHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes hash = 1;
 * This is a type-conversion wrapper around `getHash()`
 * @return {string}
 */
proto.corepb.OutPoint.prototype.getHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getHash()));
};


/**
 * optional bytes hash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHash()`
 * @return {!Uint8Array}
 */
proto.corepb.OutPoint.prototype.getHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getHash()));
};


/** @param {!(string|Uint8Array)} value */
proto.corepb.OutPoint.prototype.setHash = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional uint32 index = 2;
 * @return {number}
 */
proto.corepb.OutPoint.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.corepb.OutPoint.prototype.setIndex = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.corepb.Data.prototype.toObject = function(opt_includeInstance) {
  return proto.corepb.Data.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.corepb.Data} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.corepb.Data.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    content: msg.getContent_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.corepb.Data}
 */
proto.corepb.Data.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.corepb.Data;
  return proto.corepb.Data.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.corepb.Data} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.corepb.Data}
 */
proto.corepb.Data.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setContent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.corepb.Data.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.corepb.Data.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.corepb.Data} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.corepb.Data.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getContent_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional int32 type = 1;
 * @return {number}
 */
proto.corepb.Data.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.corepb.Data.prototype.setType = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bytes content = 2;
 * @return {!(string|Uint8Array)}
 */
proto.corepb.Data.prototype.getContent = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes content = 2;
 * This is a type-conversion wrapper around `getContent()`
 * @return {string}
 */
proto.corepb.Data.prototype.getContent_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getContent()));
};


/**
 * optional bytes content = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContent()`
 * @return {!Uint8Array}
 */
proto.corepb.Data.prototype.getContent_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getContent()));
};


/** @param {!(string|Uint8Array)} value */
proto.corepb.Data.prototype.setContent = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.corepb.UtxoWrap.prototype.toObject = function(opt_includeInstance) {
  return proto.corepb.UtxoWrap.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.corepb.UtxoWrap} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.corepb.UtxoWrap.toObject = function(includeInstance, msg) {
  var f, obj = {
    output: (f = msg.getOutput()) && proto.corepb.TxOut.toObject(includeInstance, f),
    blockHeight: jspb.Message.getFieldWithDefault(msg, 2, 0),
    isSpent: jspb.Message.getFieldWithDefault(msg, 3, false),
    isCoinbase: jspb.Message.getFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.corepb.UtxoWrap}
 */
proto.corepb.UtxoWrap.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.corepb.UtxoWrap;
  return proto.corepb.UtxoWrap.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.corepb.UtxoWrap} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.corepb.UtxoWrap}
 */
proto.corepb.UtxoWrap.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.corepb.TxOut;
      reader.readMessage(value,proto.corepb.TxOut.deserializeBinaryFromReader);
      msg.setOutput(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBlockHeight(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsSpent(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsCoinbase(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.corepb.UtxoWrap.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.corepb.UtxoWrap.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.corepb.UtxoWrap} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.corepb.UtxoWrap.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOutput();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.corepb.TxOut.serializeBinaryToWriter
    );
  }
  f = message.getBlockHeight();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getIsSpent();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getIsCoinbase();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional TxOut output = 1;
 * @return {?proto.corepb.TxOut}
 */
proto.corepb.UtxoWrap.prototype.getOutput = function() {
  return /** @type{?proto.corepb.TxOut} */ (
    jspb.Message.getWrapperField(this, proto.corepb.TxOut, 1));
};


/** @param {?proto.corepb.TxOut|undefined} value */
proto.corepb.UtxoWrap.prototype.setOutput = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.corepb.UtxoWrap.prototype.clearOutput = function() {
  this.setOutput(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.corepb.UtxoWrap.prototype.hasOutput = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 block_height = 2;
 * @return {number}
 */
proto.corepb.UtxoWrap.prototype.getBlockHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.corepb.UtxoWrap.prototype.setBlockHeight = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bool is_spent = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.corepb.UtxoWrap.prototype.getIsSpent = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.corepb.UtxoWrap.prototype.setIsSpent = function(value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional bool is_coinbase = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.corepb.UtxoWrap.prototype.getIsCoinbase = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.corepb.UtxoWrap.prototype.setIsCoinbase = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};


goog.object.extend(exports, proto.corepb);
