"use strict"; /**
               * @fileoverview
               * @enhanceable
               * @suppress {messageConventions} JS Compiler reports an error if a variable or
               *     field starts with 'MSG_' and isn't a translatable message.
               * @public
               */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var block_pb = require('./block_pb.js');
goog.object.extend(proto, block_pb);
var common_pb = require('./common_pb.js');
goog.object.extend(proto, common_pb);
goog.exportSymbol('proto.rpcpb.AddNodeRequest', null, global);
goog.exportSymbol('proto.rpcpb.DebugLevelRequest', null, global);
goog.exportSymbol('proto.rpcpb.Delegate', null, global);
goog.exportSymbol('proto.rpcpb.DelegatesReq', null, global);
goog.exportSymbol('proto.rpcpb.DelegatesReq.Type', null, global);
goog.exportSymbol('proto.rpcpb.DelegatesResp', null, global);
goog.exportSymbol('proto.rpcpb.GetBlockHashRequest', null, global);
goog.exportSymbol('proto.rpcpb.GetBlockHashResponse', null, global);
goog.exportSymbol('proto.rpcpb.GetBlockHeaderResponse', null, global);
goog.exportSymbol('proto.rpcpb.GetBlockRequest', null, global);
goog.exportSymbol('proto.rpcpb.GetCurrentBlockHashRequest', null, global);
goog.exportSymbol('proto.rpcpb.GetCurrentBlockHashResponse', null, global);
goog.exportSymbol('proto.rpcpb.GetCurrentBlockHeightRequest', null, global);
goog.exportSymbol('proto.rpcpb.GetCurrentBlockHeightResponse', null, global);
goog.exportSymbol('proto.rpcpb.GetNetworkIDRequest', null, global);
goog.exportSymbol('proto.rpcpb.GetNetworkIDResponse', null, global);
goog.exportSymbol('proto.rpcpb.GetNodeInfoRequest', null, global);
goog.exportSymbol('proto.rpcpb.GetNodeInfoResponse', null, global);
goog.exportSymbol('proto.rpcpb.GetTxCountReq', null, global);
goog.exportSymbol('proto.rpcpb.GetTxCountResp', null, global);
goog.exportSymbol('proto.rpcpb.LatestConfirmedBlockReq', null, global);
goog.exportSymbol('proto.rpcpb.LatestConfirmedBlockResp', null, global);
goog.exportSymbol('proto.rpcpb.MinerDetail', null, global);
goog.exportSymbol('proto.rpcpb.MinersReq', null, global);
goog.exportSymbol('proto.rpcpb.MinersResp', null, global);
goog.exportSymbol('proto.rpcpb.Node', null, global);
goog.exportSymbol('proto.rpcpb.PeerIDReq', null, global);
goog.exportSymbol('proto.rpcpb.PeerIDResp', null, global);
goog.exportSymbol('proto.rpcpb.UpdateNetworkIDRequest', null, global);
/**
                                                                        * Generated by JsPbCodeGenerator.
                                                                        * @param {Array=} opt_data Optional initial data array, typically from a
                                                                        * server response, or constructed directly in Javascript. The array is used
                                                                        * in place and becomes part of the constructed object. It is not cloned.
                                                                        * If no data is provided, the constructed object will be empty, but still
                                                                        * valid.
                                                                        * @extends {jspb.Message}
                                                                        * @constructor
                                                                        */
proto.rpcpb.DebugLevelRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpcpb.DebugLevelRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
                               * @public
                               * @override
                               */
  proto.rpcpb.DebugLevelRequest.displayName = 'proto.rpcpb.DebugLevelRequest';
}
/**
   * Generated by JsPbCodeGenerator.
   * @param {Array=} opt_data Optional initial data array, typically from a
   * server response, or constructed directly in Javascript. The array is used
   * in place and becomes part of the constructed object. It is not cloned.
   * If no data is provided, the constructed object will be empty, but still
   * valid.
   * @extends {jspb.Message}
   * @constructor
   */
proto.rpcpb.UpdateNetworkIDRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpcpb.UpdateNetworkIDRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
                               * @public
                               * @override
                               */
  proto.rpcpb.UpdateNetworkIDRequest.displayName = 'proto.rpcpb.UpdateNetworkIDRequest';
}
/**
   * Generated by JsPbCodeGenerator.
   * @param {Array=} opt_data Optional initial data array, typically from a
   * server response, or constructed directly in Javascript. The array is used
   * in place and becomes part of the constructed object. It is not cloned.
   * If no data is provided, the constructed object will be empty, but still
   * valid.
   * @extends {jspb.Message}
   * @constructor
   */
proto.rpcpb.GetNetworkIDRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpcpb.GetNetworkIDRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
                               * @public
                               * @override
                               */
  proto.rpcpb.GetNetworkIDRequest.displayName = 'proto.rpcpb.GetNetworkIDRequest';
}
/**
   * Generated by JsPbCodeGenerator.
   * @param {Array=} opt_data Optional initial data array, typically from a
   * server response, or constructed directly in Javascript. The array is used
   * in place and becomes part of the constructed object. It is not cloned.
   * If no data is provided, the constructed object will be empty, but still
   * valid.
   * @extends {jspb.Message}
   * @constructor
   */
proto.rpcpb.GetNetworkIDResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpcpb.GetNetworkIDResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
                               * @public
                               * @override
                               */
  proto.rpcpb.GetNetworkIDResponse.displayName = 'proto.rpcpb.GetNetworkIDResponse';
}
/**
   * Generated by JsPbCodeGenerator.
   * @param {Array=} opt_data Optional initial data array, typically from a
   * server response, or constructed directly in Javascript. The array is used
   * in place and becomes part of the constructed object. It is not cloned.
   * If no data is provided, the constructed object will be empty, but still
   * valid.
   * @extends {jspb.Message}
   * @constructor
   */
proto.rpcpb.AddNodeRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpcpb.AddNodeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
                               * @public
                               * @override
                               */
  proto.rpcpb.AddNodeRequest.displayName = 'proto.rpcpb.AddNodeRequest';
}
/**
   * Generated by JsPbCodeGenerator.
   * @param {Array=} opt_data Optional initial data array, typically from a
   * server response, or constructed directly in Javascript. The array is used
   * in place and becomes part of the constructed object. It is not cloned.
   * If no data is provided, the constructed object will be empty, but still
   * valid.
   * @extends {jspb.Message}
   * @constructor
   */
proto.rpcpb.GetCurrentBlockHeightRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpcpb.GetCurrentBlockHeightRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
                               * @public
                               * @override
                               */
  proto.rpcpb.GetCurrentBlockHeightRequest.displayName = 'proto.rpcpb.GetCurrentBlockHeightRequest';
}
/**
   * Generated by JsPbCodeGenerator.
   * @param {Array=} opt_data Optional initial data array, typically from a
   * server response, or constructed directly in Javascript. The array is used
   * in place and becomes part of the constructed object. It is not cloned.
   * If no data is provided, the constructed object will be empty, but still
   * valid.
   * @extends {jspb.Message}
   * @constructor
   */
proto.rpcpb.GetCurrentBlockHeightResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpcpb.GetCurrentBlockHeightResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
                               * @public
                               * @override
                               */
  proto.rpcpb.GetCurrentBlockHeightResponse.displayName = 'proto.rpcpb.GetCurrentBlockHeightResponse';
}
/**
   * Generated by JsPbCodeGenerator.
   * @param {Array=} opt_data Optional initial data array, typically from a
   * server response, or constructed directly in Javascript. The array is used
   * in place and becomes part of the constructed object. It is not cloned.
   * If no data is provided, the constructed object will be empty, but still
   * valid.
   * @extends {jspb.Message}
   * @constructor
   */
proto.rpcpb.GetCurrentBlockHashRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpcpb.GetCurrentBlockHashRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
                               * @public
                               * @override
                               */
  proto.rpcpb.GetCurrentBlockHashRequest.displayName = 'proto.rpcpb.GetCurrentBlockHashRequest';
}
/**
   * Generated by JsPbCodeGenerator.
   * @param {Array=} opt_data Optional initial data array, typically from a
   * server response, or constructed directly in Javascript. The array is used
   * in place and becomes part of the constructed object. It is not cloned.
   * If no data is provided, the constructed object will be empty, but still
   * valid.
   * @extends {jspb.Message}
   * @constructor
   */
proto.rpcpb.GetCurrentBlockHashResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpcpb.GetCurrentBlockHashResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
                               * @public
                               * @override
                               */
  proto.rpcpb.GetCurrentBlockHashResponse.displayName = 'proto.rpcpb.GetCurrentBlockHashResponse';
}
/**
   * Generated by JsPbCodeGenerator.
   * @param {Array=} opt_data Optional initial data array, typically from a
   * server response, or constructed directly in Javascript. The array is used
   * in place and becomes part of the constructed object. It is not cloned.
   * If no data is provided, the constructed object will be empty, but still
   * valid.
   * @extends {jspb.Message}
   * @constructor
   */
proto.rpcpb.GetBlockHashRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpcpb.GetBlockHashRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
                               * @public
                               * @override
                               */
  proto.rpcpb.GetBlockHashRequest.displayName = 'proto.rpcpb.GetBlockHashRequest';
}
/**
   * Generated by JsPbCodeGenerator.
   * @param {Array=} opt_data Optional initial data array, typically from a
   * server response, or constructed directly in Javascript. The array is used
   * in place and becomes part of the constructed object. It is not cloned.
   * If no data is provided, the constructed object will be empty, but still
   * valid.
   * @extends {jspb.Message}
   * @constructor
   */
proto.rpcpb.GetBlockHashResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpcpb.GetBlockHashResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
                               * @public
                               * @override
                               */
  proto.rpcpb.GetBlockHashResponse.displayName = 'proto.rpcpb.GetBlockHashResponse';
}
/**
   * Generated by JsPbCodeGenerator.
   * @param {Array=} opt_data Optional initial data array, typically from a
   * server response, or constructed directly in Javascript. The array is used
   * in place and becomes part of the constructed object. It is not cloned.
   * If no data is provided, the constructed object will be empty, but still
   * valid.
   * @extends {jspb.Message}
   * @constructor
   */
proto.rpcpb.GetBlockRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpcpb.GetBlockRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
                               * @public
                               * @override
                               */
  proto.rpcpb.GetBlockRequest.displayName = 'proto.rpcpb.GetBlockRequest';
}
/**
   * Generated by JsPbCodeGenerator.
   * @param {Array=} opt_data Optional initial data array, typically from a
   * server response, or constructed directly in Javascript. The array is used
   * in place and becomes part of the constructed object. It is not cloned.
   * If no data is provided, the constructed object will be empty, but still
   * valid.
   * @extends {jspb.Message}
   * @constructor
   */
proto.rpcpb.GetBlockHeaderResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpcpb.GetBlockHeaderResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
                               * @public
                               * @override
                               */
  proto.rpcpb.GetBlockHeaderResponse.displayName = 'proto.rpcpb.GetBlockHeaderResponse';
}
/**
   * Generated by JsPbCodeGenerator.
   * @param {Array=} opt_data Optional initial data array, typically from a
   * server response, or constructed directly in Javascript. The array is used
   * in place and becomes part of the constructed object. It is not cloned.
   * If no data is provided, the constructed object will be empty, but still
   * valid.
   * @extends {jspb.Message}
   * @constructor
   */
proto.rpcpb.Node = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rpcpb.Node.repeatedFields_, null);
};
goog.inherits(proto.rpcpb.Node, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
                               * @public
                               * @override
                               */
  proto.rpcpb.Node.displayName = 'proto.rpcpb.Node';
}
/**
   * Generated by JsPbCodeGenerator.
   * @param {Array=} opt_data Optional initial data array, typically from a
   * server response, or constructed directly in Javascript. The array is used
   * in place and becomes part of the constructed object. It is not cloned.
   * If no data is provided, the constructed object will be empty, but still
   * valid.
   * @extends {jspb.Message}
   * @constructor
   */
proto.rpcpb.GetNodeInfoRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpcpb.GetNodeInfoRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
                               * @public
                               * @override
                               */
  proto.rpcpb.GetNodeInfoRequest.displayName = 'proto.rpcpb.GetNodeInfoRequest';
}
/**
   * Generated by JsPbCodeGenerator.
   * @param {Array=} opt_data Optional initial data array, typically from a
   * server response, or constructed directly in Javascript. The array is used
   * in place and becomes part of the constructed object. It is not cloned.
   * If no data is provided, the constructed object will be empty, but still
   * valid.
   * @extends {jspb.Message}
   * @constructor
   */
proto.rpcpb.GetNodeInfoResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rpcpb.GetNodeInfoResponse.repeatedFields_, null);
};
goog.inherits(proto.rpcpb.GetNodeInfoResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
                               * @public
                               * @override
                               */
  proto.rpcpb.GetNodeInfoResponse.displayName = 'proto.rpcpb.GetNodeInfoResponse';
}
/**
   * Generated by JsPbCodeGenerator.
   * @param {Array=} opt_data Optional initial data array, typically from a
   * server response, or constructed directly in Javascript. The array is used
   * in place and becomes part of the constructed object. It is not cloned.
   * If no data is provided, the constructed object will be empty, but still
   * valid.
   * @extends {jspb.Message}
   * @constructor
   */
proto.rpcpb.GetTxCountReq = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpcpb.GetTxCountReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
                               * @public
                               * @override
                               */
  proto.rpcpb.GetTxCountReq.displayName = 'proto.rpcpb.GetTxCountReq';
}
/**
   * Generated by JsPbCodeGenerator.
   * @param {Array=} opt_data Optional initial data array, typically from a
   * server response, or constructed directly in Javascript. The array is used
   * in place and becomes part of the constructed object. It is not cloned.
   * If no data is provided, the constructed object will be empty, but still
   * valid.
   * @extends {jspb.Message}
   * @constructor
   */
proto.rpcpb.GetTxCountResp = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpcpb.GetTxCountResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
                               * @public
                               * @override
                               */
  proto.rpcpb.GetTxCountResp.displayName = 'proto.rpcpb.GetTxCountResp';
}
/**
   * Generated by JsPbCodeGenerator.
   * @param {Array=} opt_data Optional initial data array, typically from a
   * server response, or constructed directly in Javascript. The array is used
   * in place and becomes part of the constructed object. It is not cloned.
   * If no data is provided, the constructed object will be empty, but still
   * valid.
   * @extends {jspb.Message}
   * @constructor
   */
proto.rpcpb.Delegate = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpcpb.Delegate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
                               * @public
                               * @override
                               */
  proto.rpcpb.Delegate.displayName = 'proto.rpcpb.Delegate';
}
/**
   * Generated by JsPbCodeGenerator.
   * @param {Array=} opt_data Optional initial data array, typically from a
   * server response, or constructed directly in Javascript. The array is used
   * in place and becomes part of the constructed object. It is not cloned.
   * If no data is provided, the constructed object will be empty, but still
   * valid.
   * @extends {jspb.Message}
   * @constructor
   */
proto.rpcpb.PeerIDReq = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpcpb.PeerIDReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
                               * @public
                               * @override
                               */
  proto.rpcpb.PeerIDReq.displayName = 'proto.rpcpb.PeerIDReq';
}
/**
   * Generated by JsPbCodeGenerator.
   * @param {Array=} opt_data Optional initial data array, typically from a
   * server response, or constructed directly in Javascript. The array is used
   * in place and becomes part of the constructed object. It is not cloned.
   * If no data is provided, the constructed object will be empty, but still
   * valid.
   * @extends {jspb.Message}
   * @constructor
   */
proto.rpcpb.PeerIDResp = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpcpb.PeerIDResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
                               * @public
                               * @override
                               */
  proto.rpcpb.PeerIDResp.displayName = 'proto.rpcpb.PeerIDResp';
}
/**
   * Generated by JsPbCodeGenerator.
   * @param {Array=} opt_data Optional initial data array, typically from a
   * server response, or constructed directly in Javascript. The array is used
   * in place and becomes part of the constructed object. It is not cloned.
   * If no data is provided, the constructed object will be empty, but still
   * valid.
   * @extends {jspb.Message}
   * @constructor
   */
proto.rpcpb.MinersReq = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpcpb.MinersReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
                               * @public
                               * @override
                               */
  proto.rpcpb.MinersReq.displayName = 'proto.rpcpb.MinersReq';
}
/**
   * Generated by JsPbCodeGenerator.
   * @param {Array=} opt_data Optional initial data array, typically from a
   * server response, or constructed directly in Javascript. The array is used
   * in place and becomes part of the constructed object. It is not cloned.
   * If no data is provided, the constructed object will be empty, but still
   * valid.
   * @extends {jspb.Message}
   * @constructor
   */
proto.rpcpb.MinersResp = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rpcpb.MinersResp.repeatedFields_, null);
};
goog.inherits(proto.rpcpb.MinersResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
                               * @public
                               * @override
                               */
  proto.rpcpb.MinersResp.displayName = 'proto.rpcpb.MinersResp';
}
/**
   * Generated by JsPbCodeGenerator.
   * @param {Array=} opt_data Optional initial data array, typically from a
   * server response, or constructed directly in Javascript. The array is used
   * in place and becomes part of the constructed object. It is not cloned.
   * If no data is provided, the constructed object will be empty, but still
   * valid.
   * @extends {jspb.Message}
   * @constructor
   */
proto.rpcpb.MinerDetail = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rpcpb.MinerDetail.repeatedFields_, null);
};
goog.inherits(proto.rpcpb.MinerDetail, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
                               * @public
                               * @override
                               */
  proto.rpcpb.MinerDetail.displayName = 'proto.rpcpb.MinerDetail';
}
/**
   * Generated by JsPbCodeGenerator.
   * @param {Array=} opt_data Optional initial data array, typically from a
   * server response, or constructed directly in Javascript. The array is used
   * in place and becomes part of the constructed object. It is not cloned.
   * If no data is provided, the constructed object will be empty, but still
   * valid.
   * @extends {jspb.Message}
   * @constructor
   */
proto.rpcpb.DelegatesReq = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpcpb.DelegatesReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
                               * @public
                               * @override
                               */
  proto.rpcpb.DelegatesReq.displayName = 'proto.rpcpb.DelegatesReq';
}
/**
   * Generated by JsPbCodeGenerator.
   * @param {Array=} opt_data Optional initial data array, typically from a
   * server response, or constructed directly in Javascript. The array is used
   * in place and becomes part of the constructed object. It is not cloned.
   * If no data is provided, the constructed object will be empty, but still
   * valid.
   * @extends {jspb.Message}
   * @constructor
   */
proto.rpcpb.DelegatesResp = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rpcpb.DelegatesResp.repeatedFields_, null);
};
goog.inherits(proto.rpcpb.DelegatesResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
                               * @public
                               * @override
                               */
  proto.rpcpb.DelegatesResp.displayName = 'proto.rpcpb.DelegatesResp';
}
/**
   * Generated by JsPbCodeGenerator.
   * @param {Array=} opt_data Optional initial data array, typically from a
   * server response, or constructed directly in Javascript. The array is used
   * in place and becomes part of the constructed object. It is not cloned.
   * If no data is provided, the constructed object will be empty, but still
   * valid.
   * @extends {jspb.Message}
   * @constructor
   */
proto.rpcpb.LatestConfirmedBlockReq = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpcpb.LatestConfirmedBlockReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
                               * @public
                               * @override
                               */
  proto.rpcpb.LatestConfirmedBlockReq.displayName = 'proto.rpcpb.LatestConfirmedBlockReq';
}
/**
   * Generated by JsPbCodeGenerator.
   * @param {Array=} opt_data Optional initial data array, typically from a
   * server response, or constructed directly in Javascript. The array is used
   * in place and becomes part of the constructed object. It is not cloned.
   * If no data is provided, the constructed object will be empty, but still
   * valid.
   * @extends {jspb.Message}
   * @constructor
   */
proto.rpcpb.LatestConfirmedBlockResp = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpcpb.LatestConfirmedBlockResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
                               * @public
                               * @override
                               */
  proto.rpcpb.LatestConfirmedBlockResp.displayName = 'proto.rpcpb.LatestConfirmedBlockResp';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
                                       * Creates an object representation of this proto suitable for use in Soy templates.
                                       * Field names that are reserved in JavaScript and will be renamed to pb_name.
                                       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
                                       * For the list of reserved names please see:
                                       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
                                       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
                                       *     for transitional soy proto support: http://goto/soy-param-migration
                                       * @return {!Object}
                                       */
  proto.rpcpb.DebugLevelRequest.prototype.toObject = function (opt_includeInstance) {
    return proto.rpcpb.DebugLevelRequest.toObject(opt_includeInstance, this);
  };


  /**
      * Static version of the {@see toObject} method.
      * @param {boolean|undefined} includeInstance Whether to include the JSPB
      *     instance for transitional soy proto support:
      *     http://goto/soy-param-migration
      * @param {!proto.rpcpb.DebugLevelRequest} msg The msg instance to transform.
      * @return {!Object}
      * @suppress {unusedLocalVariables} f is only used for nested messages
      */
  proto.rpcpb.DebugLevelRequest.toObject = function (includeInstance, msg) {
    var f,obj = {
      level: jspb.Message.getFieldWithDefault(msg, 1, "") };


    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}


/**
   * Deserializes binary data (in protobuf wire format).
   * @param {jspb.ByteSource} bytes The bytes to deserialize.
   * @return {!proto.rpcpb.DebugLevelRequest}
   */
proto.rpcpb.DebugLevelRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpcpb.DebugLevelRequest();
  return proto.rpcpb.DebugLevelRequest.deserializeBinaryFromReader(msg, reader);
};


/**
    * Deserializes binary data (in protobuf wire format) from the
    * given reader into the given message object.
    * @param {!proto.rpcpb.DebugLevelRequest} msg The message object to deserialize into.
    * @param {!jspb.BinaryReader} reader The BinaryReader to use.
    * @return {!proto.rpcpb.DebugLevelRequest}
    */
proto.rpcpb.DebugLevelRequest.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */reader.readString();
        msg.setLevel(value);
        break;
      default:
        reader.skipField();
        break;}

  }
  return msg;
};


/**
    * Serializes the message to binary data (in protobuf wire format).
    * @return {!Uint8Array}
    */
proto.rpcpb.DebugLevelRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.rpcpb.DebugLevelRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
    * Serializes the given message to binary data (in protobuf wire
    * format), writing to the given BinaryWriter.
    * @param {!proto.rpcpb.DebugLevelRequest} message
    * @param {!jspb.BinaryWriter} writer
    * @suppress {unusedLocalVariables} f is only used for nested messages
    */
proto.rpcpb.DebugLevelRequest.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getLevel();
  if (f.length > 0) {
    writer.writeString(
    1,
    f);

  }
};


/**
    * optional string level = 1;
    * @return {string}
    */
proto.rpcpb.DebugLevelRequest.prototype.getLevel = function () {
  return (/** @type {string} */jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.rpcpb.DebugLevelRequest.prototype.setLevel = function (value) {
  jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
                                       * Creates an object representation of this proto suitable for use in Soy templates.
                                       * Field names that are reserved in JavaScript and will be renamed to pb_name.
                                       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
                                       * For the list of reserved names please see:
                                       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
                                       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
                                       *     for transitional soy proto support: http://goto/soy-param-migration
                                       * @return {!Object}
                                       */
  proto.rpcpb.UpdateNetworkIDRequest.prototype.toObject = function (opt_includeInstance) {
    return proto.rpcpb.UpdateNetworkIDRequest.toObject(opt_includeInstance, this);
  };


  /**
      * Static version of the {@see toObject} method.
      * @param {boolean|undefined} includeInstance Whether to include the JSPB
      *     instance for transitional soy proto support:
      *     http://goto/soy-param-migration
      * @param {!proto.rpcpb.UpdateNetworkIDRequest} msg The msg instance to transform.
      * @return {!Object}
      * @suppress {unusedLocalVariables} f is only used for nested messages
      */
  proto.rpcpb.UpdateNetworkIDRequest.toObject = function (includeInstance, msg) {
    var f,obj = {
      id: jspb.Message.getFieldWithDefault(msg, 1, 0) };


    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}


/**
   * Deserializes binary data (in protobuf wire format).
   * @param {jspb.ByteSource} bytes The bytes to deserialize.
   * @return {!proto.rpcpb.UpdateNetworkIDRequest}
   */
proto.rpcpb.UpdateNetworkIDRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpcpb.UpdateNetworkIDRequest();
  return proto.rpcpb.UpdateNetworkIDRequest.deserializeBinaryFromReader(msg, reader);
};


/**
    * Deserializes binary data (in protobuf wire format) from the
    * given reader into the given message object.
    * @param {!proto.rpcpb.UpdateNetworkIDRequest} msg The message object to deserialize into.
    * @param {!jspb.BinaryReader} reader The BinaryReader to use.
    * @return {!proto.rpcpb.UpdateNetworkIDRequest}
    */
proto.rpcpb.UpdateNetworkIDRequest.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */reader.readUint32();
        msg.setId(value);
        break;
      default:
        reader.skipField();
        break;}

  }
  return msg;
};


/**
    * Serializes the message to binary data (in protobuf wire format).
    * @return {!Uint8Array}
    */
proto.rpcpb.UpdateNetworkIDRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.rpcpb.UpdateNetworkIDRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
    * Serializes the given message to binary data (in protobuf wire
    * format), writing to the given BinaryWriter.
    * @param {!proto.rpcpb.UpdateNetworkIDRequest} message
    * @param {!jspb.BinaryWriter} writer
    * @suppress {unusedLocalVariables} f is only used for nested messages
    */
proto.rpcpb.UpdateNetworkIDRequest.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint32(
    1,
    f);

  }
};


/**
    * optional uint32 id = 1;
    * @return {number}
    */
proto.rpcpb.UpdateNetworkIDRequest.prototype.getId = function () {
  return (/** @type {number} */jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.rpcpb.UpdateNetworkIDRequest.prototype.setId = function (value) {
  jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
                                       * Creates an object representation of this proto suitable for use in Soy templates.
                                       * Field names that are reserved in JavaScript and will be renamed to pb_name.
                                       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
                                       * For the list of reserved names please see:
                                       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
                                       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
                                       *     for transitional soy proto support: http://goto/soy-param-migration
                                       * @return {!Object}
                                       */
  proto.rpcpb.GetNetworkIDRequest.prototype.toObject = function (opt_includeInstance) {
    return proto.rpcpb.GetNetworkIDRequest.toObject(opt_includeInstance, this);
  };


  /**
      * Static version of the {@see toObject} method.
      * @param {boolean|undefined} includeInstance Whether to include the JSPB
      *     instance for transitional soy proto support:
      *     http://goto/soy-param-migration
      * @param {!proto.rpcpb.GetNetworkIDRequest} msg The msg instance to transform.
      * @return {!Object}
      * @suppress {unusedLocalVariables} f is only used for nested messages
      */
  proto.rpcpb.GetNetworkIDRequest.toObject = function (includeInstance, msg) {
    var f,obj = {};



    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}


/**
   * Deserializes binary data (in protobuf wire format).
   * @param {jspb.ByteSource} bytes The bytes to deserialize.
   * @return {!proto.rpcpb.GetNetworkIDRequest}
   */
proto.rpcpb.GetNetworkIDRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpcpb.GetNetworkIDRequest();
  return proto.rpcpb.GetNetworkIDRequest.deserializeBinaryFromReader(msg, reader);
};


/**
    * Deserializes binary data (in protobuf wire format) from the
    * given reader into the given message object.
    * @param {!proto.rpcpb.GetNetworkIDRequest} msg The message object to deserialize into.
    * @param {!jspb.BinaryReader} reader The BinaryReader to use.
    * @return {!proto.rpcpb.GetNetworkIDRequest}
    */
proto.rpcpb.GetNetworkIDRequest.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      default:
        reader.skipField();
        break;}

  }
  return msg;
};


/**
    * Serializes the message to binary data (in protobuf wire format).
    * @return {!Uint8Array}
    */
proto.rpcpb.GetNetworkIDRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.rpcpb.GetNetworkIDRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
    * Serializes the given message to binary data (in protobuf wire
    * format), writing to the given BinaryWriter.
    * @param {!proto.rpcpb.GetNetworkIDRequest} message
    * @param {!jspb.BinaryWriter} writer
    * @suppress {unusedLocalVariables} f is only used for nested messages
    */
proto.rpcpb.GetNetworkIDRequest.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
                                       * Creates an object representation of this proto suitable for use in Soy templates.
                                       * Field names that are reserved in JavaScript and will be renamed to pb_name.
                                       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
                                       * For the list of reserved names please see:
                                       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
                                       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
                                       *     for transitional soy proto support: http://goto/soy-param-migration
                                       * @return {!Object}
                                       */
  proto.rpcpb.GetNetworkIDResponse.prototype.toObject = function (opt_includeInstance) {
    return proto.rpcpb.GetNetworkIDResponse.toObject(opt_includeInstance, this);
  };


  /**
      * Static version of the {@see toObject} method.
      * @param {boolean|undefined} includeInstance Whether to include the JSPB
      *     instance for transitional soy proto support:
      *     http://goto/soy-param-migration
      * @param {!proto.rpcpb.GetNetworkIDResponse} msg The msg instance to transform.
      * @return {!Object}
      * @suppress {unusedLocalVariables} f is only used for nested messages
      */
  proto.rpcpb.GetNetworkIDResponse.toObject = function (includeInstance, msg) {
    var f,obj = {
      code: jspb.Message.getFieldWithDefault(msg, 1, 0),
      message: jspb.Message.getFieldWithDefault(msg, 2, ""),
      id: jspb.Message.getFieldWithDefault(msg, 3, 0),
      literal: jspb.Message.getFieldWithDefault(msg, 4, "") };


    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}


/**
   * Deserializes binary data (in protobuf wire format).
   * @param {jspb.ByteSource} bytes The bytes to deserialize.
   * @return {!proto.rpcpb.GetNetworkIDResponse}
   */
proto.rpcpb.GetNetworkIDResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpcpb.GetNetworkIDResponse();
  return proto.rpcpb.GetNetworkIDResponse.deserializeBinaryFromReader(msg, reader);
};


/**
    * Deserializes binary data (in protobuf wire format) from the
    * given reader into the given message object.
    * @param {!proto.rpcpb.GetNetworkIDResponse} msg The message object to deserialize into.
    * @param {!jspb.BinaryReader} reader The BinaryReader to use.
    * @return {!proto.rpcpb.GetNetworkIDResponse}
    */
proto.rpcpb.GetNetworkIDResponse.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */reader.readInt32();
        msg.setCode(value);
        break;
      case 2:
        var value = /** @type {string} */reader.readString();
        msg.setMessage(value);
        break;
      case 3:
        var value = /** @type {number} */reader.readUint32();
        msg.setId(value);
        break;
      case 4:
        var value = /** @type {string} */reader.readString();
        msg.setLiteral(value);
        break;
      default:
        reader.skipField();
        break;}

  }
  return msg;
};


/**
    * Serializes the message to binary data (in protobuf wire format).
    * @return {!Uint8Array}
    */
proto.rpcpb.GetNetworkIDResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.rpcpb.GetNetworkIDResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
    * Serializes the given message to binary data (in protobuf wire
    * format), writing to the given BinaryWriter.
    * @param {!proto.rpcpb.GetNetworkIDResponse} message
    * @param {!jspb.BinaryWriter} writer
    * @suppress {unusedLocalVariables} f is only used for nested messages
    */
proto.rpcpb.GetNetworkIDResponse.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0) {
    writer.writeInt32(
    1,
    f);

  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
    2,
    f);

  }
  f = message.getId();
  if (f !== 0) {
    writer.writeUint32(
    3,
    f);

  }
  f = message.getLiteral();
  if (f.length > 0) {
    writer.writeString(
    4,
    f);

  }
};


/**
    * optional int32 code = 1;
    * @return {number}
    */
proto.rpcpb.GetNetworkIDResponse.prototype.getCode = function () {
  return (/** @type {number} */jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.rpcpb.GetNetworkIDResponse.prototype.setCode = function (value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
    * optional string message = 2;
    * @return {string}
    */
proto.rpcpb.GetNetworkIDResponse.prototype.getMessage = function () {
  return (/** @type {string} */jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.rpcpb.GetNetworkIDResponse.prototype.setMessage = function (value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
    * optional uint32 id = 3;
    * @return {number}
    */
proto.rpcpb.GetNetworkIDResponse.prototype.getId = function () {
  return (/** @type {number} */jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.rpcpb.GetNetworkIDResponse.prototype.setId = function (value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
    * optional string literal = 4;
    * @return {string}
    */
proto.rpcpb.GetNetworkIDResponse.prototype.getLiteral = function () {
  return (/** @type {string} */jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.rpcpb.GetNetworkIDResponse.prototype.setLiteral = function (value) {
  jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
                                       * Creates an object representation of this proto suitable for use in Soy templates.
                                       * Field names that are reserved in JavaScript and will be renamed to pb_name.
                                       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
                                       * For the list of reserved names please see:
                                       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
                                       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
                                       *     for transitional soy proto support: http://goto/soy-param-migration
                                       * @return {!Object}
                                       */
  proto.rpcpb.AddNodeRequest.prototype.toObject = function (opt_includeInstance) {
    return proto.rpcpb.AddNodeRequest.toObject(opt_includeInstance, this);
  };


  /**
      * Static version of the {@see toObject} method.
      * @param {boolean|undefined} includeInstance Whether to include the JSPB
      *     instance for transitional soy proto support:
      *     http://goto/soy-param-migration
      * @param {!proto.rpcpb.AddNodeRequest} msg The msg instance to transform.
      * @return {!Object}
      * @suppress {unusedLocalVariables} f is only used for nested messages
      */
  proto.rpcpb.AddNodeRequest.toObject = function (includeInstance, msg) {
    var f,obj = {
      node: jspb.Message.getFieldWithDefault(msg, 1, "") };


    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}


/**
   * Deserializes binary data (in protobuf wire format).
   * @param {jspb.ByteSource} bytes The bytes to deserialize.
   * @return {!proto.rpcpb.AddNodeRequest}
   */
proto.rpcpb.AddNodeRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpcpb.AddNodeRequest();
  return proto.rpcpb.AddNodeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
    * Deserializes binary data (in protobuf wire format) from the
    * given reader into the given message object.
    * @param {!proto.rpcpb.AddNodeRequest} msg The message object to deserialize into.
    * @param {!jspb.BinaryReader} reader The BinaryReader to use.
    * @return {!proto.rpcpb.AddNodeRequest}
    */
proto.rpcpb.AddNodeRequest.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */reader.readString();
        msg.setNode(value);
        break;
      default:
        reader.skipField();
        break;}

  }
  return msg;
};


/**
    * Serializes the message to binary data (in protobuf wire format).
    * @return {!Uint8Array}
    */
proto.rpcpb.AddNodeRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.rpcpb.AddNodeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
    * Serializes the given message to binary data (in protobuf wire
    * format), writing to the given BinaryWriter.
    * @param {!proto.rpcpb.AddNodeRequest} message
    * @param {!jspb.BinaryWriter} writer
    * @suppress {unusedLocalVariables} f is only used for nested messages
    */
proto.rpcpb.AddNodeRequest.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getNode();
  if (f.length > 0) {
    writer.writeString(
    1,
    f);

  }
};


/**
    * optional string node = 1;
    * @return {string}
    */
proto.rpcpb.AddNodeRequest.prototype.getNode = function () {
  return (/** @type {string} */jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.rpcpb.AddNodeRequest.prototype.setNode = function (value) {
  jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
                                       * Creates an object representation of this proto suitable for use in Soy templates.
                                       * Field names that are reserved in JavaScript and will be renamed to pb_name.
                                       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
                                       * For the list of reserved names please see:
                                       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
                                       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
                                       *     for transitional soy proto support: http://goto/soy-param-migration
                                       * @return {!Object}
                                       */
  proto.rpcpb.GetCurrentBlockHeightRequest.prototype.toObject = function (opt_includeInstance) {
    return proto.rpcpb.GetCurrentBlockHeightRequest.toObject(opt_includeInstance, this);
  };


  /**
      * Static version of the {@see toObject} method.
      * @param {boolean|undefined} includeInstance Whether to include the JSPB
      *     instance for transitional soy proto support:
      *     http://goto/soy-param-migration
      * @param {!proto.rpcpb.GetCurrentBlockHeightRequest} msg The msg instance to transform.
      * @return {!Object}
      * @suppress {unusedLocalVariables} f is only used for nested messages
      */
  proto.rpcpb.GetCurrentBlockHeightRequest.toObject = function (includeInstance, msg) {
    var f,obj = {};



    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}


/**
   * Deserializes binary data (in protobuf wire format).
   * @param {jspb.ByteSource} bytes The bytes to deserialize.
   * @return {!proto.rpcpb.GetCurrentBlockHeightRequest}
   */
proto.rpcpb.GetCurrentBlockHeightRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpcpb.GetCurrentBlockHeightRequest();
  return proto.rpcpb.GetCurrentBlockHeightRequest.deserializeBinaryFromReader(msg, reader);
};


/**
    * Deserializes binary data (in protobuf wire format) from the
    * given reader into the given message object.
    * @param {!proto.rpcpb.GetCurrentBlockHeightRequest} msg The message object to deserialize into.
    * @param {!jspb.BinaryReader} reader The BinaryReader to use.
    * @return {!proto.rpcpb.GetCurrentBlockHeightRequest}
    */
proto.rpcpb.GetCurrentBlockHeightRequest.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      default:
        reader.skipField();
        break;}

  }
  return msg;
};


/**
    * Serializes the message to binary data (in protobuf wire format).
    * @return {!Uint8Array}
    */
proto.rpcpb.GetCurrentBlockHeightRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.rpcpb.GetCurrentBlockHeightRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
    * Serializes the given message to binary data (in protobuf wire
    * format), writing to the given BinaryWriter.
    * @param {!proto.rpcpb.GetCurrentBlockHeightRequest} message
    * @param {!jspb.BinaryWriter} writer
    * @suppress {unusedLocalVariables} f is only used for nested messages
    */
proto.rpcpb.GetCurrentBlockHeightRequest.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
                                       * Creates an object representation of this proto suitable for use in Soy templates.
                                       * Field names that are reserved in JavaScript and will be renamed to pb_name.
                                       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
                                       * For the list of reserved names please see:
                                       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
                                       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
                                       *     for transitional soy proto support: http://goto/soy-param-migration
                                       * @return {!Object}
                                       */
  proto.rpcpb.GetCurrentBlockHeightResponse.prototype.toObject = function (opt_includeInstance) {
    return proto.rpcpb.GetCurrentBlockHeightResponse.toObject(opt_includeInstance, this);
  };


  /**
      * Static version of the {@see toObject} method.
      * @param {boolean|undefined} includeInstance Whether to include the JSPB
      *     instance for transitional soy proto support:
      *     http://goto/soy-param-migration
      * @param {!proto.rpcpb.GetCurrentBlockHeightResponse} msg The msg instance to transform.
      * @return {!Object}
      * @suppress {unusedLocalVariables} f is only used for nested messages
      */
  proto.rpcpb.GetCurrentBlockHeightResponse.toObject = function (includeInstance, msg) {
    var f,obj = {
      code: jspb.Message.getFieldWithDefault(msg, 1, 0),
      message: jspb.Message.getFieldWithDefault(msg, 2, ""),
      height: jspb.Message.getFieldWithDefault(msg, 3, 0) };


    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}


/**
   * Deserializes binary data (in protobuf wire format).
   * @param {jspb.ByteSource} bytes The bytes to deserialize.
   * @return {!proto.rpcpb.GetCurrentBlockHeightResponse}
   */
proto.rpcpb.GetCurrentBlockHeightResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpcpb.GetCurrentBlockHeightResponse();
  return proto.rpcpb.GetCurrentBlockHeightResponse.deserializeBinaryFromReader(msg, reader);
};


/**
    * Deserializes binary data (in protobuf wire format) from the
    * given reader into the given message object.
    * @param {!proto.rpcpb.GetCurrentBlockHeightResponse} msg The message object to deserialize into.
    * @param {!jspb.BinaryReader} reader The BinaryReader to use.
    * @return {!proto.rpcpb.GetCurrentBlockHeightResponse}
    */
proto.rpcpb.GetCurrentBlockHeightResponse.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */reader.readInt32();
        msg.setCode(value);
        break;
      case 2:
        var value = /** @type {string} */reader.readString();
        msg.setMessage(value);
        break;
      case 3:
        var value = /** @type {number} */reader.readUint32();
        msg.setHeight(value);
        break;
      default:
        reader.skipField();
        break;}

  }
  return msg;
};


/**
    * Serializes the message to binary data (in protobuf wire format).
    * @return {!Uint8Array}
    */
proto.rpcpb.GetCurrentBlockHeightResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.rpcpb.GetCurrentBlockHeightResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
    * Serializes the given message to binary data (in protobuf wire
    * format), writing to the given BinaryWriter.
    * @param {!proto.rpcpb.GetCurrentBlockHeightResponse} message
    * @param {!jspb.BinaryWriter} writer
    * @suppress {unusedLocalVariables} f is only used for nested messages
    */
proto.rpcpb.GetCurrentBlockHeightResponse.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0) {
    writer.writeInt32(
    1,
    f);

  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
    2,
    f);

  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeUint32(
    3,
    f);

  }
};


/**
    * optional int32 code = 1;
    * @return {number}
    */
proto.rpcpb.GetCurrentBlockHeightResponse.prototype.getCode = function () {
  return (/** @type {number} */jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.rpcpb.GetCurrentBlockHeightResponse.prototype.setCode = function (value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
    * optional string message = 2;
    * @return {string}
    */
proto.rpcpb.GetCurrentBlockHeightResponse.prototype.getMessage = function () {
  return (/** @type {string} */jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.rpcpb.GetCurrentBlockHeightResponse.prototype.setMessage = function (value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
    * optional uint32 height = 3;
    * @return {number}
    */
proto.rpcpb.GetCurrentBlockHeightResponse.prototype.getHeight = function () {
  return (/** @type {number} */jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.rpcpb.GetCurrentBlockHeightResponse.prototype.setHeight = function (value) {
  jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
                                       * Creates an object representation of this proto suitable for use in Soy templates.
                                       * Field names that are reserved in JavaScript and will be renamed to pb_name.
                                       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
                                       * For the list of reserved names please see:
                                       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
                                       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
                                       *     for transitional soy proto support: http://goto/soy-param-migration
                                       * @return {!Object}
                                       */
  proto.rpcpb.GetCurrentBlockHashRequest.prototype.toObject = function (opt_includeInstance) {
    return proto.rpcpb.GetCurrentBlockHashRequest.toObject(opt_includeInstance, this);
  };


  /**
      * Static version of the {@see toObject} method.
      * @param {boolean|undefined} includeInstance Whether to include the JSPB
      *     instance for transitional soy proto support:
      *     http://goto/soy-param-migration
      * @param {!proto.rpcpb.GetCurrentBlockHashRequest} msg The msg instance to transform.
      * @return {!Object}
      * @suppress {unusedLocalVariables} f is only used for nested messages
      */
  proto.rpcpb.GetCurrentBlockHashRequest.toObject = function (includeInstance, msg) {
    var f,obj = {};



    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}


/**
   * Deserializes binary data (in protobuf wire format).
   * @param {jspb.ByteSource} bytes The bytes to deserialize.
   * @return {!proto.rpcpb.GetCurrentBlockHashRequest}
   */
proto.rpcpb.GetCurrentBlockHashRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpcpb.GetCurrentBlockHashRequest();
  return proto.rpcpb.GetCurrentBlockHashRequest.deserializeBinaryFromReader(msg, reader);
};


/**
    * Deserializes binary data (in protobuf wire format) from the
    * given reader into the given message object.
    * @param {!proto.rpcpb.GetCurrentBlockHashRequest} msg The message object to deserialize into.
    * @param {!jspb.BinaryReader} reader The BinaryReader to use.
    * @return {!proto.rpcpb.GetCurrentBlockHashRequest}
    */
proto.rpcpb.GetCurrentBlockHashRequest.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      default:
        reader.skipField();
        break;}

  }
  return msg;
};


/**
    * Serializes the message to binary data (in protobuf wire format).
    * @return {!Uint8Array}
    */
proto.rpcpb.GetCurrentBlockHashRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.rpcpb.GetCurrentBlockHashRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
    * Serializes the given message to binary data (in protobuf wire
    * format), writing to the given BinaryWriter.
    * @param {!proto.rpcpb.GetCurrentBlockHashRequest} message
    * @param {!jspb.BinaryWriter} writer
    * @suppress {unusedLocalVariables} f is only used for nested messages
    */
proto.rpcpb.GetCurrentBlockHashRequest.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
                                       * Creates an object representation of this proto suitable for use in Soy templates.
                                       * Field names that are reserved in JavaScript and will be renamed to pb_name.
                                       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
                                       * For the list of reserved names please see:
                                       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
                                       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
                                       *     for transitional soy proto support: http://goto/soy-param-migration
                                       * @return {!Object}
                                       */
  proto.rpcpb.GetCurrentBlockHashResponse.prototype.toObject = function (opt_includeInstance) {
    return proto.rpcpb.GetCurrentBlockHashResponse.toObject(opt_includeInstance, this);
  };


  /**
      * Static version of the {@see toObject} method.
      * @param {boolean|undefined} includeInstance Whether to include the JSPB
      *     instance for transitional soy proto support:
      *     http://goto/soy-param-migration
      * @param {!proto.rpcpb.GetCurrentBlockHashResponse} msg The msg instance to transform.
      * @return {!Object}
      * @suppress {unusedLocalVariables} f is only used for nested messages
      */
  proto.rpcpb.GetCurrentBlockHashResponse.toObject = function (includeInstance, msg) {
    var f,obj = {
      code: jspb.Message.getFieldWithDefault(msg, 1, 0),
      message: jspb.Message.getFieldWithDefault(msg, 2, ""),
      hash: jspb.Message.getFieldWithDefault(msg, 3, "") };


    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}


/**
   * Deserializes binary data (in protobuf wire format).
   * @param {jspb.ByteSource} bytes The bytes to deserialize.
   * @return {!proto.rpcpb.GetCurrentBlockHashResponse}
   */
proto.rpcpb.GetCurrentBlockHashResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpcpb.GetCurrentBlockHashResponse();
  return proto.rpcpb.GetCurrentBlockHashResponse.deserializeBinaryFromReader(msg, reader);
};


/**
    * Deserializes binary data (in protobuf wire format) from the
    * given reader into the given message object.
    * @param {!proto.rpcpb.GetCurrentBlockHashResponse} msg The message object to deserialize into.
    * @param {!jspb.BinaryReader} reader The BinaryReader to use.
    * @return {!proto.rpcpb.GetCurrentBlockHashResponse}
    */
proto.rpcpb.GetCurrentBlockHashResponse.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */reader.readInt32();
        msg.setCode(value);
        break;
      case 2:
        var value = /** @type {string} */reader.readString();
        msg.setMessage(value);
        break;
      case 3:
        var value = /** @type {string} */reader.readString();
        msg.setHash(value);
        break;
      default:
        reader.skipField();
        break;}

  }
  return msg;
};


/**
    * Serializes the message to binary data (in protobuf wire format).
    * @return {!Uint8Array}
    */
proto.rpcpb.GetCurrentBlockHashResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.rpcpb.GetCurrentBlockHashResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
    * Serializes the given message to binary data (in protobuf wire
    * format), writing to the given BinaryWriter.
    * @param {!proto.rpcpb.GetCurrentBlockHashResponse} message
    * @param {!jspb.BinaryWriter} writer
    * @suppress {unusedLocalVariables} f is only used for nested messages
    */
proto.rpcpb.GetCurrentBlockHashResponse.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0) {
    writer.writeInt32(
    1,
    f);

  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
    2,
    f);

  }
  f = message.getHash();
  if (f.length > 0) {
    writer.writeString(
    3,
    f);

  }
};


/**
    * optional int32 code = 1;
    * @return {number}
    */
proto.rpcpb.GetCurrentBlockHashResponse.prototype.getCode = function () {
  return (/** @type {number} */jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.rpcpb.GetCurrentBlockHashResponse.prototype.setCode = function (value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
    * optional string message = 2;
    * @return {string}
    */
proto.rpcpb.GetCurrentBlockHashResponse.prototype.getMessage = function () {
  return (/** @type {string} */jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.rpcpb.GetCurrentBlockHashResponse.prototype.setMessage = function (value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
    * optional string hash = 3;
    * @return {string}
    */
proto.rpcpb.GetCurrentBlockHashResponse.prototype.getHash = function () {
  return (/** @type {string} */jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.rpcpb.GetCurrentBlockHashResponse.prototype.setHash = function (value) {
  jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
                                       * Creates an object representation of this proto suitable for use in Soy templates.
                                       * Field names that are reserved in JavaScript and will be renamed to pb_name.
                                       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
                                       * For the list of reserved names please see:
                                       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
                                       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
                                       *     for transitional soy proto support: http://goto/soy-param-migration
                                       * @return {!Object}
                                       */
  proto.rpcpb.GetBlockHashRequest.prototype.toObject = function (opt_includeInstance) {
    return proto.rpcpb.GetBlockHashRequest.toObject(opt_includeInstance, this);
  };


  /**
      * Static version of the {@see toObject} method.
      * @param {boolean|undefined} includeInstance Whether to include the JSPB
      *     instance for transitional soy proto support:
      *     http://goto/soy-param-migration
      * @param {!proto.rpcpb.GetBlockHashRequest} msg The msg instance to transform.
      * @return {!Object}
      * @suppress {unusedLocalVariables} f is only used for nested messages
      */
  proto.rpcpb.GetBlockHashRequest.toObject = function (includeInstance, msg) {
    var f,obj = {
      height: jspb.Message.getFieldWithDefault(msg, 1, 0) };


    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}


/**
   * Deserializes binary data (in protobuf wire format).
   * @param {jspb.ByteSource} bytes The bytes to deserialize.
   * @return {!proto.rpcpb.GetBlockHashRequest}
   */
proto.rpcpb.GetBlockHashRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpcpb.GetBlockHashRequest();
  return proto.rpcpb.GetBlockHashRequest.deserializeBinaryFromReader(msg, reader);
};


/**
    * Deserializes binary data (in protobuf wire format) from the
    * given reader into the given message object.
    * @param {!proto.rpcpb.GetBlockHashRequest} msg The message object to deserialize into.
    * @param {!jspb.BinaryReader} reader The BinaryReader to use.
    * @return {!proto.rpcpb.GetBlockHashRequest}
    */
proto.rpcpb.GetBlockHashRequest.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */reader.readUint32();
        msg.setHeight(value);
        break;
      default:
        reader.skipField();
        break;}

  }
  return msg;
};


/**
    * Serializes the message to binary data (in protobuf wire format).
    * @return {!Uint8Array}
    */
proto.rpcpb.GetBlockHashRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.rpcpb.GetBlockHashRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
    * Serializes the given message to binary data (in protobuf wire
    * format), writing to the given BinaryWriter.
    * @param {!proto.rpcpb.GetBlockHashRequest} message
    * @param {!jspb.BinaryWriter} writer
    * @suppress {unusedLocalVariables} f is only used for nested messages
    */
proto.rpcpb.GetBlockHashRequest.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getHeight();
  if (f !== 0) {
    writer.writeUint32(
    1,
    f);

  }
};


/**
    * optional uint32 height = 1;
    * @return {number}
    */
proto.rpcpb.GetBlockHashRequest.prototype.getHeight = function () {
  return (/** @type {number} */jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.rpcpb.GetBlockHashRequest.prototype.setHeight = function (value) {
  jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
                                       * Creates an object representation of this proto suitable for use in Soy templates.
                                       * Field names that are reserved in JavaScript and will be renamed to pb_name.
                                       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
                                       * For the list of reserved names please see:
                                       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
                                       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
                                       *     for transitional soy proto support: http://goto/soy-param-migration
                                       * @return {!Object}
                                       */
  proto.rpcpb.GetBlockHashResponse.prototype.toObject = function (opt_includeInstance) {
    return proto.rpcpb.GetBlockHashResponse.toObject(opt_includeInstance, this);
  };


  /**
      * Static version of the {@see toObject} method.
      * @param {boolean|undefined} includeInstance Whether to include the JSPB
      *     instance for transitional soy proto support:
      *     http://goto/soy-param-migration
      * @param {!proto.rpcpb.GetBlockHashResponse} msg The msg instance to transform.
      * @return {!Object}
      * @suppress {unusedLocalVariables} f is only used for nested messages
      */
  proto.rpcpb.GetBlockHashResponse.toObject = function (includeInstance, msg) {
    var f,obj = {
      code: jspb.Message.getFieldWithDefault(msg, 1, 0),
      message: jspb.Message.getFieldWithDefault(msg, 2, ""),
      hash: jspb.Message.getFieldWithDefault(msg, 3, "") };


    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}


/**
   * Deserializes binary data (in protobuf wire format).
   * @param {jspb.ByteSource} bytes The bytes to deserialize.
   * @return {!proto.rpcpb.GetBlockHashResponse}
   */
proto.rpcpb.GetBlockHashResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpcpb.GetBlockHashResponse();
  return proto.rpcpb.GetBlockHashResponse.deserializeBinaryFromReader(msg, reader);
};


/**
    * Deserializes binary data (in protobuf wire format) from the
    * given reader into the given message object.
    * @param {!proto.rpcpb.GetBlockHashResponse} msg The message object to deserialize into.
    * @param {!jspb.BinaryReader} reader The BinaryReader to use.
    * @return {!proto.rpcpb.GetBlockHashResponse}
    */
proto.rpcpb.GetBlockHashResponse.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */reader.readInt32();
        msg.setCode(value);
        break;
      case 2:
        var value = /** @type {string} */reader.readString();
        msg.setMessage(value);
        break;
      case 3:
        var value = /** @type {string} */reader.readString();
        msg.setHash(value);
        break;
      default:
        reader.skipField();
        break;}

  }
  return msg;
};


/**
    * Serializes the message to binary data (in protobuf wire format).
    * @return {!Uint8Array}
    */
proto.rpcpb.GetBlockHashResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.rpcpb.GetBlockHashResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
    * Serializes the given message to binary data (in protobuf wire
    * format), writing to the given BinaryWriter.
    * @param {!proto.rpcpb.GetBlockHashResponse} message
    * @param {!jspb.BinaryWriter} writer
    * @suppress {unusedLocalVariables} f is only used for nested messages
    */
proto.rpcpb.GetBlockHashResponse.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0) {
    writer.writeInt32(
    1,
    f);

  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
    2,
    f);

  }
  f = message.getHash();
  if (f.length > 0) {
    writer.writeString(
    3,
    f);

  }
};


/**
    * optional int32 code = 1;
    * @return {number}
    */
proto.rpcpb.GetBlockHashResponse.prototype.getCode = function () {
  return (/** @type {number} */jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.rpcpb.GetBlockHashResponse.prototype.setCode = function (value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
    * optional string message = 2;
    * @return {string}
    */
proto.rpcpb.GetBlockHashResponse.prototype.getMessage = function () {
  return (/** @type {string} */jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.rpcpb.GetBlockHashResponse.prototype.setMessage = function (value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
    * optional string hash = 3;
    * @return {string}
    */
proto.rpcpb.GetBlockHashResponse.prototype.getHash = function () {
  return (/** @type {string} */jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.rpcpb.GetBlockHashResponse.prototype.setHash = function (value) {
  jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
                                       * Creates an object representation of this proto suitable for use in Soy templates.
                                       * Field names that are reserved in JavaScript and will be renamed to pb_name.
                                       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
                                       * For the list of reserved names please see:
                                       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
                                       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
                                       *     for transitional soy proto support: http://goto/soy-param-migration
                                       * @return {!Object}
                                       */
  proto.rpcpb.GetBlockRequest.prototype.toObject = function (opt_includeInstance) {
    return proto.rpcpb.GetBlockRequest.toObject(opt_includeInstance, this);
  };


  /**
      * Static version of the {@see toObject} method.
      * @param {boolean|undefined} includeInstance Whether to include the JSPB
      *     instance for transitional soy proto support:
      *     http://goto/soy-param-migration
      * @param {!proto.rpcpb.GetBlockRequest} msg The msg instance to transform.
      * @return {!Object}
      * @suppress {unusedLocalVariables} f is only used for nested messages
      */
  proto.rpcpb.GetBlockRequest.toObject = function (includeInstance, msg) {
    var f,obj = {
      blockHash: jspb.Message.getFieldWithDefault(msg, 1, "") };


    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}


/**
   * Deserializes binary data (in protobuf wire format).
   * @param {jspb.ByteSource} bytes The bytes to deserialize.
   * @return {!proto.rpcpb.GetBlockRequest}
   */
proto.rpcpb.GetBlockRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpcpb.GetBlockRequest();
  return proto.rpcpb.GetBlockRequest.deserializeBinaryFromReader(msg, reader);
};


/**
    * Deserializes binary data (in protobuf wire format) from the
    * given reader into the given message object.
    * @param {!proto.rpcpb.GetBlockRequest} msg The message object to deserialize into.
    * @param {!jspb.BinaryReader} reader The BinaryReader to use.
    * @return {!proto.rpcpb.GetBlockRequest}
    */
proto.rpcpb.GetBlockRequest.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */reader.readString();
        msg.setBlockHash(value);
        break;
      default:
        reader.skipField();
        break;}

  }
  return msg;
};


/**
    * Serializes the message to binary data (in protobuf wire format).
    * @return {!Uint8Array}
    */
proto.rpcpb.GetBlockRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.rpcpb.GetBlockRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
    * Serializes the given message to binary data (in protobuf wire
    * format), writing to the given BinaryWriter.
    * @param {!proto.rpcpb.GetBlockRequest} message
    * @param {!jspb.BinaryWriter} writer
    * @suppress {unusedLocalVariables} f is only used for nested messages
    */
proto.rpcpb.GetBlockRequest.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getBlockHash();
  if (f.length > 0) {
    writer.writeString(
    1,
    f);

  }
};


/**
    * optional string block_hash = 1;
    * @return {string}
    */
proto.rpcpb.GetBlockRequest.prototype.getBlockHash = function () {
  return (/** @type {string} */jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.rpcpb.GetBlockRequest.prototype.setBlockHash = function (value) {
  jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
                                       * Creates an object representation of this proto suitable for use in Soy templates.
                                       * Field names that are reserved in JavaScript and will be renamed to pb_name.
                                       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
                                       * For the list of reserved names please see:
                                       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
                                       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
                                       *     for transitional soy proto support: http://goto/soy-param-migration
                                       * @return {!Object}
                                       */
  proto.rpcpb.GetBlockHeaderResponse.prototype.toObject = function (opt_includeInstance) {
    return proto.rpcpb.GetBlockHeaderResponse.toObject(opt_includeInstance, this);
  };


  /**
      * Static version of the {@see toObject} method.
      * @param {boolean|undefined} includeInstance Whether to include the JSPB
      *     instance for transitional soy proto support:
      *     http://goto/soy-param-migration
      * @param {!proto.rpcpb.GetBlockHeaderResponse} msg The msg instance to transform.
      * @return {!Object}
      * @suppress {unusedLocalVariables} f is only used for nested messages
      */
  proto.rpcpb.GetBlockHeaderResponse.toObject = function (includeInstance, msg) {
    var f,obj = {
      code: jspb.Message.getFieldWithDefault(msg, 1, 0),
      message: jspb.Message.getFieldWithDefault(msg, 2, ""),
      header: (f = msg.getHeader()) && block_pb.BlockHeader.toObject(includeInstance, f) };


    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}


/**
   * Deserializes binary data (in protobuf wire format).
   * @param {jspb.ByteSource} bytes The bytes to deserialize.
   * @return {!proto.rpcpb.GetBlockHeaderResponse}
   */
proto.rpcpb.GetBlockHeaderResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpcpb.GetBlockHeaderResponse();
  return proto.rpcpb.GetBlockHeaderResponse.deserializeBinaryFromReader(msg, reader);
};


/**
    * Deserializes binary data (in protobuf wire format) from the
    * given reader into the given message object.
    * @param {!proto.rpcpb.GetBlockHeaderResponse} msg The message object to deserialize into.
    * @param {!jspb.BinaryReader} reader The BinaryReader to use.
    * @return {!proto.rpcpb.GetBlockHeaderResponse}
    */
proto.rpcpb.GetBlockHeaderResponse.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */reader.readInt32();
        msg.setCode(value);
        break;
      case 2:
        var value = /** @type {string} */reader.readString();
        msg.setMessage(value);
        break;
      case 3:
        var value = new block_pb.BlockHeader();
        reader.readMessage(value, block_pb.BlockHeader.deserializeBinaryFromReader);
        msg.setHeader(value);
        break;
      default:
        reader.skipField();
        break;}

  }
  return msg;
};


/**
    * Serializes the message to binary data (in protobuf wire format).
    * @return {!Uint8Array}
    */
proto.rpcpb.GetBlockHeaderResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.rpcpb.GetBlockHeaderResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
    * Serializes the given message to binary data (in protobuf wire
    * format), writing to the given BinaryWriter.
    * @param {!proto.rpcpb.GetBlockHeaderResponse} message
    * @param {!jspb.BinaryWriter} writer
    * @suppress {unusedLocalVariables} f is only used for nested messages
    */
proto.rpcpb.GetBlockHeaderResponse.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0) {
    writer.writeInt32(
    1,
    f);

  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
    2,
    f);

  }
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
    3,
    f,
    block_pb.BlockHeader.serializeBinaryToWriter);

  }
};


/**
    * optional int32 code = 1;
    * @return {number}
    */
proto.rpcpb.GetBlockHeaderResponse.prototype.getCode = function () {
  return (/** @type {number} */jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.rpcpb.GetBlockHeaderResponse.prototype.setCode = function (value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
    * optional string message = 2;
    * @return {string}
    */
proto.rpcpb.GetBlockHeaderResponse.prototype.getMessage = function () {
  return (/** @type {string} */jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.rpcpb.GetBlockHeaderResponse.prototype.setMessage = function (value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
    * optional corepb.BlockHeader header = 3;
    * @return {?proto.corepb.BlockHeader}
    */
proto.rpcpb.GetBlockHeaderResponse.prototype.getHeader = function () {
  return (/** @type{?proto.corepb.BlockHeader} */
    jspb.Message.getWrapperField(this, block_pb.BlockHeader, 3));
};


/** @param {?proto.corepb.BlockHeader|undefined} value */
proto.rpcpb.GetBlockHeaderResponse.prototype.setHeader = function (value) {
  jspb.Message.setWrapperField(this, 3, value);
};


/**
    * Clears the message field making it undefined.
    */
proto.rpcpb.GetBlockHeaderResponse.prototype.clearHeader = function () {
  this.setHeader(undefined);
};


/**
    * Returns whether this field is set.
    * @return {boolean}
    */
proto.rpcpb.GetBlockHeaderResponse.prototype.hasHeader = function () {
  return jspb.Message.getField(this, 3) != null;
};



/**
    * List of repeated fields within this message type.
    * @private {!Array<number>}
    * @const
    */
proto.rpcpb.Node.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
                                       * Creates an object representation of this proto suitable for use in Soy templates.
                                       * Field names that are reserved in JavaScript and will be renamed to pb_name.
                                       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
                                       * For the list of reserved names please see:
                                       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
                                       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
                                       *     for transitional soy proto support: http://goto/soy-param-migration
                                       * @return {!Object}
                                       */
  proto.rpcpb.Node.prototype.toObject = function (opt_includeInstance) {
    return proto.rpcpb.Node.toObject(opt_includeInstance, this);
  };


  /**
      * Static version of the {@see toObject} method.
      * @param {boolean|undefined} includeInstance Whether to include the JSPB
      *     instance for transitional soy proto support:
      *     http://goto/soy-param-migration
      * @param {!proto.rpcpb.Node} msg The msg instance to transform.
      * @return {!Object}
      * @suppress {unusedLocalVariables} f is only used for nested messages
      */
  proto.rpcpb.Node.toObject = function (includeInstance, msg) {
    var f,obj = {
      id: jspb.Message.getFieldWithDefault(msg, 1, ""),
      addrsList: jspb.Message.getRepeatedField(msg, 2),
      ttl: jspb.Message.getFieldWithDefault(msg, 3, "") };


    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}


/**
   * Deserializes binary data (in protobuf wire format).
   * @param {jspb.ByteSource} bytes The bytes to deserialize.
   * @return {!proto.rpcpb.Node}
   */
proto.rpcpb.Node.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpcpb.Node();
  return proto.rpcpb.Node.deserializeBinaryFromReader(msg, reader);
};


/**
    * Deserializes binary data (in protobuf wire format) from the
    * given reader into the given message object.
    * @param {!proto.rpcpb.Node} msg The message object to deserialize into.
    * @param {!jspb.BinaryReader} reader The BinaryReader to use.
    * @return {!proto.rpcpb.Node}
    */
proto.rpcpb.Node.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */reader.readString();
        msg.setId(value);
        break;
      case 2:
        var value = /** @type {string} */reader.readString();
        msg.addAddrs(value);
        break;
      case 3:
        var value = /** @type {string} */reader.readString();
        msg.setTtl(value);
        break;
      default:
        reader.skipField();
        break;}

  }
  return msg;
};


/**
    * Serializes the message to binary data (in protobuf wire format).
    * @return {!Uint8Array}
    */
proto.rpcpb.Node.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.rpcpb.Node.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
    * Serializes the given message to binary data (in protobuf wire
    * format), writing to the given BinaryWriter.
    * @param {!proto.rpcpb.Node} message
    * @param {!jspb.BinaryWriter} writer
    * @suppress {unusedLocalVariables} f is only used for nested messages
    */
proto.rpcpb.Node.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
    1,
    f);

  }
  f = message.getAddrsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
    2,
    f);

  }
  f = message.getTtl();
  if (f.length > 0) {
    writer.writeString(
    3,
    f);

  }
};


/**
    * optional string id = 1;
    * @return {string}
    */
proto.rpcpb.Node.prototype.getId = function () {
  return (/** @type {string} */jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.rpcpb.Node.prototype.setId = function (value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
    * repeated string addrs = 2;
    * @return {!Array<string>}
    */
proto.rpcpb.Node.prototype.getAddrsList = function () {
  return (/** @type {!Array<string>} */jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array<string>} value */
proto.rpcpb.Node.prototype.setAddrsList = function (value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
    * @param {string} value
    * @param {number=} opt_index
    */
proto.rpcpb.Node.prototype.addAddrs = function (value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
    * Clears the list making it empty but non-null.
    */
proto.rpcpb.Node.prototype.clearAddrsList = function () {
  this.setAddrsList([]);
};


/**
    * optional string ttl = 3;
    * @return {string}
    */
proto.rpcpb.Node.prototype.getTtl = function () {
  return (/** @type {string} */jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.rpcpb.Node.prototype.setTtl = function (value) {
  jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
                                       * Creates an object representation of this proto suitable for use in Soy templates.
                                       * Field names that are reserved in JavaScript and will be renamed to pb_name.
                                       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
                                       * For the list of reserved names please see:
                                       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
                                       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
                                       *     for transitional soy proto support: http://goto/soy-param-migration
                                       * @return {!Object}
                                       */
  proto.rpcpb.GetNodeInfoRequest.prototype.toObject = function (opt_includeInstance) {
    return proto.rpcpb.GetNodeInfoRequest.toObject(opt_includeInstance, this);
  };


  /**
      * Static version of the {@see toObject} method.
      * @param {boolean|undefined} includeInstance Whether to include the JSPB
      *     instance for transitional soy proto support:
      *     http://goto/soy-param-migration
      * @param {!proto.rpcpb.GetNodeInfoRequest} msg The msg instance to transform.
      * @return {!Object}
      * @suppress {unusedLocalVariables} f is only used for nested messages
      */
  proto.rpcpb.GetNodeInfoRequest.toObject = function (includeInstance, msg) {
    var f,obj = {};



    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}


/**
   * Deserializes binary data (in protobuf wire format).
   * @param {jspb.ByteSource} bytes The bytes to deserialize.
   * @return {!proto.rpcpb.GetNodeInfoRequest}
   */
proto.rpcpb.GetNodeInfoRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpcpb.GetNodeInfoRequest();
  return proto.rpcpb.GetNodeInfoRequest.deserializeBinaryFromReader(msg, reader);
};


/**
    * Deserializes binary data (in protobuf wire format) from the
    * given reader into the given message object.
    * @param {!proto.rpcpb.GetNodeInfoRequest} msg The message object to deserialize into.
    * @param {!jspb.BinaryReader} reader The BinaryReader to use.
    * @return {!proto.rpcpb.GetNodeInfoRequest}
    */
proto.rpcpb.GetNodeInfoRequest.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      default:
        reader.skipField();
        break;}

  }
  return msg;
};


/**
    * Serializes the message to binary data (in protobuf wire format).
    * @return {!Uint8Array}
    */
proto.rpcpb.GetNodeInfoRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.rpcpb.GetNodeInfoRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
    * Serializes the given message to binary data (in protobuf wire
    * format), writing to the given BinaryWriter.
    * @param {!proto.rpcpb.GetNodeInfoRequest} message
    * @param {!jspb.BinaryWriter} writer
    * @suppress {unusedLocalVariables} f is only used for nested messages
    */
proto.rpcpb.GetNodeInfoRequest.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
};



/**
    * List of repeated fields within this message type.
    * @private {!Array<number>}
    * @const
    */
proto.rpcpb.GetNodeInfoResponse.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
                                       * Creates an object representation of this proto suitable for use in Soy templates.
                                       * Field names that are reserved in JavaScript and will be renamed to pb_name.
                                       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
                                       * For the list of reserved names please see:
                                       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
                                       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
                                       *     for transitional soy proto support: http://goto/soy-param-migration
                                       * @return {!Object}
                                       */
  proto.rpcpb.GetNodeInfoResponse.prototype.toObject = function (opt_includeInstance) {
    return proto.rpcpb.GetNodeInfoResponse.toObject(opt_includeInstance, this);
  };


  /**
      * Static version of the {@see toObject} method.
      * @param {boolean|undefined} includeInstance Whether to include the JSPB
      *     instance for transitional soy proto support:
      *     http://goto/soy-param-migration
      * @param {!proto.rpcpb.GetNodeInfoResponse} msg The msg instance to transform.
      * @return {!Object}
      * @suppress {unusedLocalVariables} f is only used for nested messages
      */
  proto.rpcpb.GetNodeInfoResponse.toObject = function (includeInstance, msg) {
    var f,obj = {
      code: jspb.Message.getFieldWithDefault(msg, 1, 0),
      message: jspb.Message.getFieldWithDefault(msg, 2, ""),
      nodesList: jspb.Message.toObjectList(msg.getNodesList(),
      proto.rpcpb.Node.toObject, includeInstance) };


    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}


/**
   * Deserializes binary data (in protobuf wire format).
   * @param {jspb.ByteSource} bytes The bytes to deserialize.
   * @return {!proto.rpcpb.GetNodeInfoResponse}
   */
proto.rpcpb.GetNodeInfoResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpcpb.GetNodeInfoResponse();
  return proto.rpcpb.GetNodeInfoResponse.deserializeBinaryFromReader(msg, reader);
};


/**
    * Deserializes binary data (in protobuf wire format) from the
    * given reader into the given message object.
    * @param {!proto.rpcpb.GetNodeInfoResponse} msg The message object to deserialize into.
    * @param {!jspb.BinaryReader} reader The BinaryReader to use.
    * @return {!proto.rpcpb.GetNodeInfoResponse}
    */
proto.rpcpb.GetNodeInfoResponse.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */reader.readInt32();
        msg.setCode(value);
        break;
      case 2:
        var value = /** @type {string} */reader.readString();
        msg.setMessage(value);
        break;
      case 3:
        var value = new proto.rpcpb.Node();
        reader.readMessage(value, proto.rpcpb.Node.deserializeBinaryFromReader);
        msg.addNodes(value);
        break;
      default:
        reader.skipField();
        break;}

  }
  return msg;
};


/**
    * Serializes the message to binary data (in protobuf wire format).
    * @return {!Uint8Array}
    */
proto.rpcpb.GetNodeInfoResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.rpcpb.GetNodeInfoResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
    * Serializes the given message to binary data (in protobuf wire
    * format), writing to the given BinaryWriter.
    * @param {!proto.rpcpb.GetNodeInfoResponse} message
    * @param {!jspb.BinaryWriter} writer
    * @suppress {unusedLocalVariables} f is only used for nested messages
    */
proto.rpcpb.GetNodeInfoResponse.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0) {
    writer.writeInt32(
    1,
    f);

  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
    2,
    f);

  }
  f = message.getNodesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
    3,
    f,
    proto.rpcpb.Node.serializeBinaryToWriter);

  }
};


/**
    * optional int32 code = 1;
    * @return {number}
    */
proto.rpcpb.GetNodeInfoResponse.prototype.getCode = function () {
  return (/** @type {number} */jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.rpcpb.GetNodeInfoResponse.prototype.setCode = function (value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
    * optional string message = 2;
    * @return {string}
    */
proto.rpcpb.GetNodeInfoResponse.prototype.getMessage = function () {
  return (/** @type {string} */jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.rpcpb.GetNodeInfoResponse.prototype.setMessage = function (value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
    * repeated Node nodes = 3;
    * @return {!Array<!proto.rpcpb.Node>}
    */
proto.rpcpb.GetNodeInfoResponse.prototype.getNodesList = function () {
  return (/** @type{!Array<!proto.rpcpb.Node>} */
    jspb.Message.getRepeatedWrapperField(this, proto.rpcpb.Node, 3));
};


/** @param {!Array<!proto.rpcpb.Node>} value */
proto.rpcpb.GetNodeInfoResponse.prototype.setNodesList = function (value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
    * @param {!proto.rpcpb.Node=} opt_value
    * @param {number=} opt_index
    * @return {!proto.rpcpb.Node}
    */
proto.rpcpb.GetNodeInfoResponse.prototype.addNodes = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.rpcpb.Node, opt_index);
};


/**
    * Clears the list making it empty but non-null.
    */
proto.rpcpb.GetNodeInfoResponse.prototype.clearNodesList = function () {
  this.setNodesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
                                       * Creates an object representation of this proto suitable for use in Soy templates.
                                       * Field names that are reserved in JavaScript and will be renamed to pb_name.
                                       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
                                       * For the list of reserved names please see:
                                       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
                                       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
                                       *     for transitional soy proto support: http://goto/soy-param-migration
                                       * @return {!Object}
                                       */
  proto.rpcpb.GetTxCountReq.prototype.toObject = function (opt_includeInstance) {
    return proto.rpcpb.GetTxCountReq.toObject(opt_includeInstance, this);
  };


  /**
      * Static version of the {@see toObject} method.
      * @param {boolean|undefined} includeInstance Whether to include the JSPB
      *     instance for transitional soy proto support:
      *     http://goto/soy-param-migration
      * @param {!proto.rpcpb.GetTxCountReq} msg The msg instance to transform.
      * @return {!Object}
      * @suppress {unusedLocalVariables} f is only used for nested messages
      */
  proto.rpcpb.GetTxCountReq.toObject = function (includeInstance, msg) {
    var f,obj = {
      blockHeight: jspb.Message.getFieldWithDefault(msg, 1, 0),
      blockHash: jspb.Message.getFieldWithDefault(msg, 2, "") };


    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}


/**
   * Deserializes binary data (in protobuf wire format).
   * @param {jspb.ByteSource} bytes The bytes to deserialize.
   * @return {!proto.rpcpb.GetTxCountReq}
   */
proto.rpcpb.GetTxCountReq.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpcpb.GetTxCountReq();
  return proto.rpcpb.GetTxCountReq.deserializeBinaryFromReader(msg, reader);
};


/**
    * Deserializes binary data (in protobuf wire format) from the
    * given reader into the given message object.
    * @param {!proto.rpcpb.GetTxCountReq} msg The message object to deserialize into.
    * @param {!jspb.BinaryReader} reader The BinaryReader to use.
    * @return {!proto.rpcpb.GetTxCountReq}
    */
proto.rpcpb.GetTxCountReq.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */reader.readUint32();
        msg.setBlockHeight(value);
        break;
      case 2:
        var value = /** @type {string} */reader.readString();
        msg.setBlockHash(value);
        break;
      default:
        reader.skipField();
        break;}

  }
  return msg;
};


/**
    * Serializes the message to binary data (in protobuf wire format).
    * @return {!Uint8Array}
    */
proto.rpcpb.GetTxCountReq.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.rpcpb.GetTxCountReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
    * Serializes the given message to binary data (in protobuf wire
    * format), writing to the given BinaryWriter.
    * @param {!proto.rpcpb.GetTxCountReq} message
    * @param {!jspb.BinaryWriter} writer
    * @suppress {unusedLocalVariables} f is only used for nested messages
    */
proto.rpcpb.GetTxCountReq.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getBlockHeight();
  if (f !== 0) {
    writer.writeUint32(
    1,
    f);

  }
  f = message.getBlockHash();
  if (f.length > 0) {
    writer.writeString(
    2,
    f);

  }
};


/**
    * optional uint32 block_height = 1;
    * @return {number}
    */
proto.rpcpb.GetTxCountReq.prototype.getBlockHeight = function () {
  return (/** @type {number} */jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.rpcpb.GetTxCountReq.prototype.setBlockHeight = function (value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
    * optional string block_hash = 2;
    * @return {string}
    */
proto.rpcpb.GetTxCountReq.prototype.getBlockHash = function () {
  return (/** @type {string} */jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.rpcpb.GetTxCountReq.prototype.setBlockHash = function (value) {
  jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
                                       * Creates an object representation of this proto suitable for use in Soy templates.
                                       * Field names that are reserved in JavaScript and will be renamed to pb_name.
                                       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
                                       * For the list of reserved names please see:
                                       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
                                       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
                                       *     for transitional soy proto support: http://goto/soy-param-migration
                                       * @return {!Object}
                                       */
  proto.rpcpb.GetTxCountResp.prototype.toObject = function (opt_includeInstance) {
    return proto.rpcpb.GetTxCountResp.toObject(opt_includeInstance, this);
  };


  /**
      * Static version of the {@see toObject} method.
      * @param {boolean|undefined} includeInstance Whether to include the JSPB
      *     instance for transitional soy proto support:
      *     http://goto/soy-param-migration
      * @param {!proto.rpcpb.GetTxCountResp} msg The msg instance to transform.
      * @return {!Object}
      * @suppress {unusedLocalVariables} f is only used for nested messages
      */
  proto.rpcpb.GetTxCountResp.toObject = function (includeInstance, msg) {
    var f,obj = {
      code: jspb.Message.getFieldWithDefault(msg, 1, 0),
      message: jspb.Message.getFieldWithDefault(msg, 2, ""),
      count: jspb.Message.getFieldWithDefault(msg, 3, 0) };


    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}


/**
   * Deserializes binary data (in protobuf wire format).
   * @param {jspb.ByteSource} bytes The bytes to deserialize.
   * @return {!proto.rpcpb.GetTxCountResp}
   */
proto.rpcpb.GetTxCountResp.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpcpb.GetTxCountResp();
  return proto.rpcpb.GetTxCountResp.deserializeBinaryFromReader(msg, reader);
};


/**
    * Deserializes binary data (in protobuf wire format) from the
    * given reader into the given message object.
    * @param {!proto.rpcpb.GetTxCountResp} msg The message object to deserialize into.
    * @param {!jspb.BinaryReader} reader The BinaryReader to use.
    * @return {!proto.rpcpb.GetTxCountResp}
    */
proto.rpcpb.GetTxCountResp.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */reader.readInt32();
        msg.setCode(value);
        break;
      case 2:
        var value = /** @type {string} */reader.readString();
        msg.setMessage(value);
        break;
      case 3:
        var value = /** @type {number} */reader.readUint32();
        msg.setCount(value);
        break;
      default:
        reader.skipField();
        break;}

  }
  return msg;
};


/**
    * Serializes the message to binary data (in protobuf wire format).
    * @return {!Uint8Array}
    */
proto.rpcpb.GetTxCountResp.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.rpcpb.GetTxCountResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
    * Serializes the given message to binary data (in protobuf wire
    * format), writing to the given BinaryWriter.
    * @param {!proto.rpcpb.GetTxCountResp} message
    * @param {!jspb.BinaryWriter} writer
    * @suppress {unusedLocalVariables} f is only used for nested messages
    */
proto.rpcpb.GetTxCountResp.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0) {
    writer.writeInt32(
    1,
    f);

  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
    2,
    f);

  }
  f = message.getCount();
  if (f !== 0) {
    writer.writeUint32(
    3,
    f);

  }
};


/**
    * optional int32 code = 1;
    * @return {number}
    */
proto.rpcpb.GetTxCountResp.prototype.getCode = function () {
  return (/** @type {number} */jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.rpcpb.GetTxCountResp.prototype.setCode = function (value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
    * optional string message = 2;
    * @return {string}
    */
proto.rpcpb.GetTxCountResp.prototype.getMessage = function () {
  return (/** @type {string} */jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.rpcpb.GetTxCountResp.prototype.setMessage = function (value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
    * optional uint32 count = 3;
    * @return {number}
    */
proto.rpcpb.GetTxCountResp.prototype.getCount = function () {
  return (/** @type {number} */jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.rpcpb.GetTxCountResp.prototype.setCount = function (value) {
  jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
                                       * Creates an object representation of this proto suitable for use in Soy templates.
                                       * Field names that are reserved in JavaScript and will be renamed to pb_name.
                                       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
                                       * For the list of reserved names please see:
                                       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
                                       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
                                       *     for transitional soy proto support: http://goto/soy-param-migration
                                       * @return {!Object}
                                       */
  proto.rpcpb.Delegate.prototype.toObject = function (opt_includeInstance) {
    return proto.rpcpb.Delegate.toObject(opt_includeInstance, this);
  };


  /**
      * Static version of the {@see toObject} method.
      * @param {boolean|undefined} includeInstance Whether to include the JSPB
      *     instance for transitional soy proto support:
      *     http://goto/soy-param-migration
      * @param {!proto.rpcpb.Delegate} msg The msg instance to transform.
      * @return {!Object}
      * @suppress {unusedLocalVariables} f is only used for nested messages
      */
  proto.rpcpb.Delegate.toObject = function (includeInstance, msg) {
    var f,obj = {
      addr: jspb.Message.getFieldWithDefault(msg, 1, ""),
      votes: jspb.Message.getFieldWithDefault(msg, 2, 0),
      pledgeAmount: jspb.Message.getFieldWithDefault(msg, 3, 0),
      score: jspb.Message.getFieldWithDefault(msg, 4, 0),
      continualPeriods: jspb.Message.getFieldWithDefault(msg, 5, 0),
      blocksThisDynasty: jspb.Message.getFieldWithDefault(msg, 6, 0),
      blocksTotal: jspb.Message.getFieldWithDefault(msg, 7, 0) };


    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}


/**
   * Deserializes binary data (in protobuf wire format).
   * @param {jspb.ByteSource} bytes The bytes to deserialize.
   * @return {!proto.rpcpb.Delegate}
   */
proto.rpcpb.Delegate.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpcpb.Delegate();
  return proto.rpcpb.Delegate.deserializeBinaryFromReader(msg, reader);
};


/**
    * Deserializes binary data (in protobuf wire format) from the
    * given reader into the given message object.
    * @param {!proto.rpcpb.Delegate} msg The message object to deserialize into.
    * @param {!jspb.BinaryReader} reader The BinaryReader to use.
    * @return {!proto.rpcpb.Delegate}
    */
proto.rpcpb.Delegate.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */reader.readString();
        msg.setAddr(value);
        break;
      case 2:
        var value = /** @type {number} */reader.readUint64();
        msg.setVotes(value);
        break;
      case 3:
        var value = /** @type {number} */reader.readUint64();
        msg.setPledgeAmount(value);
        break;
      case 4:
        var value = /** @type {number} */reader.readUint64();
        msg.setScore(value);
        break;
      case 5:
        var value = /** @type {number} */reader.readUint32();
        msg.setContinualPeriods(value);
        break;
      case 6:
        var value = /** @type {number} */reader.readUint32();
        msg.setBlocksThisDynasty(value);
        break;
      case 7:
        var value = /** @type {number} */reader.readUint32();
        msg.setBlocksTotal(value);
        break;
      default:
        reader.skipField();
        break;}

  }
  return msg;
};


/**
    * Serializes the message to binary data (in protobuf wire format).
    * @return {!Uint8Array}
    */
proto.rpcpb.Delegate.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.rpcpb.Delegate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
    * Serializes the given message to binary data (in protobuf wire
    * format), writing to the given BinaryWriter.
    * @param {!proto.rpcpb.Delegate} message
    * @param {!jspb.BinaryWriter} writer
    * @suppress {unusedLocalVariables} f is only used for nested messages
    */
proto.rpcpb.Delegate.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getAddr();
  if (f.length > 0) {
    writer.writeString(
    1,
    f);

  }
  f = message.getVotes();
  if (f !== 0) {
    writer.writeUint64(
    2,
    f);

  }
  f = message.getPledgeAmount();
  if (f !== 0) {
    writer.writeUint64(
    3,
    f);

  }
  f = message.getScore();
  if (f !== 0) {
    writer.writeUint64(
    4,
    f);

  }
  f = message.getContinualPeriods();
  if (f !== 0) {
    writer.writeUint32(
    5,
    f);

  }
  f = message.getBlocksThisDynasty();
  if (f !== 0) {
    writer.writeUint32(
    6,
    f);

  }
  f = message.getBlocksTotal();
  if (f !== 0) {
    writer.writeUint32(
    7,
    f);

  }
};


/**
    * optional string addr = 1;
    * @return {string}
    */
proto.rpcpb.Delegate.prototype.getAddr = function () {
  return (/** @type {string} */jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.rpcpb.Delegate.prototype.setAddr = function (value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
    * optional uint64 votes = 2;
    * @return {number}
    */
proto.rpcpb.Delegate.prototype.getVotes = function () {
  return (/** @type {number} */jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.rpcpb.Delegate.prototype.setVotes = function (value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
    * optional uint64 pledge_amount = 3;
    * @return {number}
    */
proto.rpcpb.Delegate.prototype.getPledgeAmount = function () {
  return (/** @type {number} */jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.rpcpb.Delegate.prototype.setPledgeAmount = function (value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
    * optional uint64 score = 4;
    * @return {number}
    */
proto.rpcpb.Delegate.prototype.getScore = function () {
  return (/** @type {number} */jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.rpcpb.Delegate.prototype.setScore = function (value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
    * optional uint32 continual_periods = 5;
    * @return {number}
    */
proto.rpcpb.Delegate.prototype.getContinualPeriods = function () {
  return (/** @type {number} */jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.rpcpb.Delegate.prototype.setContinualPeriods = function (value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
    * optional uint32 blocks_this_dynasty = 6;
    * @return {number}
    */
proto.rpcpb.Delegate.prototype.getBlocksThisDynasty = function () {
  return (/** @type {number} */jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.rpcpb.Delegate.prototype.setBlocksThisDynasty = function (value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
    * optional uint32 blocks_total = 7;
    * @return {number}
    */
proto.rpcpb.Delegate.prototype.getBlocksTotal = function () {
  return (/** @type {number} */jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.rpcpb.Delegate.prototype.setBlocksTotal = function (value) {
  jspb.Message.setProto3IntField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
                                       * Creates an object representation of this proto suitable for use in Soy templates.
                                       * Field names that are reserved in JavaScript and will be renamed to pb_name.
                                       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
                                       * For the list of reserved names please see:
                                       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
                                       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
                                       *     for transitional soy proto support: http://goto/soy-param-migration
                                       * @return {!Object}
                                       */
  proto.rpcpb.PeerIDReq.prototype.toObject = function (opt_includeInstance) {
    return proto.rpcpb.PeerIDReq.toObject(opt_includeInstance, this);
  };


  /**
      * Static version of the {@see toObject} method.
      * @param {boolean|undefined} includeInstance Whether to include the JSPB
      *     instance for transitional soy proto support:
      *     http://goto/soy-param-migration
      * @param {!proto.rpcpb.PeerIDReq} msg The msg instance to transform.
      * @return {!Object}
      * @suppress {unusedLocalVariables} f is only used for nested messages
      */
  proto.rpcpb.PeerIDReq.toObject = function (includeInstance, msg) {
    var f,obj = {};



    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}


/**
   * Deserializes binary data (in protobuf wire format).
   * @param {jspb.ByteSource} bytes The bytes to deserialize.
   * @return {!proto.rpcpb.PeerIDReq}
   */
proto.rpcpb.PeerIDReq.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpcpb.PeerIDReq();
  return proto.rpcpb.PeerIDReq.deserializeBinaryFromReader(msg, reader);
};


/**
    * Deserializes binary data (in protobuf wire format) from the
    * given reader into the given message object.
    * @param {!proto.rpcpb.PeerIDReq} msg The message object to deserialize into.
    * @param {!jspb.BinaryReader} reader The BinaryReader to use.
    * @return {!proto.rpcpb.PeerIDReq}
    */
proto.rpcpb.PeerIDReq.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      default:
        reader.skipField();
        break;}

  }
  return msg;
};


/**
    * Serializes the message to binary data (in protobuf wire format).
    * @return {!Uint8Array}
    */
proto.rpcpb.PeerIDReq.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.rpcpb.PeerIDReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
    * Serializes the given message to binary data (in protobuf wire
    * format), writing to the given BinaryWriter.
    * @param {!proto.rpcpb.PeerIDReq} message
    * @param {!jspb.BinaryWriter} writer
    * @suppress {unusedLocalVariables} f is only used for nested messages
    */
proto.rpcpb.PeerIDReq.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
                                       * Creates an object representation of this proto suitable for use in Soy templates.
                                       * Field names that are reserved in JavaScript and will be renamed to pb_name.
                                       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
                                       * For the list of reserved names please see:
                                       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
                                       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
                                       *     for transitional soy proto support: http://goto/soy-param-migration
                                       * @return {!Object}
                                       */
  proto.rpcpb.PeerIDResp.prototype.toObject = function (opt_includeInstance) {
    return proto.rpcpb.PeerIDResp.toObject(opt_includeInstance, this);
  };


  /**
      * Static version of the {@see toObject} method.
      * @param {boolean|undefined} includeInstance Whether to include the JSPB
      *     instance for transitional soy proto support:
      *     http://goto/soy-param-migration
      * @param {!proto.rpcpb.PeerIDResp} msg The msg instance to transform.
      * @return {!Object}
      * @suppress {unusedLocalVariables} f is only used for nested messages
      */
  proto.rpcpb.PeerIDResp.toObject = function (includeInstance, msg) {
    var f,obj = {
      code: jspb.Message.getFieldWithDefault(msg, 1, 0),
      message: jspb.Message.getFieldWithDefault(msg, 2, ""),
      peerid: jspb.Message.getFieldWithDefault(msg, 3, "") };


    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}


/**
   * Deserializes binary data (in protobuf wire format).
   * @param {jspb.ByteSource} bytes The bytes to deserialize.
   * @return {!proto.rpcpb.PeerIDResp}
   */
proto.rpcpb.PeerIDResp.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpcpb.PeerIDResp();
  return proto.rpcpb.PeerIDResp.deserializeBinaryFromReader(msg, reader);
};


/**
    * Deserializes binary data (in protobuf wire format) from the
    * given reader into the given message object.
    * @param {!proto.rpcpb.PeerIDResp} msg The message object to deserialize into.
    * @param {!jspb.BinaryReader} reader The BinaryReader to use.
    * @return {!proto.rpcpb.PeerIDResp}
    */
proto.rpcpb.PeerIDResp.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */reader.readInt32();
        msg.setCode(value);
        break;
      case 2:
        var value = /** @type {string} */reader.readString();
        msg.setMessage(value);
        break;
      case 3:
        var value = /** @type {string} */reader.readString();
        msg.setPeerid(value);
        break;
      default:
        reader.skipField();
        break;}

  }
  return msg;
};


/**
    * Serializes the message to binary data (in protobuf wire format).
    * @return {!Uint8Array}
    */
proto.rpcpb.PeerIDResp.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.rpcpb.PeerIDResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
    * Serializes the given message to binary data (in protobuf wire
    * format), writing to the given BinaryWriter.
    * @param {!proto.rpcpb.PeerIDResp} message
    * @param {!jspb.BinaryWriter} writer
    * @suppress {unusedLocalVariables} f is only used for nested messages
    */
proto.rpcpb.PeerIDResp.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0) {
    writer.writeInt32(
    1,
    f);

  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
    2,
    f);

  }
  f = message.getPeerid();
  if (f.length > 0) {
    writer.writeString(
    3,
    f);

  }
};


/**
    * optional int32 code = 1;
    * @return {number}
    */
proto.rpcpb.PeerIDResp.prototype.getCode = function () {
  return (/** @type {number} */jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.rpcpb.PeerIDResp.prototype.setCode = function (value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
    * optional string message = 2;
    * @return {string}
    */
proto.rpcpb.PeerIDResp.prototype.getMessage = function () {
  return (/** @type {string} */jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.rpcpb.PeerIDResp.prototype.setMessage = function (value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
    * optional string peerid = 3;
    * @return {string}
    */
proto.rpcpb.PeerIDResp.prototype.getPeerid = function () {
  return (/** @type {string} */jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.rpcpb.PeerIDResp.prototype.setPeerid = function (value) {
  jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
                                       * Creates an object representation of this proto suitable for use in Soy templates.
                                       * Field names that are reserved in JavaScript and will be renamed to pb_name.
                                       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
                                       * For the list of reserved names please see:
                                       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
                                       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
                                       *     for transitional soy proto support: http://goto/soy-param-migration
                                       * @return {!Object}
                                       */
  proto.rpcpb.MinersReq.prototype.toObject = function (opt_includeInstance) {
    return proto.rpcpb.MinersReq.toObject(opt_includeInstance, this);
  };


  /**
      * Static version of the {@see toObject} method.
      * @param {boolean|undefined} includeInstance Whether to include the JSPB
      *     instance for transitional soy proto support:
      *     http://goto/soy-param-migration
      * @param {!proto.rpcpb.MinersReq} msg The msg instance to transform.
      * @return {!Object}
      * @suppress {unusedLocalVariables} f is only used for nested messages
      */
  proto.rpcpb.MinersReq.toObject = function (includeInstance, msg) {
    var f,obj = {};



    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}


/**
   * Deserializes binary data (in protobuf wire format).
   * @param {jspb.ByteSource} bytes The bytes to deserialize.
   * @return {!proto.rpcpb.MinersReq}
   */
proto.rpcpb.MinersReq.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpcpb.MinersReq();
  return proto.rpcpb.MinersReq.deserializeBinaryFromReader(msg, reader);
};


/**
    * Deserializes binary data (in protobuf wire format) from the
    * given reader into the given message object.
    * @param {!proto.rpcpb.MinersReq} msg The message object to deserialize into.
    * @param {!jspb.BinaryReader} reader The BinaryReader to use.
    * @return {!proto.rpcpb.MinersReq}
    */
proto.rpcpb.MinersReq.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      default:
        reader.skipField();
        break;}

  }
  return msg;
};


/**
    * Serializes the message to binary data (in protobuf wire format).
    * @return {!Uint8Array}
    */
proto.rpcpb.MinersReq.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.rpcpb.MinersReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
    * Serializes the given message to binary data (in protobuf wire
    * format), writing to the given BinaryWriter.
    * @param {!proto.rpcpb.MinersReq} message
    * @param {!jspb.BinaryWriter} writer
    * @suppress {unusedLocalVariables} f is only used for nested messages
    */
proto.rpcpb.MinersReq.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
};



/**
    * List of repeated fields within this message type.
    * @private {!Array<number>}
    * @const
    */
proto.rpcpb.MinersResp.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
                                       * Creates an object representation of this proto suitable for use in Soy templates.
                                       * Field names that are reserved in JavaScript and will be renamed to pb_name.
                                       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
                                       * For the list of reserved names please see:
                                       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
                                       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
                                       *     for transitional soy proto support: http://goto/soy-param-migration
                                       * @return {!Object}
                                       */
  proto.rpcpb.MinersResp.prototype.toObject = function (opt_includeInstance) {
    return proto.rpcpb.MinersResp.toObject(opt_includeInstance, this);
  };


  /**
      * Static version of the {@see toObject} method.
      * @param {boolean|undefined} includeInstance Whether to include the JSPB
      *     instance for transitional soy proto support:
      *     http://goto/soy-param-migration
      * @param {!proto.rpcpb.MinersResp} msg The msg instance to transform.
      * @return {!Object}
      * @suppress {unusedLocalVariables} f is only used for nested messages
      */
  proto.rpcpb.MinersResp.toObject = function (includeInstance, msg) {
    var f,obj = {
      code: jspb.Message.getFieldWithDefault(msg, 1, 0),
      message: jspb.Message.getFieldWithDefault(msg, 2, ""),
      minersList: jspb.Message.toObjectList(msg.getMinersList(),
      proto.rpcpb.MinerDetail.toObject, includeInstance) };


    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}


/**
   * Deserializes binary data (in protobuf wire format).
   * @param {jspb.ByteSource} bytes The bytes to deserialize.
   * @return {!proto.rpcpb.MinersResp}
   */
proto.rpcpb.MinersResp.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpcpb.MinersResp();
  return proto.rpcpb.MinersResp.deserializeBinaryFromReader(msg, reader);
};


/**
    * Deserializes binary data (in protobuf wire format) from the
    * given reader into the given message object.
    * @param {!proto.rpcpb.MinersResp} msg The message object to deserialize into.
    * @param {!jspb.BinaryReader} reader The BinaryReader to use.
    * @return {!proto.rpcpb.MinersResp}
    */
proto.rpcpb.MinersResp.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */reader.readInt32();
        msg.setCode(value);
        break;
      case 2:
        var value = /** @type {string} */reader.readString();
        msg.setMessage(value);
        break;
      case 3:
        var value = new proto.rpcpb.MinerDetail();
        reader.readMessage(value, proto.rpcpb.MinerDetail.deserializeBinaryFromReader);
        msg.addMiners(value);
        break;
      default:
        reader.skipField();
        break;}

  }
  return msg;
};


/**
    * Serializes the message to binary data (in protobuf wire format).
    * @return {!Uint8Array}
    */
proto.rpcpb.MinersResp.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.rpcpb.MinersResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
    * Serializes the given message to binary data (in protobuf wire
    * format), writing to the given BinaryWriter.
    * @param {!proto.rpcpb.MinersResp} message
    * @param {!jspb.BinaryWriter} writer
    * @suppress {unusedLocalVariables} f is only used for nested messages
    */
proto.rpcpb.MinersResp.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0) {
    writer.writeInt32(
    1,
    f);

  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
    2,
    f);

  }
  f = message.getMinersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
    3,
    f,
    proto.rpcpb.MinerDetail.serializeBinaryToWriter);

  }
};


/**
    * optional int32 code = 1;
    * @return {number}
    */
proto.rpcpb.MinersResp.prototype.getCode = function () {
  return (/** @type {number} */jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.rpcpb.MinersResp.prototype.setCode = function (value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
    * optional string message = 2;
    * @return {string}
    */
proto.rpcpb.MinersResp.prototype.getMessage = function () {
  return (/** @type {string} */jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.rpcpb.MinersResp.prototype.setMessage = function (value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
    * repeated MinerDetail miners = 3;
    * @return {!Array<!proto.rpcpb.MinerDetail>}
    */
proto.rpcpb.MinersResp.prototype.getMinersList = function () {
  return (/** @type{!Array<!proto.rpcpb.MinerDetail>} */
    jspb.Message.getRepeatedWrapperField(this, proto.rpcpb.MinerDetail, 3));
};


/** @param {!Array<!proto.rpcpb.MinerDetail>} value */
proto.rpcpb.MinersResp.prototype.setMinersList = function (value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
    * @param {!proto.rpcpb.MinerDetail=} opt_value
    * @param {number=} opt_index
    * @return {!proto.rpcpb.MinerDetail}
    */
proto.rpcpb.MinersResp.prototype.addMiners = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.rpcpb.MinerDetail, opt_index);
};


/**
    * Clears the list making it empty but non-null.
    */
proto.rpcpb.MinersResp.prototype.clearMinersList = function () {
  this.setMinersList([]);
};



/**
    * List of repeated fields within this message type.
    * @private {!Array<number>}
    * @const
    */
proto.rpcpb.MinerDetail.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
                                       * Creates an object representation of this proto suitable for use in Soy templates.
                                       * Field names that are reserved in JavaScript and will be renamed to pb_name.
                                       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
                                       * For the list of reserved names please see:
                                       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
                                       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
                                       *     for transitional soy proto support: http://goto/soy-param-migration
                                       * @return {!Object}
                                       */
  proto.rpcpb.MinerDetail.prototype.toObject = function (opt_includeInstance) {
    return proto.rpcpb.MinerDetail.toObject(opt_includeInstance, this);
  };


  /**
      * Static version of the {@see toObject} method.
      * @param {boolean|undefined} includeInstance Whether to include the JSPB
      *     instance for transitional soy proto support:
      *     http://goto/soy-param-migration
      * @param {!proto.rpcpb.MinerDetail} msg The msg instance to transform.
      * @return {!Object}
      * @suppress {unusedLocalVariables} f is only used for nested messages
      */
  proto.rpcpb.MinerDetail.toObject = function (includeInstance, msg) {
    var f,obj = {
      id: jspb.Message.getFieldWithDefault(msg, 1, ""),
      address: jspb.Message.getFieldWithDefault(msg, 2, ""),
      iplistList: jspb.Message.getRepeatedField(msg, 3) };


    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}


/**
   * Deserializes binary data (in protobuf wire format).
   * @param {jspb.ByteSource} bytes The bytes to deserialize.
   * @return {!proto.rpcpb.MinerDetail}
   */
proto.rpcpb.MinerDetail.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpcpb.MinerDetail();
  return proto.rpcpb.MinerDetail.deserializeBinaryFromReader(msg, reader);
};


/**
    * Deserializes binary data (in protobuf wire format) from the
    * given reader into the given message object.
    * @param {!proto.rpcpb.MinerDetail} msg The message object to deserialize into.
    * @param {!jspb.BinaryReader} reader The BinaryReader to use.
    * @return {!proto.rpcpb.MinerDetail}
    */
proto.rpcpb.MinerDetail.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */reader.readString();
        msg.setId(value);
        break;
      case 2:
        var value = /** @type {string} */reader.readString();
        msg.setAddress(value);
        break;
      case 3:
        var value = /** @type {string} */reader.readString();
        msg.addIplist(value);
        break;
      default:
        reader.skipField();
        break;}

  }
  return msg;
};


/**
    * Serializes the message to binary data (in protobuf wire format).
    * @return {!Uint8Array}
    */
proto.rpcpb.MinerDetail.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.rpcpb.MinerDetail.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
    * Serializes the given message to binary data (in protobuf wire
    * format), writing to the given BinaryWriter.
    * @param {!proto.rpcpb.MinerDetail} message
    * @param {!jspb.BinaryWriter} writer
    * @suppress {unusedLocalVariables} f is only used for nested messages
    */
proto.rpcpb.MinerDetail.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
    1,
    f);

  }
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
    2,
    f);

  }
  f = message.getIplistList();
  if (f.length > 0) {
    writer.writeRepeatedString(
    3,
    f);

  }
};


/**
    * optional string id = 1;
    * @return {string}
    */
proto.rpcpb.MinerDetail.prototype.getId = function () {
  return (/** @type {string} */jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.rpcpb.MinerDetail.prototype.setId = function (value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
    * optional string address = 2;
    * @return {string}
    */
proto.rpcpb.MinerDetail.prototype.getAddress = function () {
  return (/** @type {string} */jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.rpcpb.MinerDetail.prototype.setAddress = function (value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
    * repeated string iplist = 3;
    * @return {!Array<string>}
    */
proto.rpcpb.MinerDetail.prototype.getIplistList = function () {
  return (/** @type {!Array<string>} */jspb.Message.getRepeatedField(this, 3));
};


/** @param {!Array<string>} value */
proto.rpcpb.MinerDetail.prototype.setIplistList = function (value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
    * @param {string} value
    * @param {number=} opt_index
    */
proto.rpcpb.MinerDetail.prototype.addIplist = function (value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
    * Clears the list making it empty but non-null.
    */
proto.rpcpb.MinerDetail.prototype.clearIplistList = function () {
  this.setIplistList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
                                       * Creates an object representation of this proto suitable for use in Soy templates.
                                       * Field names that are reserved in JavaScript and will be renamed to pb_name.
                                       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
                                       * For the list of reserved names please see:
                                       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
                                       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
                                       *     for transitional soy proto support: http://goto/soy-param-migration
                                       * @return {!Object}
                                       */
  proto.rpcpb.DelegatesReq.prototype.toObject = function (opt_includeInstance) {
    return proto.rpcpb.DelegatesReq.toObject(opt_includeInstance, this);
  };


  /**
      * Static version of the {@see toObject} method.
      * @param {boolean|undefined} includeInstance Whether to include the JSPB
      *     instance for transitional soy proto support:
      *     http://goto/soy-param-migration
      * @param {!proto.rpcpb.DelegatesReq} msg The msg instance to transform.
      * @return {!Object}
      * @suppress {unusedLocalVariables} f is only used for nested messages
      */
  proto.rpcpb.DelegatesReq.toObject = function (includeInstance, msg) {
    var f,obj = {
      type: jspb.Message.getFieldWithDefault(msg, 1, 0) };


    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}


/**
   * Deserializes binary data (in protobuf wire format).
   * @param {jspb.ByteSource} bytes The bytes to deserialize.
   * @return {!proto.rpcpb.DelegatesReq}
   */
proto.rpcpb.DelegatesReq.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpcpb.DelegatesReq();
  return proto.rpcpb.DelegatesReq.deserializeBinaryFromReader(msg, reader);
};


/**
    * Deserializes binary data (in protobuf wire format) from the
    * given reader into the given message object.
    * @param {!proto.rpcpb.DelegatesReq} msg The message object to deserialize into.
    * @param {!jspb.BinaryReader} reader The BinaryReader to use.
    * @return {!proto.rpcpb.DelegatesReq}
    */
proto.rpcpb.DelegatesReq.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!proto.rpcpb.DelegatesReq.Type} */reader.readEnum();
        msg.setType(value);
        break;
      default:
        reader.skipField();
        break;}

  }
  return msg;
};


/**
    * Serializes the message to binary data (in protobuf wire format).
    * @return {!Uint8Array}
    */
proto.rpcpb.DelegatesReq.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.rpcpb.DelegatesReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
    * Serializes the given message to binary data (in protobuf wire
    * format), writing to the given BinaryWriter.
    * @param {!proto.rpcpb.DelegatesReq} message
    * @param {!jspb.BinaryWriter} writer
    * @suppress {unusedLocalVariables} f is only used for nested messages
    */
proto.rpcpb.DelegatesReq.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
    1,
    f);

  }
};


/**
    * @enum {number}
    */
proto.rpcpb.DelegatesReq.Type = {
  BOOKKEEPERS: 0,
  DELEGATES: 1,
  CANDIDATES: 2 };


/**
                    * optional Type type = 1;
                    * @return {!proto.rpcpb.DelegatesReq.Type}
                    */
proto.rpcpb.DelegatesReq.prototype.getType = function () {
  return (/** @type {!proto.rpcpb.DelegatesReq.Type} */jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.rpcpb.DelegatesReq.Type} value */
proto.rpcpb.DelegatesReq.prototype.setType = function (value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};



/**
    * List of repeated fields within this message type.
    * @private {!Array<number>}
    * @const
    */
proto.rpcpb.DelegatesResp.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
                                       * Creates an object representation of this proto suitable for use in Soy templates.
                                       * Field names that are reserved in JavaScript and will be renamed to pb_name.
                                       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
                                       * For the list of reserved names please see:
                                       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
                                       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
                                       *     for transitional soy proto support: http://goto/soy-param-migration
                                       * @return {!Object}
                                       */
  proto.rpcpb.DelegatesResp.prototype.toObject = function (opt_includeInstance) {
    return proto.rpcpb.DelegatesResp.toObject(opt_includeInstance, this);
  };


  /**
      * Static version of the {@see toObject} method.
      * @param {boolean|undefined} includeInstance Whether to include the JSPB
      *     instance for transitional soy proto support:
      *     http://goto/soy-param-migration
      * @param {!proto.rpcpb.DelegatesResp} msg The msg instance to transform.
      * @return {!Object}
      * @suppress {unusedLocalVariables} f is only used for nested messages
      */
  proto.rpcpb.DelegatesResp.toObject = function (includeInstance, msg) {
    var f,obj = {
      code: jspb.Message.getFieldWithDefault(msg, 1, 0),
      message: jspb.Message.getFieldWithDefault(msg, 2, ""),
      delegatesList: jspb.Message.toObjectList(msg.getDelegatesList(),
      proto.rpcpb.Delegate.toObject, includeInstance) };


    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}


/**
   * Deserializes binary data (in protobuf wire format).
   * @param {jspb.ByteSource} bytes The bytes to deserialize.
   * @return {!proto.rpcpb.DelegatesResp}
   */
proto.rpcpb.DelegatesResp.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpcpb.DelegatesResp();
  return proto.rpcpb.DelegatesResp.deserializeBinaryFromReader(msg, reader);
};


/**
    * Deserializes binary data (in protobuf wire format) from the
    * given reader into the given message object.
    * @param {!proto.rpcpb.DelegatesResp} msg The message object to deserialize into.
    * @param {!jspb.BinaryReader} reader The BinaryReader to use.
    * @return {!proto.rpcpb.DelegatesResp}
    */
proto.rpcpb.DelegatesResp.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */reader.readInt32();
        msg.setCode(value);
        break;
      case 2:
        var value = /** @type {string} */reader.readString();
        msg.setMessage(value);
        break;
      case 3:
        var value = new proto.rpcpb.Delegate();
        reader.readMessage(value, proto.rpcpb.Delegate.deserializeBinaryFromReader);
        msg.addDelegates(value);
        break;
      default:
        reader.skipField();
        break;}

  }
  return msg;
};


/**
    * Serializes the message to binary data (in protobuf wire format).
    * @return {!Uint8Array}
    */
proto.rpcpb.DelegatesResp.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.rpcpb.DelegatesResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
    * Serializes the given message to binary data (in protobuf wire
    * format), writing to the given BinaryWriter.
    * @param {!proto.rpcpb.DelegatesResp} message
    * @param {!jspb.BinaryWriter} writer
    * @suppress {unusedLocalVariables} f is only used for nested messages
    */
proto.rpcpb.DelegatesResp.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0) {
    writer.writeInt32(
    1,
    f);

  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
    2,
    f);

  }
  f = message.getDelegatesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
    3,
    f,
    proto.rpcpb.Delegate.serializeBinaryToWriter);

  }
};


/**
    * optional int32 code = 1;
    * @return {number}
    */
proto.rpcpb.DelegatesResp.prototype.getCode = function () {
  return (/** @type {number} */jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.rpcpb.DelegatesResp.prototype.setCode = function (value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
    * optional string message = 2;
    * @return {string}
    */
proto.rpcpb.DelegatesResp.prototype.getMessage = function () {
  return (/** @type {string} */jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.rpcpb.DelegatesResp.prototype.setMessage = function (value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
    * repeated Delegate delegates = 3;
    * @return {!Array<!proto.rpcpb.Delegate>}
    */
proto.rpcpb.DelegatesResp.prototype.getDelegatesList = function () {
  return (/** @type{!Array<!proto.rpcpb.Delegate>} */
    jspb.Message.getRepeatedWrapperField(this, proto.rpcpb.Delegate, 3));
};


/** @param {!Array<!proto.rpcpb.Delegate>} value */
proto.rpcpb.DelegatesResp.prototype.setDelegatesList = function (value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
    * @param {!proto.rpcpb.Delegate=} opt_value
    * @param {number=} opt_index
    * @return {!proto.rpcpb.Delegate}
    */
proto.rpcpb.DelegatesResp.prototype.addDelegates = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.rpcpb.Delegate, opt_index);
};


/**
    * Clears the list making it empty but non-null.
    */
proto.rpcpb.DelegatesResp.prototype.clearDelegatesList = function () {
  this.setDelegatesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
                                       * Creates an object representation of this proto suitable for use in Soy templates.
                                       * Field names that are reserved in JavaScript and will be renamed to pb_name.
                                       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
                                       * For the list of reserved names please see:
                                       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
                                       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
                                       *     for transitional soy proto support: http://goto/soy-param-migration
                                       * @return {!Object}
                                       */
  proto.rpcpb.LatestConfirmedBlockReq.prototype.toObject = function (opt_includeInstance) {
    return proto.rpcpb.LatestConfirmedBlockReq.toObject(opt_includeInstance, this);
  };


  /**
      * Static version of the {@see toObject} method.
      * @param {boolean|undefined} includeInstance Whether to include the JSPB
      *     instance for transitional soy proto support:
      *     http://goto/soy-param-migration
      * @param {!proto.rpcpb.LatestConfirmedBlockReq} msg The msg instance to transform.
      * @return {!Object}
      * @suppress {unusedLocalVariables} f is only used for nested messages
      */
  proto.rpcpb.LatestConfirmedBlockReq.toObject = function (includeInstance, msg) {
    var f,obj = {};



    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}


/**
   * Deserializes binary data (in protobuf wire format).
   * @param {jspb.ByteSource} bytes The bytes to deserialize.
   * @return {!proto.rpcpb.LatestConfirmedBlockReq}
   */
proto.rpcpb.LatestConfirmedBlockReq.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpcpb.LatestConfirmedBlockReq();
  return proto.rpcpb.LatestConfirmedBlockReq.deserializeBinaryFromReader(msg, reader);
};


/**
    * Deserializes binary data (in protobuf wire format) from the
    * given reader into the given message object.
    * @param {!proto.rpcpb.LatestConfirmedBlockReq} msg The message object to deserialize into.
    * @param {!jspb.BinaryReader} reader The BinaryReader to use.
    * @return {!proto.rpcpb.LatestConfirmedBlockReq}
    */
proto.rpcpb.LatestConfirmedBlockReq.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      default:
        reader.skipField();
        break;}

  }
  return msg;
};


/**
    * Serializes the message to binary data (in protobuf wire format).
    * @return {!Uint8Array}
    */
proto.rpcpb.LatestConfirmedBlockReq.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.rpcpb.LatestConfirmedBlockReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
    * Serializes the given message to binary data (in protobuf wire
    * format), writing to the given BinaryWriter.
    * @param {!proto.rpcpb.LatestConfirmedBlockReq} message
    * @param {!jspb.BinaryWriter} writer
    * @suppress {unusedLocalVariables} f is only used for nested messages
    */
proto.rpcpb.LatestConfirmedBlockReq.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
                                       * Creates an object representation of this proto suitable for use in Soy templates.
                                       * Field names that are reserved in JavaScript and will be renamed to pb_name.
                                       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
                                       * For the list of reserved names please see:
                                       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
                                       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
                                       *     for transitional soy proto support: http://goto/soy-param-migration
                                       * @return {!Object}
                                       */
  proto.rpcpb.LatestConfirmedBlockResp.prototype.toObject = function (opt_includeInstance) {
    return proto.rpcpb.LatestConfirmedBlockResp.toObject(opt_includeInstance, this);
  };


  /**
      * Static version of the {@see toObject} method.
      * @param {boolean|undefined} includeInstance Whether to include the JSPB
      *     instance for transitional soy proto support:
      *     http://goto/soy-param-migration
      * @param {!proto.rpcpb.LatestConfirmedBlockResp} msg The msg instance to transform.
      * @return {!Object}
      * @suppress {unusedLocalVariables} f is only used for nested messages
      */
  proto.rpcpb.LatestConfirmedBlockResp.toObject = function (includeInstance, msg) {
    var f,obj = {
      code: jspb.Message.getFieldWithDefault(msg, 1, 0),
      message: jspb.Message.getFieldWithDefault(msg, 2, ""),
      height: jspb.Message.getFieldWithDefault(msg, 3, 0),
      hash: jspb.Message.getFieldWithDefault(msg, 4, "") };


    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}


/**
   * Deserializes binary data (in protobuf wire format).
   * @param {jspb.ByteSource} bytes The bytes to deserialize.
   * @return {!proto.rpcpb.LatestConfirmedBlockResp}
   */
proto.rpcpb.LatestConfirmedBlockResp.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpcpb.LatestConfirmedBlockResp();
  return proto.rpcpb.LatestConfirmedBlockResp.deserializeBinaryFromReader(msg, reader);
};


/**
    * Deserializes binary data (in protobuf wire format) from the
    * given reader into the given message object.
    * @param {!proto.rpcpb.LatestConfirmedBlockResp} msg The message object to deserialize into.
    * @param {!jspb.BinaryReader} reader The BinaryReader to use.
    * @return {!proto.rpcpb.LatestConfirmedBlockResp}
    */
proto.rpcpb.LatestConfirmedBlockResp.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */reader.readInt32();
        msg.setCode(value);
        break;
      case 2:
        var value = /** @type {string} */reader.readString();
        msg.setMessage(value);
        break;
      case 3:
        var value = /** @type {number} */reader.readUint32();
        msg.setHeight(value);
        break;
      case 4:
        var value = /** @type {string} */reader.readString();
        msg.setHash(value);
        break;
      default:
        reader.skipField();
        break;}

  }
  return msg;
};


/**
    * Serializes the message to binary data (in protobuf wire format).
    * @return {!Uint8Array}
    */
proto.rpcpb.LatestConfirmedBlockResp.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.rpcpb.LatestConfirmedBlockResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
    * Serializes the given message to binary data (in protobuf wire
    * format), writing to the given BinaryWriter.
    * @param {!proto.rpcpb.LatestConfirmedBlockResp} message
    * @param {!jspb.BinaryWriter} writer
    * @suppress {unusedLocalVariables} f is only used for nested messages
    */
proto.rpcpb.LatestConfirmedBlockResp.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0) {
    writer.writeInt32(
    1,
    f);

  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
    2,
    f);

  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeUint32(
    3,
    f);

  }
  f = message.getHash();
  if (f.length > 0) {
    writer.writeString(
    4,
    f);

  }
};


/**
    * optional int32 code = 1;
    * @return {number}
    */
proto.rpcpb.LatestConfirmedBlockResp.prototype.getCode = function () {
  return (/** @type {number} */jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.rpcpb.LatestConfirmedBlockResp.prototype.setCode = function (value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
    * optional string message = 2;
    * @return {string}
    */
proto.rpcpb.LatestConfirmedBlockResp.prototype.getMessage = function () {
  return (/** @type {string} */jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.rpcpb.LatestConfirmedBlockResp.prototype.setMessage = function (value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
    * optional uint32 height = 3;
    * @return {number}
    */
proto.rpcpb.LatestConfirmedBlockResp.prototype.getHeight = function () {
  return (/** @type {number} */jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.rpcpb.LatestConfirmedBlockResp.prototype.setHeight = function (value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
    * optional string hash = 4;
    * @return {string}
    */
proto.rpcpb.LatestConfirmedBlockResp.prototype.getHash = function () {
  return (/** @type {string} */jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.rpcpb.LatestConfirmedBlockResp.prototype.setHash = function (value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


goog.object.extend(exports, proto.rpcpb);