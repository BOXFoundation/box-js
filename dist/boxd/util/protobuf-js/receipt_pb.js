"use strict"; /**
               * @fileoverview
               * @enhanceable
               * @suppress {messageConventions} JS Compiler reports an error if a variable or
               *     field starts with 'MSG_' and isn't a translatable message.
               * @public
               */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var log_pb = require('./log_pb.js');
goog.object.extend(proto, log_pb);
goog.exportSymbol('proto.corepb.HashReceipt', null, global);
goog.exportSymbol('proto.corepb.HashReceipts', null, global);
goog.exportSymbol('proto.corepb.Receipt', null, global);
goog.exportSymbol('proto.corepb.Receipts', null, global);
/**
                                                           * Generated by JsPbCodeGenerator.
                                                           * @param {Array=} opt_data Optional initial data array, typically from a
                                                           * server response, or constructed directly in Javascript. The array is used
                                                           * in place and becomes part of the constructed object. It is not cloned.
                                                           * If no data is provided, the constructed object will be empty, but still
                                                           * valid.
                                                           * @extends {jspb.Message}
                                                           * @constructor
                                                           */
proto.corepb.Receipt = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.corepb.Receipt.repeatedFields_, null);
};
goog.inherits(proto.corepb.Receipt, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
                               * @public
                               * @override
                               */
  proto.corepb.Receipt.displayName = 'proto.corepb.Receipt';
}
/**
   * Generated by JsPbCodeGenerator.
   * @param {Array=} opt_data Optional initial data array, typically from a
   * server response, or constructed directly in Javascript. The array is used
   * in place and becomes part of the constructed object. It is not cloned.
   * If no data is provided, the constructed object will be empty, but still
   * valid.
   * @extends {jspb.Message}
   * @constructor
   */
proto.corepb.Receipts = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.corepb.Receipts.repeatedFields_, null);
};
goog.inherits(proto.corepb.Receipts, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
                               * @public
                               * @override
                               */
  proto.corepb.Receipts.displayName = 'proto.corepb.Receipts';
}
/**
   * Generated by JsPbCodeGenerator.
   * @param {Array=} opt_data Optional initial data array, typically from a
   * server response, or constructed directly in Javascript. The array is used
   * in place and becomes part of the constructed object. It is not cloned.
   * If no data is provided, the constructed object will be empty, but still
   * valid.
   * @extends {jspb.Message}
   * @constructor
   */
proto.corepb.HashReceipt = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.corepb.HashReceipt.repeatedFields_, null);
};
goog.inherits(proto.corepb.HashReceipt, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
                               * @public
                               * @override
                               */
  proto.corepb.HashReceipt.displayName = 'proto.corepb.HashReceipt';
}
/**
   * Generated by JsPbCodeGenerator.
   * @param {Array=} opt_data Optional initial data array, typically from a
   * server response, or constructed directly in Javascript. The array is used
   * in place and becomes part of the constructed object. It is not cloned.
   * If no data is provided, the constructed object will be empty, but still
   * valid.
   * @extends {jspb.Message}
   * @constructor
   */
proto.corepb.HashReceipts = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.corepb.HashReceipts.repeatedFields_, null);
};
goog.inherits(proto.corepb.HashReceipts, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
                               * @public
                               * @override
                               */
  proto.corepb.HashReceipts.displayName = 'proto.corepb.HashReceipts';
}

/**
   * List of repeated fields within this message type.
   * @private {!Array<number>}
   * @const
   */
proto.corepb.Receipt.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
                                       * Creates an object representation of this proto suitable for use in Soy templates.
                                       * Field names that are reserved in JavaScript and will be renamed to pb_name.
                                       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
                                       * For the list of reserved names please see:
                                       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
                                       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
                                       *     for transitional soy proto support: http://goto/soy-param-migration
                                       * @return {!Object}
                                       */
  proto.corepb.Receipt.prototype.toObject = function (opt_includeInstance) {
    return proto.corepb.Receipt.toObject(opt_includeInstance, this);
  };


  /**
      * Static version of the {@see toObject} method.
      * @param {boolean|undefined} includeInstance Whether to include the JSPB
      *     instance for transitional soy proto support:
      *     http://goto/soy-param-migration
      * @param {!proto.corepb.Receipt} msg The msg instance to transform.
      * @return {!Object}
      * @suppress {unusedLocalVariables} f is only used for nested messages
      */
  proto.corepb.Receipt.toObject = function (includeInstance, msg) {
    var f,obj = {
      txHash: msg.getTxHash_asB64(),
      txIndex: jspb.Message.getFieldWithDefault(msg, 2, 0),
      failed: jspb.Message.getFieldWithDefault(msg, 3, false),
      gasUsed: jspb.Message.getFieldWithDefault(msg, 4, 0),
      logsList: jspb.Message.toObjectList(msg.getLogsList(),
      log_pb.Log.toObject, includeInstance),
      bloom: msg.getBloom_asB64() };


    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}


/**
   * Deserializes binary data (in protobuf wire format).
   * @param {jspb.ByteSource} bytes The bytes to deserialize.
   * @return {!proto.corepb.Receipt}
   */
proto.corepb.Receipt.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.corepb.Receipt();
  return proto.corepb.Receipt.deserializeBinaryFromReader(msg, reader);
};


/**
    * Deserializes binary data (in protobuf wire format) from the
    * given reader into the given message object.
    * @param {!proto.corepb.Receipt} msg The message object to deserialize into.
    * @param {!jspb.BinaryReader} reader The BinaryReader to use.
    * @return {!proto.corepb.Receipt}
    */
proto.corepb.Receipt.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!Uint8Array} */reader.readBytes();
        msg.setTxHash(value);
        break;
      case 2:
        var value = /** @type {number} */reader.readUint32();
        msg.setTxIndex(value);
        break;
      case 3:
        var value = /** @type {boolean} */reader.readBool();
        msg.setFailed(value);
        break;
      case 4:
        var value = /** @type {number} */reader.readUint64();
        msg.setGasUsed(value);
        break;
      case 5:
        var value = new log_pb.Log();
        reader.readMessage(value, log_pb.Log.deserializeBinaryFromReader);
        msg.addLogs(value);
        break;
      case 6:
        var value = /** @type {!Uint8Array} */reader.readBytes();
        msg.setBloom(value);
        break;
      default:
        reader.skipField();
        break;}

  }
  return msg;
};


/**
    * Serializes the message to binary data (in protobuf wire format).
    * @return {!Uint8Array}
    */
proto.corepb.Receipt.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.corepb.Receipt.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
    * Serializes the given message to binary data (in protobuf wire
    * format), writing to the given BinaryWriter.
    * @param {!proto.corepb.Receipt} message
    * @param {!jspb.BinaryWriter} writer
    * @suppress {unusedLocalVariables} f is only used for nested messages
    */
proto.corepb.Receipt.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getTxHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
    1,
    f);

  }
  f = message.getTxIndex();
  if (f !== 0) {
    writer.writeUint32(
    2,
    f);

  }
  f = message.getFailed();
  if (f) {
    writer.writeBool(
    3,
    f);

  }
  f = message.getGasUsed();
  if (f !== 0) {
    writer.writeUint64(
    4,
    f);

  }
  f = message.getLogsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
    5,
    f,
    log_pb.Log.serializeBinaryToWriter);

  }
  f = message.getBloom_asU8();
  if (f.length > 0) {
    writer.writeBytes(
    6,
    f);

  }
};


/**
    * optional bytes tx_hash = 1;
    * @return {!(string|Uint8Array)}
    */
proto.corepb.Receipt.prototype.getTxHash = function () {
  return (/** @type {!(string|Uint8Array)} */jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
    * optional bytes tx_hash = 1;
    * This is a type-conversion wrapper around `getTxHash()`
    * @return {string}
    */
proto.corepb.Receipt.prototype.getTxHash_asB64 = function () {
  return (/** @type {string} */jspb.Message.bytesAsB64(
    this.getTxHash()));
};


/**
    * optional bytes tx_hash = 1;
    * Note that Uint8Array is not supported on all browsers.
    * @see http://caniuse.com/Uint8Array
    * This is a type-conversion wrapper around `getTxHash()`
    * @return {!Uint8Array}
    */
proto.corepb.Receipt.prototype.getTxHash_asU8 = function () {
  return (/** @type {!Uint8Array} */jspb.Message.bytesAsU8(
    this.getTxHash()));
};


/** @param {!(string|Uint8Array)} value */
proto.corepb.Receipt.prototype.setTxHash = function (value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
    * optional uint32 tx_index = 2;
    * @return {number}
    */
proto.corepb.Receipt.prototype.getTxIndex = function () {
  return (/** @type {number} */jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.corepb.Receipt.prototype.setTxIndex = function (value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
    * optional bool failed = 3;
    * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
    * You should avoid comparisons like {@code val === true/false} in those cases.
    * @return {boolean}
    */
proto.corepb.Receipt.prototype.getFailed = function () {
  return (/** @type {boolean} */jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.corepb.Receipt.prototype.setFailed = function (value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
    * optional uint64 gas_used = 4;
    * @return {number}
    */
proto.corepb.Receipt.prototype.getGasUsed = function () {
  return (/** @type {number} */jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.corepb.Receipt.prototype.setGasUsed = function (value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
    * repeated Log logs = 5;
    * @return {!Array<!proto.corepb.Log>}
    */
proto.corepb.Receipt.prototype.getLogsList = function () {
  return (/** @type{!Array<!proto.corepb.Log>} */
    jspb.Message.getRepeatedWrapperField(this, log_pb.Log, 5));
};


/** @param {!Array<!proto.corepb.Log>} value */
proto.corepb.Receipt.prototype.setLogsList = function (value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
    * @param {!proto.corepb.Log=} opt_value
    * @param {number=} opt_index
    * @return {!proto.corepb.Log}
    */
proto.corepb.Receipt.prototype.addLogs = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.corepb.Log, opt_index);
};


/**
    * Clears the list making it empty but non-null.
    */
proto.corepb.Receipt.prototype.clearLogsList = function () {
  this.setLogsList([]);
};


/**
    * optional bytes bloom = 6;
    * @return {!(string|Uint8Array)}
    */
proto.corepb.Receipt.prototype.getBloom = function () {
  return (/** @type {!(string|Uint8Array)} */jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
    * optional bytes bloom = 6;
    * This is a type-conversion wrapper around `getBloom()`
    * @return {string}
    */
proto.corepb.Receipt.prototype.getBloom_asB64 = function () {
  return (/** @type {string} */jspb.Message.bytesAsB64(
    this.getBloom()));
};


/**
    * optional bytes bloom = 6;
    * Note that Uint8Array is not supported on all browsers.
    * @see http://caniuse.com/Uint8Array
    * This is a type-conversion wrapper around `getBloom()`
    * @return {!Uint8Array}
    */
proto.corepb.Receipt.prototype.getBloom_asU8 = function () {
  return (/** @type {!Uint8Array} */jspb.Message.bytesAsU8(
    this.getBloom()));
};


/** @param {!(string|Uint8Array)} value */
proto.corepb.Receipt.prototype.setBloom = function (value) {
  jspb.Message.setProto3BytesField(this, 6, value);
};



/**
    * List of repeated fields within this message type.
    * @private {!Array<number>}
    * @const
    */
proto.corepb.Receipts.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
                                       * Creates an object representation of this proto suitable for use in Soy templates.
                                       * Field names that are reserved in JavaScript and will be renamed to pb_name.
                                       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
                                       * For the list of reserved names please see:
                                       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
                                       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
                                       *     for transitional soy proto support: http://goto/soy-param-migration
                                       * @return {!Object}
                                       */
  proto.corepb.Receipts.prototype.toObject = function (opt_includeInstance) {
    return proto.corepb.Receipts.toObject(opt_includeInstance, this);
  };


  /**
      * Static version of the {@see toObject} method.
      * @param {boolean|undefined} includeInstance Whether to include the JSPB
      *     instance for transitional soy proto support:
      *     http://goto/soy-param-migration
      * @param {!proto.corepb.Receipts} msg The msg instance to transform.
      * @return {!Object}
      * @suppress {unusedLocalVariables} f is only used for nested messages
      */
  proto.corepb.Receipts.toObject = function (includeInstance, msg) {
    var f,obj = {
      receiptsList: jspb.Message.toObjectList(msg.getReceiptsList(),
      proto.corepb.Receipt.toObject, includeInstance) };


    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}


/**
   * Deserializes binary data (in protobuf wire format).
   * @param {jspb.ByteSource} bytes The bytes to deserialize.
   * @return {!proto.corepb.Receipts}
   */
proto.corepb.Receipts.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.corepb.Receipts();
  return proto.corepb.Receipts.deserializeBinaryFromReader(msg, reader);
};


/**
    * Deserializes binary data (in protobuf wire format) from the
    * given reader into the given message object.
    * @param {!proto.corepb.Receipts} msg The message object to deserialize into.
    * @param {!jspb.BinaryReader} reader The BinaryReader to use.
    * @return {!proto.corepb.Receipts}
    */
proto.corepb.Receipts.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.corepb.Receipt();
        reader.readMessage(value, proto.corepb.Receipt.deserializeBinaryFromReader);
        msg.addReceipts(value);
        break;
      default:
        reader.skipField();
        break;}

  }
  return msg;
};


/**
    * Serializes the message to binary data (in protobuf wire format).
    * @return {!Uint8Array}
    */
proto.corepb.Receipts.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.corepb.Receipts.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
    * Serializes the given message to binary data (in protobuf wire
    * format), writing to the given BinaryWriter.
    * @param {!proto.corepb.Receipts} message
    * @param {!jspb.BinaryWriter} writer
    * @suppress {unusedLocalVariables} f is only used for nested messages
    */
proto.corepb.Receipts.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getReceiptsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
    1,
    f,
    proto.corepb.Receipt.serializeBinaryToWriter);

  }
};


/**
    * repeated Receipt receipts = 1;
    * @return {!Array<!proto.corepb.Receipt>}
    */
proto.corepb.Receipts.prototype.getReceiptsList = function () {
  return (/** @type{!Array<!proto.corepb.Receipt>} */
    jspb.Message.getRepeatedWrapperField(this, proto.corepb.Receipt, 1));
};


/** @param {!Array<!proto.corepb.Receipt>} value */
proto.corepb.Receipts.prototype.setReceiptsList = function (value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
    * @param {!proto.corepb.Receipt=} opt_value
    * @param {number=} opt_index
    * @return {!proto.corepb.Receipt}
    */
proto.corepb.Receipts.prototype.addReceipts = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.corepb.Receipt, opt_index);
};


/**
    * Clears the list making it empty but non-null.
    */
proto.corepb.Receipts.prototype.clearReceiptsList = function () {
  this.setReceiptsList([]);
};



/**
    * List of repeated fields within this message type.
    * @private {!Array<number>}
    * @const
    */
proto.corepb.HashReceipt.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
                                       * Creates an object representation of this proto suitable for use in Soy templates.
                                       * Field names that are reserved in JavaScript and will be renamed to pb_name.
                                       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
                                       * For the list of reserved names please see:
                                       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
                                       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
                                       *     for transitional soy proto support: http://goto/soy-param-migration
                                       * @return {!Object}
                                       */
  proto.corepb.HashReceipt.prototype.toObject = function (opt_includeInstance) {
    return proto.corepb.HashReceipt.toObject(opt_includeInstance, this);
  };


  /**
      * Static version of the {@see toObject} method.
      * @param {boolean|undefined} includeInstance Whether to include the JSPB
      *     instance for transitional soy proto support:
      *     http://goto/soy-param-migration
      * @param {!proto.corepb.HashReceipt} msg The msg instance to transform.
      * @return {!Object}
      * @suppress {unusedLocalVariables} f is only used for nested messages
      */
  proto.corepb.HashReceipt.toObject = function (includeInstance, msg) {
    var f,obj = {
      txHash: msg.getTxHash_asB64(),
      txIndex: jspb.Message.getFieldWithDefault(msg, 2, 0),
      failed: jspb.Message.getFieldWithDefault(msg, 3, false),
      gasUsed: jspb.Message.getFieldWithDefault(msg, 4, 0),
      logsList: jspb.Message.toObjectList(msg.getLogsList(),
      log_pb.HashLog.toObject, includeInstance),
      bloom: msg.getBloom_asB64() };


    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}


/**
   * Deserializes binary data (in protobuf wire format).
   * @param {jspb.ByteSource} bytes The bytes to deserialize.
   * @return {!proto.corepb.HashReceipt}
   */
proto.corepb.HashReceipt.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.corepb.HashReceipt();
  return proto.corepb.HashReceipt.deserializeBinaryFromReader(msg, reader);
};


/**
    * Deserializes binary data (in protobuf wire format) from the
    * given reader into the given message object.
    * @param {!proto.corepb.HashReceipt} msg The message object to deserialize into.
    * @param {!jspb.BinaryReader} reader The BinaryReader to use.
    * @return {!proto.corepb.HashReceipt}
    */
proto.corepb.HashReceipt.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!Uint8Array} */reader.readBytes();
        msg.setTxHash(value);
        break;
      case 2:
        var value = /** @type {number} */reader.readUint32();
        msg.setTxIndex(value);
        break;
      case 3:
        var value = /** @type {boolean} */reader.readBool();
        msg.setFailed(value);
        break;
      case 4:
        var value = /** @type {number} */reader.readUint64();
        msg.setGasUsed(value);
        break;
      case 5:
        var value = new log_pb.HashLog();
        reader.readMessage(value, log_pb.HashLog.deserializeBinaryFromReader);
        msg.addLogs(value);
        break;
      case 6:
        var value = /** @type {!Uint8Array} */reader.readBytes();
        msg.setBloom(value);
        break;
      default:
        reader.skipField();
        break;}

  }
  return msg;
};


/**
    * Serializes the message to binary data (in protobuf wire format).
    * @return {!Uint8Array}
    */
proto.corepb.HashReceipt.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.corepb.HashReceipt.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
    * Serializes the given message to binary data (in protobuf wire
    * format), writing to the given BinaryWriter.
    * @param {!proto.corepb.HashReceipt} message
    * @param {!jspb.BinaryWriter} writer
    * @suppress {unusedLocalVariables} f is only used for nested messages
    */
proto.corepb.HashReceipt.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getTxHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
    1,
    f);

  }
  f = message.getTxIndex();
  if (f !== 0) {
    writer.writeUint32(
    2,
    f);

  }
  f = message.getFailed();
  if (f) {
    writer.writeBool(
    3,
    f);

  }
  f = message.getGasUsed();
  if (f !== 0) {
    writer.writeUint64(
    4,
    f);

  }
  f = message.getLogsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
    5,
    f,
    log_pb.HashLog.serializeBinaryToWriter);

  }
  f = message.getBloom_asU8();
  if (f.length > 0) {
    writer.writeBytes(
    6,
    f);

  }
};


/**
    * optional bytes tx_hash = 1;
    * @return {!(string|Uint8Array)}
    */
proto.corepb.HashReceipt.prototype.getTxHash = function () {
  return (/** @type {!(string|Uint8Array)} */jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
    * optional bytes tx_hash = 1;
    * This is a type-conversion wrapper around `getTxHash()`
    * @return {string}
    */
proto.corepb.HashReceipt.prototype.getTxHash_asB64 = function () {
  return (/** @type {string} */jspb.Message.bytesAsB64(
    this.getTxHash()));
};


/**
    * optional bytes tx_hash = 1;
    * Note that Uint8Array is not supported on all browsers.
    * @see http://caniuse.com/Uint8Array
    * This is a type-conversion wrapper around `getTxHash()`
    * @return {!Uint8Array}
    */
proto.corepb.HashReceipt.prototype.getTxHash_asU8 = function () {
  return (/** @type {!Uint8Array} */jspb.Message.bytesAsU8(
    this.getTxHash()));
};


/** @param {!(string|Uint8Array)} value */
proto.corepb.HashReceipt.prototype.setTxHash = function (value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
    * optional uint32 tx_index = 2;
    * @return {number}
    */
proto.corepb.HashReceipt.prototype.getTxIndex = function () {
  return (/** @type {number} */jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.corepb.HashReceipt.prototype.setTxIndex = function (value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
    * optional bool failed = 3;
    * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
    * You should avoid comparisons like {@code val === true/false} in those cases.
    * @return {boolean}
    */
proto.corepb.HashReceipt.prototype.getFailed = function () {
  return (/** @type {boolean} */jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.corepb.HashReceipt.prototype.setFailed = function (value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
    * optional uint64 gas_used = 4;
    * @return {number}
    */
proto.corepb.HashReceipt.prototype.getGasUsed = function () {
  return (/** @type {number} */jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.corepb.HashReceipt.prototype.setGasUsed = function (value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
    * repeated HashLog logs = 5;
    * @return {!Array<!proto.corepb.HashLog>}
    */
proto.corepb.HashReceipt.prototype.getLogsList = function () {
  return (/** @type{!Array<!proto.corepb.HashLog>} */
    jspb.Message.getRepeatedWrapperField(this, log_pb.HashLog, 5));
};


/** @param {!Array<!proto.corepb.HashLog>} value */
proto.corepb.HashReceipt.prototype.setLogsList = function (value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
    * @param {!proto.corepb.HashLog=} opt_value
    * @param {number=} opt_index
    * @return {!proto.corepb.HashLog}
    */
proto.corepb.HashReceipt.prototype.addLogs = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.corepb.HashLog, opt_index);
};


/**
    * Clears the list making it empty but non-null.
    */
proto.corepb.HashReceipt.prototype.clearLogsList = function () {
  this.setLogsList([]);
};


/**
    * optional bytes bloom = 6;
    * @return {!(string|Uint8Array)}
    */
proto.corepb.HashReceipt.prototype.getBloom = function () {
  return (/** @type {!(string|Uint8Array)} */jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
    * optional bytes bloom = 6;
    * This is a type-conversion wrapper around `getBloom()`
    * @return {string}
    */
proto.corepb.HashReceipt.prototype.getBloom_asB64 = function () {
  return (/** @type {string} */jspb.Message.bytesAsB64(
    this.getBloom()));
};


/**
    * optional bytes bloom = 6;
    * Note that Uint8Array is not supported on all browsers.
    * @see http://caniuse.com/Uint8Array
    * This is a type-conversion wrapper around `getBloom()`
    * @return {!Uint8Array}
    */
proto.corepb.HashReceipt.prototype.getBloom_asU8 = function () {
  return (/** @type {!Uint8Array} */jspb.Message.bytesAsU8(
    this.getBloom()));
};


/** @param {!(string|Uint8Array)} value */
proto.corepb.HashReceipt.prototype.setBloom = function (value) {
  jspb.Message.setProto3BytesField(this, 6, value);
};



/**
    * List of repeated fields within this message type.
    * @private {!Array<number>}
    * @const
    */
proto.corepb.HashReceipts.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
                                       * Creates an object representation of this proto suitable for use in Soy templates.
                                       * Field names that are reserved in JavaScript and will be renamed to pb_name.
                                       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
                                       * For the list of reserved names please see:
                                       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
                                       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
                                       *     for transitional soy proto support: http://goto/soy-param-migration
                                       * @return {!Object}
                                       */
  proto.corepb.HashReceipts.prototype.toObject = function (opt_includeInstance) {
    return proto.corepb.HashReceipts.toObject(opt_includeInstance, this);
  };


  /**
      * Static version of the {@see toObject} method.
      * @param {boolean|undefined} includeInstance Whether to include the JSPB
      *     instance for transitional soy proto support:
      *     http://goto/soy-param-migration
      * @param {!proto.corepb.HashReceipts} msg The msg instance to transform.
      * @return {!Object}
      * @suppress {unusedLocalVariables} f is only used for nested messages
      */
  proto.corepb.HashReceipts.toObject = function (includeInstance, msg) {
    var f,obj = {
      receiptsList: jspb.Message.toObjectList(msg.getReceiptsList(),
      proto.corepb.HashReceipt.toObject, includeInstance) };


    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}


/**
   * Deserializes binary data (in protobuf wire format).
   * @param {jspb.ByteSource} bytes The bytes to deserialize.
   * @return {!proto.corepb.HashReceipts}
   */
proto.corepb.HashReceipts.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.corepb.HashReceipts();
  return proto.corepb.HashReceipts.deserializeBinaryFromReader(msg, reader);
};


/**
    * Deserializes binary data (in protobuf wire format) from the
    * given reader into the given message object.
    * @param {!proto.corepb.HashReceipts} msg The message object to deserialize into.
    * @param {!jspb.BinaryReader} reader The BinaryReader to use.
    * @return {!proto.corepb.HashReceipts}
    */
proto.corepb.HashReceipts.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.corepb.HashReceipt();
        reader.readMessage(value, proto.corepb.HashReceipt.deserializeBinaryFromReader);
        msg.addReceipts(value);
        break;
      default:
        reader.skipField();
        break;}

  }
  return msg;
};


/**
    * Serializes the message to binary data (in protobuf wire format).
    * @return {!Uint8Array}
    */
proto.corepb.HashReceipts.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.corepb.HashReceipts.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
    * Serializes the given message to binary data (in protobuf wire
    * format), writing to the given BinaryWriter.
    * @param {!proto.corepb.HashReceipts} message
    * @param {!jspb.BinaryWriter} writer
    * @suppress {unusedLocalVariables} f is only used for nested messages
    */
proto.corepb.HashReceipts.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getReceiptsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
    1,
    f,
    proto.corepb.HashReceipt.serializeBinaryToWriter);

  }
};


/**
    * repeated HashReceipt receipts = 1;
    * @return {!Array<!proto.corepb.HashReceipt>}
    */
proto.corepb.HashReceipts.prototype.getReceiptsList = function () {
  return (/** @type{!Array<!proto.corepb.HashReceipt>} */
    jspb.Message.getRepeatedWrapperField(this, proto.corepb.HashReceipt, 1));
};


/** @param {!Array<!proto.corepb.HashReceipt>} value */
proto.corepb.HashReceipts.prototype.setReceiptsList = function (value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
    * @param {!proto.corepb.HashReceipt=} opt_value
    * @param {number=} opt_index
    * @return {!proto.corepb.HashReceipt}
    */
proto.corepb.HashReceipts.prototype.addReceipts = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.corepb.HashReceipt, opt_index);
};


/**
    * Clears the list making it empty but non-null.
    */
proto.corepb.HashReceipts.prototype.clearReceiptsList = function () {
  this.setReceiptsList([]);
};


goog.object.extend(exports, proto.corepb);